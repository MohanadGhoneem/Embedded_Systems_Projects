
MC2_CU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002538  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00002538  000025cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080007a  0080007a  000025e6  2**0
                  ALLOC
  3 .stab         000024f0  00000000  00000000  000025e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011c6  00000000  00000000  00004ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005dde  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007b97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008a82  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009830  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009990  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009c1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a3eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <__vector_8>
      24:	0c 94 3e 0e 	jmp	0x1c7c	; 0x1c7c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e3       	ldi	r30, 0x38	; 56
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 37       	cpi	r26, 0x7F	; 127
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c8 06 	call	0xd90	; 0xd90 <main>
      8a:	0c 94 9a 12 	jmp	0x2534	; 0x2534 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 63 12 	jmp	0x24c6	; 0x24c6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7f 12 	jmp	0x24fe	; 0x24fe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 63 12 	jmp	0x24c6	; 0x24c6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7f 12 	jmp	0x24fe	; 0x24fe <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8f 12 	jmp	0x251e	; 0x251e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_On>:
/* Description:
 * 		Takes void. Returns void
 * 		Turns ON the Buzzer
 */
void Buzzer_On(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(BUZZER_DATA_PORT , BUZZER_PIN );
     b4e:	ab e3       	ldi	r26, 0x3B	; 59
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	eb e3       	ldi	r30, 0x3B	; 59
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	81 60       	ori	r24, 0x01	; 1
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <Buzzer_Off>:
/* Description:
 * 		Takes void. Returns void
 * 		Turns OFF the Buzzer
 */
void Buzzer_Off(void)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(BUZZER_DATA_PORT , BUZZER_PIN);
     b6a:	ab e3       	ldi	r26, 0x3B	; 59
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	eb e3       	ldi	r30, 0x3B	; 59
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8e 7f       	andi	r24, 0xFE	; 254
     b76:	8c 93       	st	X, r24
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <DCMotor_CW>:
/* Description:
 * 		Takes void. Returns void
 * 		Turns ON the Motor in CW Direction
 */
void DCMotor_CW(void)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
	MOTOR_DATA_PORT = CLEAR_BIT(MOTOR_DATA_PORT , MOTOR_PIN_IN1);
     b86:	2b e3       	ldi	r18, 0x3B	; 59
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	ab e3       	ldi	r26, 0x3B	; 59
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	eb e3       	ldi	r30, 0x3B	; 59
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	87 7f       	andi	r24, 0xF7	; 247
     b96:	8c 93       	st	X, r24
     b98:	8c 91       	ld	r24, X
     b9a:	f9 01       	movw	r30, r18
     b9c:	80 83       	st	Z, r24
	MOTOR_DATA_PORT = SET_BIT(MOTOR_DATA_PORT , MOTOR_PIN_IN2);
     b9e:	2b e3       	ldi	r18, 0x3B	; 59
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	ab e3       	ldi	r26, 0x3B	; 59
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	eb e3       	ldi	r30, 0x3B	; 59
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 61       	ori	r24, 0x10	; 16
     bae:	8c 93       	st	X, r24
     bb0:	8c 91       	ld	r24, X
     bb2:	f9 01       	movw	r30, r18
     bb4:	80 83       	st	Z, r24
}
     bb6:	cf 91       	pop	r28
     bb8:	df 91       	pop	r29
     bba:	08 95       	ret

00000bbc <DCMotor_CCW>:
/* Description:
 * 		Takes void. Returns void
 * 		Turns ON the Motor in CCW Direction
 */
void DCMotor_CCW(void)
{
     bbc:	df 93       	push	r29
     bbe:	cf 93       	push	r28
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
	MOTOR_DATA_PORT = CLEAR_BIT( MOTOR_DATA_PORT, MOTOR_PIN_IN2);
     bc4:	2b e3       	ldi	r18, 0x3B	; 59
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	ab e3       	ldi	r26, 0x3B	; 59
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	eb e3       	ldi	r30, 0x3B	; 59
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	8f 7e       	andi	r24, 0xEF	; 239
     bd4:	8c 93       	st	X, r24
     bd6:	8c 91       	ld	r24, X
     bd8:	f9 01       	movw	r30, r18
     bda:	80 83       	st	Z, r24
	MOTOR_DATA_PORT = SET_BIT (MOTOR_DATA_PORT, MOTOR_PIN_IN1);
     bdc:	2b e3       	ldi	r18, 0x3B	; 59
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	ab e3       	ldi	r26, 0x3B	; 59
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	eb e3       	ldi	r30, 0x3B	; 59
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	88 60       	ori	r24, 0x08	; 8
     bec:	8c 93       	st	X, r24
     bee:	8c 91       	ld	r24, X
     bf0:	f9 01       	movw	r30, r18
     bf2:	80 83       	st	Z, r24
}
     bf4:	cf 91       	pop	r28
     bf6:	df 91       	pop	r29
     bf8:	08 95       	ret

00000bfa <DCMotor_Stop>:
/* Description:
 * 		Takes void. Returns void
 * 		Turns OFF the Motor
 */
void DCMotor_Stop(void)
{
     bfa:	df 93       	push	r29
     bfc:	cf 93       	push	r28
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
	MOTOR_DATA_PORT = CLEAR_BIT(MOTOR_DATA_PORT , MOTOR_PIN_IN2);
     c02:	2b e3       	ldi	r18, 0x3B	; 59
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	ab e3       	ldi	r26, 0x3B	; 59
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	eb e3       	ldi	r30, 0x3B	; 59
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	8f 7e       	andi	r24, 0xEF	; 239
     c12:	8c 93       	st	X, r24
     c14:	8c 91       	ld	r24, X
     c16:	f9 01       	movw	r30, r18
     c18:	80 83       	st	Z, r24
	MOTOR_DATA_PORT = CLEAR_BIT( MOTOR_DATA_PORT, MOTOR_PIN_IN1);
     c1a:	2b e3       	ldi	r18, 0x3B	; 59
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	ab e3       	ldi	r26, 0x3B	; 59
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	eb e3       	ldi	r30, 0x3B	; 59
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	87 7f       	andi	r24, 0xF7	; 247
     c2a:	8c 93       	st	X, r24
     c2c:	8c 91       	ld	r24, X
     c2e:	f9 01       	movw	r30, r18
     c30:	80 83       	st	Z, r24
}
     c32:	cf 91       	pop	r28
     c34:	df 91       	pop	r29
     c36:	08 95       	ret

00000c38 <EEPROM_init>:
#include "TWI_Driver.h"

TWI_ConfigType init = {0X02, 0X01, TWPS_0};

void EEPROM_init(void)
{
     c38:	df 93       	push	r29
     c3a:	cf 93       	push	r28
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init( &init );
     c40:	88 e6       	ldi	r24, 0x68	; 104
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <TWI_init>
}
     c48:	cf 91       	pop	r28
     c4a:	df 91       	pop	r29
     c4c:	08 95       	ret

00000c4e <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     c4e:	df 93       	push	r29
     c50:	cf 93       	push	r28
     c52:	00 d0       	rcall	.+0      	; 0xc54 <EEPROM_writeByte+0x6>
     c54:	00 d0       	rcall	.+0      	; 0xc56 <EEPROM_writeByte+0x8>
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	9a 83       	std	Y+2, r25	; 0x02
     c5c:	89 83       	std	Y+1, r24	; 0x01
     c5e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     c60:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <TWI_start>
    if (TWI_getStatus() != TW_START)
     c64:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <TWI_getStatus>
     c68:	88 30       	cpi	r24, 0x08	; 8
     c6a:	11 f0       	breq	.+4      	; 0xc70 <EEPROM_writeByte+0x22>
        return ERROR;
     c6c:	1c 82       	std	Y+4, r1	; 0x04
     c6e:	28 c0       	rjmp	.+80     	; 0xcc0 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	9a 81       	ldd	r25, Y+2	; 0x02
     c74:	80 70       	andi	r24, 0x00	; 0
     c76:	97 70       	andi	r25, 0x07	; 7
     c78:	88 0f       	add	r24, r24
     c7a:	89 2f       	mov	r24, r25
     c7c:	88 1f       	adc	r24, r24
     c7e:	99 0b       	sbc	r25, r25
     c80:	91 95       	neg	r25
     c82:	80 6a       	ori	r24, 0xA0	; 160
     c84:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     c88:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <TWI_getStatus>
     c8c:	88 31       	cpi	r24, 0x18	; 24
     c8e:	11 f0       	breq	.+4      	; 0xc94 <EEPROM_writeByte+0x46>
        return ERROR; 
     c90:	1c 82       	std	Y+4, r1	; 0x04
     c92:	16 c0       	rjmp	.+44     	; 0xcc0 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     c9a:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <TWI_getStatus>
     c9e:	88 32       	cpi	r24, 0x28	; 40
     ca0:	11 f0       	breq	.+4      	; 0xca6 <EEPROM_writeByte+0x58>
        return ERROR;
     ca2:	1c 82       	std	Y+4, r1	; 0x04
     ca4:	0d c0       	rjmp	.+26     	; 0xcc0 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     cac:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <TWI_getStatus>
     cb0:	88 32       	cpi	r24, 0x28	; 40
     cb2:	11 f0       	breq	.+4      	; 0xcb8 <EEPROM_writeByte+0x6a>
        return ERROR;
     cb4:	1c 82       	std	Y+4, r1	; 0x04
     cb6:	04 c0       	rjmp	.+8      	; 0xcc0 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     cb8:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <TWI_stop>
	
    return SUCCESS;
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	8c 83       	std	Y+4, r24	; 0x04
     cc0:	8c 81       	ldd	r24, Y+4	; 0x04
}
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	08 95       	ret

00000cd0 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	00 d0       	rcall	.+0      	; 0xcd6 <EEPROM_readByte+0x6>
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <EEPROM_readByte+0x8>
     cd8:	0f 92       	push	r0
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	9a 83       	std	Y+2, r25	; 0x02
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	7c 83       	std	Y+4, r23	; 0x04
     ce4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     ce6:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <TWI_start>
    if (TWI_getStatus() != TW_START)
     cea:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <TWI_getStatus>
     cee:	88 30       	cpi	r24, 0x08	; 8
     cf0:	11 f0       	breq	.+4      	; 0xcf6 <EEPROM_readByte+0x26>
        return ERROR;
     cf2:	1d 82       	std	Y+5, r1	; 0x05
     cf4:	44 c0       	rjmp	.+136    	; 0xd7e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	9a 81       	ldd	r25, Y+2	; 0x02
     cfa:	80 70       	andi	r24, 0x00	; 0
     cfc:	97 70       	andi	r25, 0x07	; 7
     cfe:	88 0f       	add	r24, r24
     d00:	89 2f       	mov	r24, r25
     d02:	88 1f       	adc	r24, r24
     d04:	99 0b       	sbc	r25, r25
     d06:	91 95       	neg	r25
     d08:	80 6a       	ori	r24, 0xA0	; 160
     d0a:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     d0e:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <TWI_getStatus>
     d12:	88 31       	cpi	r24, 0x18	; 24
     d14:	11 f0       	breq	.+4      	; 0xd1a <EEPROM_readByte+0x4a>
        return ERROR;
     d16:	1d 82       	std	Y+5, r1	; 0x05
     d18:	32 c0       	rjmp	.+100    	; 0xd7e <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     d20:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <TWI_getStatus>
     d24:	88 32       	cpi	r24, 0x28	; 40
     d26:	11 f0       	breq	.+4      	; 0xd2c <EEPROM_readByte+0x5c>
        return ERROR;
     d28:	1d 82       	std	Y+5, r1	; 0x05
     d2a:	29 c0       	rjmp	.+82     	; 0xd7e <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     d2c:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
     d30:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <TWI_getStatus>
     d34:	80 31       	cpi	r24, 0x10	; 16
     d36:	11 f0       	breq	.+4      	; 0xd3c <EEPROM_readByte+0x6c>
        return ERROR;
     d38:	1d 82       	std	Y+5, r1	; 0x05
     d3a:	21 c0       	rjmp	.+66     	; 0xd7e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	9a 81       	ldd	r25, Y+2	; 0x02
     d40:	80 70       	andi	r24, 0x00	; 0
     d42:	97 70       	andi	r25, 0x07	; 7
     d44:	88 0f       	add	r24, r24
     d46:	89 2f       	mov	r24, r25
     d48:	88 1f       	adc	r24, r24
     d4a:	99 0b       	sbc	r25, r25
     d4c:	91 95       	neg	r25
     d4e:	81 6a       	ori	r24, 0xA1	; 161
     d50:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
     d54:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <TWI_getStatus>
     d58:	80 34       	cpi	r24, 0x40	; 64
     d5a:	11 f0       	breq	.+4      	; 0xd60 <EEPROM_readByte+0x90>
        return ERROR;
     d5c:	1d 82       	std	Y+5, r1	; 0x05
     d5e:	0f c0       	rjmp	.+30     	; 0xd7e <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
     d60:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <TWI_readWithNACK>
     d64:	eb 81       	ldd	r30, Y+3	; 0x03
     d66:	fc 81       	ldd	r31, Y+4	; 0x04
     d68:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
     d6a:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <TWI_getStatus>
     d6e:	88 35       	cpi	r24, 0x58	; 88
     d70:	11 f0       	breq	.+4      	; 0xd76 <EEPROM_readByte+0xa6>
        return ERROR;
     d72:	1d 82       	std	Y+5, r1	; 0x05
     d74:	04 c0       	rjmp	.+8      	; 0xd7e <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     d76:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <TWI_stop>
    return SUCCESS;
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	8d 83       	std	Y+5, r24	; 0x05
     d7e:	8d 81       	ldd	r24, Y+5	; 0x05
}
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
     d8a:	cf 91       	pop	r28
     d8c:	df 91       	pop	r29
     d8e:	08 95       	ret

00000d90 <main>:

uint8 g_tickFlag=0;
uint8 g_holdSystem = HOLD_SYSTEM;

int main(void)
{
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	df 93       	push	r29
     d96:	cf 93       	push	r28
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
     d9c:	cb 57       	subi	r28, 0x7B	; 123
     d9e:	d0 40       	sbci	r29, 0x00	; 0
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
	uint8 systemStarting = 0;
     daa:	fe 01       	movw	r30, r28
     dac:	e6 5a       	subi	r30, 0xA6	; 166
     dae:	ff 4f       	sbci	r31, 0xFF	; 255
     db0:	10 82       	st	Z, r1
	uint8 pass_match;

	uint8 password_Stored[PASSWORD_WIDTH];
	uint8 password_compare[PASSWORD_WIDTH];

	uint8 compare=0;
     db2:	fe 01       	movw	r30, r28
     db4:	ed 59       	subi	r30, 0x9D	; 157
     db6:	ff 4f       	sbci	r31, 0xFF	; 255
     db8:	10 82       	st	Z, r1
	uint8 decision;
	uint8 danger_error = NO_DANGER;
     dba:	fe 01       	movw	r30, r28
     dbc:	ea 5a       	subi	r30, 0xAA	; 170
     dbe:	ff 4f       	sbci	r31, 0xFF	; 255
     dc0:	10 82       	st	Z, r1
	uint8 restart_mainProgram = FALSE;
     dc2:	fe 01       	movw	r30, r28
     dc4:	eb 5a       	subi	r30, 0xAB	; 171
     dc6:	ff 4f       	sbci	r31, 0xFF	; 255
     dc8:	10 82       	st	Z, r1

	Timer_ConfigType timer={START_VALUE, COMPARE_VALUE, Timer1, F_CPU_1024, Compare};
     dca:	ce 01       	movw	r24, r28
     dcc:	8c 59       	subi	r24, 0x9C	; 156
     dce:	9f 4f       	sbci	r25, 0xFF	; 255
     dd0:	e4 96       	adiw	r28, 0x34	; 52
     dd2:	9f af       	std	Y+63, r25	; 0x3f
     dd4:	8e af       	std	Y+62, r24	; 0x3e
     dd6:	e4 97       	sbiw	r28, 0x34	; 52
     dd8:	8f e6       	ldi	r24, 0x6F	; 111
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	e6 96       	adiw	r28, 0x36	; 54
     dde:	9f af       	std	Y+63, r25	; 0x3f
     de0:	8e af       	std	Y+62, r24	; 0x3e
     de2:	e6 97       	sbiw	r28, 0x36	; 54
     de4:	9b e0       	ldi	r25, 0x0B	; 11
     de6:	e7 96       	adiw	r28, 0x37	; 55
     de8:	9f af       	std	Y+63, r25	; 0x3f
     dea:	e7 97       	sbiw	r28, 0x37	; 55
     dec:	e6 96       	adiw	r28, 0x36	; 54
     dee:	ee ad       	ldd	r30, Y+62	; 0x3e
     df0:	ff ad       	ldd	r31, Y+63	; 0x3f
     df2:	e6 97       	sbiw	r28, 0x36	; 54
     df4:	00 80       	ld	r0, Z
     df6:	e6 96       	adiw	r28, 0x36	; 54
     df8:	8e ad       	ldd	r24, Y+62	; 0x3e
     dfa:	9f ad       	ldd	r25, Y+63	; 0x3f
     dfc:	e6 97       	sbiw	r28, 0x36	; 54
     dfe:	01 96       	adiw	r24, 0x01	; 1
     e00:	e6 96       	adiw	r28, 0x36	; 54
     e02:	9f af       	std	Y+63, r25	; 0x3f
     e04:	8e af       	std	Y+62, r24	; 0x3e
     e06:	e6 97       	sbiw	r28, 0x36	; 54
     e08:	e4 96       	adiw	r28, 0x34	; 52
     e0a:	ee ad       	ldd	r30, Y+62	; 0x3e
     e0c:	ff ad       	ldd	r31, Y+63	; 0x3f
     e0e:	e4 97       	sbiw	r28, 0x34	; 52
     e10:	00 82       	st	Z, r0
     e12:	e4 96       	adiw	r28, 0x34	; 52
     e14:	8e ad       	ldd	r24, Y+62	; 0x3e
     e16:	9f ad       	ldd	r25, Y+63	; 0x3f
     e18:	e4 97       	sbiw	r28, 0x34	; 52
     e1a:	01 96       	adiw	r24, 0x01	; 1
     e1c:	e4 96       	adiw	r28, 0x34	; 52
     e1e:	9f af       	std	Y+63, r25	; 0x3f
     e20:	8e af       	std	Y+62, r24	; 0x3e
     e22:	e4 97       	sbiw	r28, 0x34	; 52
     e24:	e7 96       	adiw	r28, 0x37	; 55
     e26:	9f ad       	ldd	r25, Y+63	; 0x3f
     e28:	e7 97       	sbiw	r28, 0x37	; 55
     e2a:	91 50       	subi	r25, 0x01	; 1
     e2c:	e7 96       	adiw	r28, 0x37	; 55
     e2e:	9f af       	std	Y+63, r25	; 0x3f
     e30:	e7 97       	sbiw	r28, 0x37	; 55
     e32:	e7 96       	adiw	r28, 0x37	; 55
     e34:	ef ad       	ldd	r30, Y+63	; 0x3f
     e36:	e7 97       	sbiw	r28, 0x37	; 55
     e38:	ee 23       	and	r30, r30
     e3a:	c1 f6       	brne	.-80     	; 0xdec <main+0x5c>

	UART_config uart = {BIT_8, DISABLE, STOP_BIT_1};
     e3c:	ce 01       	movw	r24, r28
     e3e:	81 59       	subi	r24, 0x91	; 145
     e40:	9f 4f       	sbci	r25, 0xFF	; 255
     e42:	e9 96       	adiw	r28, 0x39	; 57
     e44:	9f af       	std	Y+63, r25	; 0x3f
     e46:	8e af       	std	Y+62, r24	; 0x3e
     e48:	e9 97       	sbiw	r28, 0x39	; 57
     e4a:	8c e6       	ldi	r24, 0x6C	; 108
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	eb 96       	adiw	r28, 0x3b	; 59
     e50:	9f af       	std	Y+63, r25	; 0x3f
     e52:	8e af       	std	Y+62, r24	; 0x3e
     e54:	eb 97       	sbiw	r28, 0x3b	; 59
     e56:	93 e0       	ldi	r25, 0x03	; 3
     e58:	ec 96       	adiw	r28, 0x3c	; 60
     e5a:	9f af       	std	Y+63, r25	; 0x3f
     e5c:	ec 97       	sbiw	r28, 0x3c	; 60
     e5e:	eb 96       	adiw	r28, 0x3b	; 59
     e60:	ee ad       	ldd	r30, Y+62	; 0x3e
     e62:	ff ad       	ldd	r31, Y+63	; 0x3f
     e64:	eb 97       	sbiw	r28, 0x3b	; 59
     e66:	00 80       	ld	r0, Z
     e68:	eb 96       	adiw	r28, 0x3b	; 59
     e6a:	8e ad       	ldd	r24, Y+62	; 0x3e
     e6c:	9f ad       	ldd	r25, Y+63	; 0x3f
     e6e:	eb 97       	sbiw	r28, 0x3b	; 59
     e70:	01 96       	adiw	r24, 0x01	; 1
     e72:	eb 96       	adiw	r28, 0x3b	; 59
     e74:	9f af       	std	Y+63, r25	; 0x3f
     e76:	8e af       	std	Y+62, r24	; 0x3e
     e78:	eb 97       	sbiw	r28, 0x3b	; 59
     e7a:	e9 96       	adiw	r28, 0x39	; 57
     e7c:	ee ad       	ldd	r30, Y+62	; 0x3e
     e7e:	ff ad       	ldd	r31, Y+63	; 0x3f
     e80:	e9 97       	sbiw	r28, 0x39	; 57
     e82:	00 82       	st	Z, r0
     e84:	e9 96       	adiw	r28, 0x39	; 57
     e86:	8e ad       	ldd	r24, Y+62	; 0x3e
     e88:	9f ad       	ldd	r25, Y+63	; 0x3f
     e8a:	e9 97       	sbiw	r28, 0x39	; 57
     e8c:	01 96       	adiw	r24, 0x01	; 1
     e8e:	e9 96       	adiw	r28, 0x39	; 57
     e90:	9f af       	std	Y+63, r25	; 0x3f
     e92:	8e af       	std	Y+62, r24	; 0x3e
     e94:	e9 97       	sbiw	r28, 0x39	; 57
     e96:	ec 96       	adiw	r28, 0x3c	; 60
     e98:	9f ad       	ldd	r25, Y+63	; 0x3f
     e9a:	ec 97       	sbiw	r28, 0x3c	; 60
     e9c:	91 50       	subi	r25, 0x01	; 1
     e9e:	ec 96       	adiw	r28, 0x3c	; 60
     ea0:	9f af       	std	Y+63, r25	; 0x3f
     ea2:	ec 97       	sbiw	r28, 0x3c	; 60
     ea4:	ec 96       	adiw	r28, 0x3c	; 60
     ea6:	ef ad       	ldd	r30, Y+63	; 0x3f
     ea8:	ec 97       	sbiw	r28, 0x3c	; 60
     eaa:	ee 23       	and	r30, r30
     eac:	c1 f6       	brne	.-80     	; 0xe5e <main+0xce>
	UART_init(&uart);
     eae:	ce 01       	movw	r24, r28
     eb0:	81 59       	subi	r24, 0x91	; 145
     eb2:	9f 4f       	sbci	r25, 0xFF	; 255
     eb4:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <UART_init>
	SREG |= (1<<7);
     eb8:	af e5       	ldi	r26, 0x5F	; 95
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	ef e5       	ldi	r30, 0x5F	; 95
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	80 68       	ori	r24, 0x80	; 128
     ec4:	8c 93       	st	X, r24

	EEPROM_init();
     ec6:	0e 94 1c 06 	call	0xc38	; 0xc38 <EEPROM_init>

	BUZZER_DIRECTION_PORT = SET_BIT(BUZZER_DIRECTION_PORT, BUZZER_PIN);
     eca:	2a e3       	ldi	r18, 0x3A	; 58
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	aa e3       	ldi	r26, 0x3A	; 58
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	ea e3       	ldi	r30, 0x3A	; 58
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	81 60       	ori	r24, 0x01	; 1
     eda:	8c 93       	st	X, r24
     edc:	8c 91       	ld	r24, X
     ede:	f9 01       	movw	r30, r18
     ee0:	80 83       	st	Z, r24
	BUZZER_DATA_PORT = CLEAR_BIT(BUZZER_DATA_PORT, BUZZER_PIN);
     ee2:	2b e3       	ldi	r18, 0x3B	; 59
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	ab e3       	ldi	r26, 0x3B	; 59
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	eb e3       	ldi	r30, 0x3B	; 59
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	8e 7f       	andi	r24, 0xFE	; 254
     ef2:	8c 93       	st	X, r24
     ef4:	8c 91       	ld	r24, X
     ef6:	f9 01       	movw	r30, r18
     ef8:	80 83       	st	Z, r24

	MOTOR_DIRECTION_PORT = SET_BIT(MOTOR_DIRECTION_PORT,MOTOR_PIN_IN1 );
     efa:	2a e3       	ldi	r18, 0x3A	; 58
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	aa e3       	ldi	r26, 0x3A	; 58
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	ea e3       	ldi	r30, 0x3A	; 58
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	88 60       	ori	r24, 0x08	; 8
     f0a:	8c 93       	st	X, r24
     f0c:	8c 91       	ld	r24, X
     f0e:	f9 01       	movw	r30, r18
     f10:	80 83       	st	Z, r24
	MOTOR_DIRECTION_PORT = SET_BIT(MOTOR_DIRECTION_PORT,MOTOR_PIN_IN2 );
     f12:	2a e3       	ldi	r18, 0x3A	; 58
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	aa e3       	ldi	r26, 0x3A	; 58
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	ea e3       	ldi	r30, 0x3A	; 58
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	80 61       	ori	r24, 0x10	; 16
     f22:	8c 93       	st	X, r24
     f24:	8c 91       	ld	r24, X
     f26:	f9 01       	movw	r30, r18
     f28:	80 83       	st	Z, r24

	MOTOR_DATA_PORT = CLEAR_BIT( MOTOR_DATA_PORT, MOTOR_PIN_IN2);
     f2a:	2b e3       	ldi	r18, 0x3B	; 59
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	ab e3       	ldi	r26, 0x3B	; 59
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	eb e3       	ldi	r30, 0x3B	; 59
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	8f 7e       	andi	r24, 0xEF	; 239
     f3a:	8c 93       	st	X, r24
     f3c:	8c 91       	ld	r24, X
     f3e:	f9 01       	movw	r30, r18
     f40:	80 83       	st	Z, r24
	MOTOR_DATA_PORT = CLEAR_BIT( MOTOR_DATA_PORT, MOTOR_PIN_IN1);
     f42:	2b e3       	ldi	r18, 0x3B	; 59
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	ab e3       	ldi	r26, 0x3B	; 59
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	eb e3       	ldi	r30, 0x3B	; 59
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	87 7f       	andi	r24, 0xF7	; 247
     f52:	8c 93       	st	X, r24
     f54:	8c 91       	ld	r24, X
     f56:	f9 01       	movw	r30, r18
     f58:	80 83       	st	Z, r24

	EEPROM_readByte(FIRST_ADDRESS_TO_STORE_PASSWORD, &systemStarting);
     f5a:	9e 01       	movw	r18, r28
     f5c:	26 5a       	subi	r18, 0xA6	; 166
     f5e:	3f 4f       	sbci	r19, 0xFF	; 255
     f60:	82 e1       	ldi	r24, 0x12	; 18
     f62:	93 e0       	ldi	r25, 0x03	; 3
     f64:	b9 01       	movw	r22, r18
     f66:	0e 94 68 06 	call	0xcd0	; 0xcd0 <EEPROM_readByte>

	/* For the first Login */
	if(systemStarting == 0XFF)
     f6a:	fe 01       	movw	r30, r28
     f6c:	e6 5a       	subi	r30, 0xA6	; 166
     f6e:	ff 4f       	sbci	r31, 0xFF	; 255
     f70:	80 81       	ld	r24, Z
     f72:	8f 3f       	cpi	r24, 0xFF	; 255
     f74:	09 f0       	breq	.+2      	; 0xf78 <main+0x1e8>
     f76:	fd c0       	rjmp	.+506    	; 0x1172 <main+0x3e2>
	{
		while(UART_recieveByte() != ECU_READY){}
     f78:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <UART_recieveByte>
     f7c:	80 31       	cpi	r24, 0x10	; 16
     f7e:	e1 f7       	brne	.-8      	; 0xf78 <main+0x1e8>
		UART_sendByte(FIRST_TIME_TO_LOG_IN);
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <UART_sendByte>
		for(counter = INITIAL_VALUE; counter< PASSWORD_WIDTH; counter++)
     f86:	fe 01       	movw	r30, r28
     f88:	e7 5a       	subi	r30, 0xA7	; 167
     f8a:	ff 4f       	sbci	r31, 0xFF	; 255
     f8c:	10 82       	st	Z, r1
     f8e:	e9 c0       	rjmp	.+466    	; 0x1162 <main+0x3d2>
		{
			UART_sendByte(ECU_READY);
     f90:	80 e1       	ldi	r24, 0x10	; 16
     f92:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <UART_sendByte>
			password_Stored[counter]= UART_recieveByte();
     f96:	fe 01       	movw	r30, r28
     f98:	e7 5a       	subi	r30, 0xA7	; 167
     f9a:	ff 4f       	sbci	r31, 0xFF	; 255
     f9c:	80 81       	ld	r24, Z
     f9e:	08 2f       	mov	r16, r24
     fa0:	10 e0       	ldi	r17, 0x00	; 0
     fa2:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <UART_recieveByte>
     fa6:	28 2f       	mov	r18, r24
     fa8:	ce 01       	movw	r24, r28
     faa:	85 5a       	subi	r24, 0xA5	; 165
     fac:	9f 4f       	sbci	r25, 0xFF	; 255
     fae:	fc 01       	movw	r30, r24
     fb0:	e0 0f       	add	r30, r16
     fb2:	f1 1f       	adc	r31, r17
     fb4:	20 83       	st	Z, r18
			EEPROM_writeByte( (FIRST_ADDRESS_TO_STORE_PASSWORD | counter) , password_Stored[counter]);
     fb6:	fe 01       	movw	r30, r28
     fb8:	e7 5a       	subi	r30, 0xA7	; 167
     fba:	ff 4f       	sbci	r31, 0xFF	; 255
     fbc:	80 81       	ld	r24, Z
     fbe:	88 2f       	mov	r24, r24
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	82 61       	ori	r24, 0x12	; 18
     fc4:	93 60       	ori	r25, 0x03	; 3
     fc6:	ac 01       	movw	r20, r24
     fc8:	fe 01       	movw	r30, r28
     fca:	e7 5a       	subi	r30, 0xA7	; 167
     fcc:	ff 4f       	sbci	r31, 0xFF	; 255
     fce:	80 81       	ld	r24, Z
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	ce 01       	movw	r24, r28
     fd6:	85 5a       	subi	r24, 0xA5	; 165
     fd8:	9f 4f       	sbci	r25, 0xFF	; 255
     fda:	fc 01       	movw	r30, r24
     fdc:	e2 0f       	add	r30, r18
     fde:	f3 1f       	adc	r31, r19
     fe0:	20 81       	ld	r18, Z
     fe2:	ca 01       	movw	r24, r20
     fe4:	62 2f       	mov	r22, r18
     fe6:	0e 94 27 06 	call	0xc4e	; 0xc4e <EEPROM_writeByte>
     fea:	fe 01       	movw	r30, r28
     fec:	ef 5a       	subi	r30, 0xAF	; 175
     fee:	ff 4f       	sbci	r31, 0xFF	; 255
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	a0 ea       	ldi	r26, 0xA0	; 160
     ff6:	b2 e4       	ldi	r27, 0x42	; 66
     ff8:	80 83       	st	Z, r24
     ffa:	91 83       	std	Z+1, r25	; 0x01
     ffc:	a2 83       	std	Z+2, r26	; 0x02
     ffe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1000:	8e 01       	movw	r16, r28
    1002:	03 5b       	subi	r16, 0xB3	; 179
    1004:	1f 4f       	sbci	r17, 0xFF	; 255
    1006:	fe 01       	movw	r30, r28
    1008:	ef 5a       	subi	r30, 0xAF	; 175
    100a:	ff 4f       	sbci	r31, 0xFF	; 255
    100c:	60 81       	ld	r22, Z
    100e:	71 81       	ldd	r23, Z+1	; 0x01
    1010:	82 81       	ldd	r24, Z+2	; 0x02
    1012:	93 81       	ldd	r25, Z+3	; 0x03
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	4a ef       	ldi	r20, 0xFA	; 250
    101a:	54 e4       	ldi	r21, 0x44	; 68
    101c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	f8 01       	movw	r30, r16
    1026:	80 83       	st	Z, r24
    1028:	91 83       	std	Z+1, r25	; 0x01
    102a:	a2 83       	std	Z+2, r26	; 0x02
    102c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    102e:	fe 01       	movw	r30, r28
    1030:	e3 5b       	subi	r30, 0xB3	; 179
    1032:	ff 4f       	sbci	r31, 0xFF	; 255
    1034:	60 81       	ld	r22, Z
    1036:	71 81       	ldd	r23, Z+1	; 0x01
    1038:	82 81       	ldd	r24, Z+2	; 0x02
    103a:	93 81       	ldd	r25, Z+3	; 0x03
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e8       	ldi	r20, 0x80	; 128
    1042:	5f e3       	ldi	r21, 0x3F	; 63
    1044:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1048:	88 23       	and	r24, r24
    104a:	44 f4       	brge	.+16     	; 0x105c <main+0x2cc>
		__ticks = 1;
    104c:	fe 01       	movw	r30, r28
    104e:	e5 5b       	subi	r30, 0xB5	; 181
    1050:	ff 4f       	sbci	r31, 0xFF	; 255
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	91 83       	std	Z+1, r25	; 0x01
    1058:	80 83       	st	Z, r24
    105a:	64 c0       	rjmp	.+200    	; 0x1124 <main+0x394>
	else if (__tmp > 65535)
    105c:	fe 01       	movw	r30, r28
    105e:	e3 5b       	subi	r30, 0xB3	; 179
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	60 81       	ld	r22, Z
    1064:	71 81       	ldd	r23, Z+1	; 0x01
    1066:	82 81       	ldd	r24, Z+2	; 0x02
    1068:	93 81       	ldd	r25, Z+3	; 0x03
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	3f ef       	ldi	r19, 0xFF	; 255
    106e:	4f e7       	ldi	r20, 0x7F	; 127
    1070:	57 e4       	ldi	r21, 0x47	; 71
    1072:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1076:	18 16       	cp	r1, r24
    1078:	0c f0       	brlt	.+2      	; 0x107c <main+0x2ec>
    107a:	43 c0       	rjmp	.+134    	; 0x1102 <main+0x372>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    107c:	fe 01       	movw	r30, r28
    107e:	ef 5a       	subi	r30, 0xAF	; 175
    1080:	ff 4f       	sbci	r31, 0xFF	; 255
    1082:	60 81       	ld	r22, Z
    1084:	71 81       	ldd	r23, Z+1	; 0x01
    1086:	82 81       	ldd	r24, Z+2	; 0x02
    1088:	93 81       	ldd	r25, Z+3	; 0x03
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	40 e2       	ldi	r20, 0x20	; 32
    1090:	51 e4       	ldi	r21, 0x41	; 65
    1092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	8e 01       	movw	r16, r28
    109c:	05 5b       	subi	r16, 0xB5	; 181
    109e:	1f 4f       	sbci	r17, 0xFF	; 255
    10a0:	bc 01       	movw	r22, r24
    10a2:	cd 01       	movw	r24, r26
    10a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	f8 01       	movw	r30, r16
    10ae:	91 83       	std	Z+1, r25	; 0x01
    10b0:	80 83       	st	Z, r24
    10b2:	1f c0       	rjmp	.+62     	; 0x10f2 <main+0x362>
    10b4:	fe 01       	movw	r30, r28
    10b6:	e7 5b       	subi	r30, 0xB7	; 183
    10b8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ba:	88 ec       	ldi	r24, 0xC8	; 200
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	91 83       	std	Z+1, r25	; 0x01
    10c0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10c2:	fe 01       	movw	r30, r28
    10c4:	e7 5b       	subi	r30, 0xB7	; 183
    10c6:	ff 4f       	sbci	r31, 0xFF	; 255
    10c8:	80 81       	ld	r24, Z
    10ca:	91 81       	ldd	r25, Z+1	; 0x01
    10cc:	01 97       	sbiw	r24, 0x01	; 1
    10ce:	f1 f7       	brne	.-4      	; 0x10cc <main+0x33c>
    10d0:	fe 01       	movw	r30, r28
    10d2:	e7 5b       	subi	r30, 0xB7	; 183
    10d4:	ff 4f       	sbci	r31, 0xFF	; 255
    10d6:	91 83       	std	Z+1, r25	; 0x01
    10d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10da:	de 01       	movw	r26, r28
    10dc:	a5 5b       	subi	r26, 0xB5	; 181
    10de:	bf 4f       	sbci	r27, 0xFF	; 255
    10e0:	fe 01       	movw	r30, r28
    10e2:	e5 5b       	subi	r30, 0xB5	; 181
    10e4:	ff 4f       	sbci	r31, 0xFF	; 255
    10e6:	80 81       	ld	r24, Z
    10e8:	91 81       	ldd	r25, Z+1	; 0x01
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	11 96       	adiw	r26, 0x01	; 1
    10ee:	9c 93       	st	X, r25
    10f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f2:	fe 01       	movw	r30, r28
    10f4:	e5 5b       	subi	r30, 0xB5	; 181
    10f6:	ff 4f       	sbci	r31, 0xFF	; 255
    10f8:	80 81       	ld	r24, Z
    10fa:	91 81       	ldd	r25, Z+1	; 0x01
    10fc:	00 97       	sbiw	r24, 0x00	; 0
    10fe:	d1 f6       	brne	.-76     	; 0x10b4 <main+0x324>
    1100:	27 c0       	rjmp	.+78     	; 0x1150 <main+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1102:	8e 01       	movw	r16, r28
    1104:	05 5b       	subi	r16, 0xB5	; 181
    1106:	1f 4f       	sbci	r17, 0xFF	; 255
    1108:	fe 01       	movw	r30, r28
    110a:	e3 5b       	subi	r30, 0xB3	; 179
    110c:	ff 4f       	sbci	r31, 0xFF	; 255
    110e:	60 81       	ld	r22, Z
    1110:	71 81       	ldd	r23, Z+1	; 0x01
    1112:	82 81       	ldd	r24, Z+2	; 0x02
    1114:	93 81       	ldd	r25, Z+3	; 0x03
    1116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	f8 01       	movw	r30, r16
    1120:	91 83       	std	Z+1, r25	; 0x01
    1122:	80 83       	st	Z, r24
    1124:	de 01       	movw	r26, r28
    1126:	a9 5b       	subi	r26, 0xB9	; 185
    1128:	bf 4f       	sbci	r27, 0xFF	; 255
    112a:	fe 01       	movw	r30, r28
    112c:	e5 5b       	subi	r30, 0xB5	; 181
    112e:	ff 4f       	sbci	r31, 0xFF	; 255
    1130:	80 81       	ld	r24, Z
    1132:	91 81       	ldd	r25, Z+1	; 0x01
    1134:	8d 93       	st	X+, r24
    1136:	9c 93       	st	X, r25
    1138:	fe 01       	movw	r30, r28
    113a:	e9 5b       	subi	r30, 0xB9	; 185
    113c:	ff 4f       	sbci	r31, 0xFF	; 255
    113e:	80 81       	ld	r24, Z
    1140:	91 81       	ldd	r25, Z+1	; 0x01
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	f1 f7       	brne	.-4      	; 0x1142 <main+0x3b2>
    1146:	fe 01       	movw	r30, r28
    1148:	e9 5b       	subi	r30, 0xB9	; 185
    114a:	ff 4f       	sbci	r31, 0xFF	; 255
    114c:	91 83       	std	Z+1, r25	; 0x01
    114e:	80 83       	st	Z, r24
	/* For the first Login */
	if(systemStarting == 0XFF)
	{
		while(UART_recieveByte() != ECU_READY){}
		UART_sendByte(FIRST_TIME_TO_LOG_IN);
		for(counter = INITIAL_VALUE; counter< PASSWORD_WIDTH; counter++)
    1150:	de 01       	movw	r26, r28
    1152:	a7 5a       	subi	r26, 0xA7	; 167
    1154:	bf 4f       	sbci	r27, 0xFF	; 255
    1156:	fe 01       	movw	r30, r28
    1158:	e7 5a       	subi	r30, 0xA7	; 167
    115a:	ff 4f       	sbci	r31, 0xFF	; 255
    115c:	80 81       	ld	r24, Z
    115e:	8f 5f       	subi	r24, 0xFF	; 255
    1160:	8c 93       	st	X, r24
    1162:	fe 01       	movw	r30, r28
    1164:	e7 5a       	subi	r30, 0xA7	; 167
    1166:	ff 4f       	sbci	r31, 0xFF	; 255
    1168:	80 81       	ld	r24, Z
    116a:	84 30       	cpi	r24, 0x04	; 4
    116c:	08 f4       	brcc	.+2      	; 0x1170 <main+0x3e0>
    116e:	10 cf       	rjmp	.-480    	; 0xf90 <main+0x200>
    1170:	07 c0       	rjmp	.+14     	; 0x1180 <main+0x3f0>
			_delay_ms(80);
		}
	}
	else
	{
		while(UART_recieveByte() != ECU_READY){}
    1172:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <UART_recieveByte>
    1176:	80 31       	cpi	r24, 0x10	; 16
    1178:	e1 f7       	brne	.-8      	; 0x1172 <main+0x3e2>
		UART_sendByte(ANY_TIME_TO_LOG_IN);
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <UART_sendByte>
	}

	/* For All Other Logins */
	while(1)
	{
		UART_sendByte(ECU_READY);
    1180:	80 e1       	ldi	r24, 0x10	; 16
    1182:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <UART_sendByte>
		decision = UART_recieveByte();
    1186:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <UART_recieveByte>
    118a:	fe 01       	movw	r30, r28
    118c:	e9 5a       	subi	r30, 0xA9	; 169
    118e:	ff 4f       	sbci	r31, 0xFF	; 255
    1190:	80 83       	st	Z, r24

		if(decision == CHOICE_1)
    1192:	fe 01       	movw	r30, r28
    1194:	e9 5a       	subi	r30, 0xA9	; 169
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	80 81       	ld	r24, Z
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	09 f0       	breq	.+2      	; 0x11a0 <main+0x410>
    119e:	6c c2       	rjmp	.+1240   	; 0x1678 <main+0x8e8>
		{
			do
			{
				for(counter = INITIAL_VALUE; counter< PASSWORD_WIDTH; counter++)
    11a0:	fe 01       	movw	r30, r28
    11a2:	e7 5a       	subi	r30, 0xA7	; 167
    11a4:	ff 4f       	sbci	r31, 0xFF	; 255
    11a6:	10 82       	st	Z, r1
    11a8:	a1 c0       	rjmp	.+322    	; 0x12ec <main+0x55c>
				{
					UART_sendByte(ECU_READY);
    11aa:	80 e1       	ldi	r24, 0x10	; 16
    11ac:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <UART_sendByte>
					password_compare[counter]= UART_recieveByte();
    11b0:	fe 01       	movw	r30, r28
    11b2:	e7 5a       	subi	r30, 0xA7	; 167
    11b4:	ff 4f       	sbci	r31, 0xFF	; 255
    11b6:	80 81       	ld	r24, Z
    11b8:	08 2f       	mov	r16, r24
    11ba:	10 e0       	ldi	r17, 0x00	; 0
    11bc:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <UART_recieveByte>
    11c0:	28 2f       	mov	r18, r24
    11c2:	ce 01       	movw	r24, r28
    11c4:	81 5a       	subi	r24, 0xA1	; 161
    11c6:	9f 4f       	sbci	r25, 0xFF	; 255
    11c8:	fc 01       	movw	r30, r24
    11ca:	e0 0f       	add	r30, r16
    11cc:	f1 1f       	adc	r31, r17
    11ce:	20 83       	st	Z, r18
    11d0:	fe 01       	movw	r30, r28
    11d2:	ed 5b       	subi	r30, 0xBD	; 189
    11d4:	ff 4f       	sbci	r31, 0xFF	; 255
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	a0 ea       	ldi	r26, 0xA0	; 160
    11dc:	b2 e4       	ldi	r27, 0x42	; 66
    11de:	80 83       	st	Z, r24
    11e0:	91 83       	std	Z+1, r25	; 0x01
    11e2:	a2 83       	std	Z+2, r26	; 0x02
    11e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e6:	8e 01       	movw	r16, r28
    11e8:	01 5c       	subi	r16, 0xC1	; 193
    11ea:	1f 4f       	sbci	r17, 0xFF	; 255
    11ec:	fe 01       	movw	r30, r28
    11ee:	ed 5b       	subi	r30, 0xBD	; 189
    11f0:	ff 4f       	sbci	r31, 0xFF	; 255
    11f2:	60 81       	ld	r22, Z
    11f4:	71 81       	ldd	r23, Z+1	; 0x01
    11f6:	82 81       	ldd	r24, Z+2	; 0x02
    11f8:	93 81       	ldd	r25, Z+3	; 0x03
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	4a ef       	ldi	r20, 0xFA	; 250
    1200:	54 e4       	ldi	r21, 0x44	; 68
    1202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	f8 01       	movw	r30, r16
    120c:	80 83       	st	Z, r24
    120e:	91 83       	std	Z+1, r25	; 0x01
    1210:	a2 83       	std	Z+2, r26	; 0x02
    1212:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1214:	fe 01       	movw	r30, r28
    1216:	ff 96       	adiw	r30, 0x3f	; 63
    1218:	60 81       	ld	r22, Z
    121a:	71 81       	ldd	r23, Z+1	; 0x01
    121c:	82 81       	ldd	r24, Z+2	; 0x02
    121e:	93 81       	ldd	r25, Z+3	; 0x03
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 e8       	ldi	r20, 0x80	; 128
    1226:	5f e3       	ldi	r21, 0x3F	; 63
    1228:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    122c:	88 23       	and	r24, r24
    122e:	2c f4       	brge	.+10     	; 0x123a <main+0x4aa>
		__ticks = 1;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	9e af       	std	Y+62, r25	; 0x3e
    1236:	8d af       	std	Y+61, r24	; 0x3d
    1238:	46 c0       	rjmp	.+140    	; 0x12c6 <main+0x536>
	else if (__tmp > 65535)
    123a:	fe 01       	movw	r30, r28
    123c:	ff 96       	adiw	r30, 0x3f	; 63
    123e:	60 81       	ld	r22, Z
    1240:	71 81       	ldd	r23, Z+1	; 0x01
    1242:	82 81       	ldd	r24, Z+2	; 0x02
    1244:	93 81       	ldd	r25, Z+3	; 0x03
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	3f ef       	ldi	r19, 0xFF	; 255
    124a:	4f e7       	ldi	r20, 0x7F	; 127
    124c:	57 e4       	ldi	r21, 0x47	; 71
    124e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1252:	18 16       	cp	r1, r24
    1254:	64 f5       	brge	.+88     	; 0x12ae <main+0x51e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1256:	fe 01       	movw	r30, r28
    1258:	ed 5b       	subi	r30, 0xBD	; 189
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	60 81       	ld	r22, Z
    125e:	71 81       	ldd	r23, Z+1	; 0x01
    1260:	82 81       	ldd	r24, Z+2	; 0x02
    1262:	93 81       	ldd	r25, Z+3	; 0x03
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	40 e2       	ldi	r20, 0x20	; 32
    126a:	51 e4       	ldi	r21, 0x41	; 65
    126c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	bc 01       	movw	r22, r24
    1276:	cd 01       	movw	r24, r26
    1278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	9e af       	std	Y+62, r25	; 0x3e
    1282:	8d af       	std	Y+61, r24	; 0x3d
    1284:	0f c0       	rjmp	.+30     	; 0x12a4 <main+0x514>
    1286:	88 ec       	ldi	r24, 0xC8	; 200
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	9c af       	std	Y+60, r25	; 0x3c
    128c:	8b af       	std	Y+59, r24	; 0x3b
    128e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1290:	9c ad       	ldd	r25, Y+60	; 0x3c
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	f1 f7       	brne	.-4      	; 0x1292 <main+0x502>
    1296:	9c af       	std	Y+60, r25	; 0x3c
    1298:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    129a:	8d ad       	ldd	r24, Y+61	; 0x3d
    129c:	9e ad       	ldd	r25, Y+62	; 0x3e
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	9e af       	std	Y+62, r25	; 0x3e
    12a2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    12a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    12a8:	00 97       	sbiw	r24, 0x00	; 0
    12aa:	69 f7       	brne	.-38     	; 0x1286 <main+0x4f6>
    12ac:	16 c0       	rjmp	.+44     	; 0x12da <main+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ae:	fe 01       	movw	r30, r28
    12b0:	ff 96       	adiw	r30, 0x3f	; 63
    12b2:	60 81       	ld	r22, Z
    12b4:	71 81       	ldd	r23, Z+1	; 0x01
    12b6:	82 81       	ldd	r24, Z+2	; 0x02
    12b8:	93 81       	ldd	r25, Z+3	; 0x03
    12ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	9e af       	std	Y+62, r25	; 0x3e
    12c4:	8d af       	std	Y+61, r24	; 0x3d
    12c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    12c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    12ca:	9a af       	std	Y+58, r25	; 0x3a
    12cc:	89 af       	std	Y+57, r24	; 0x39
    12ce:	89 ad       	ldd	r24, Y+57	; 0x39
    12d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	f1 f7       	brne	.-4      	; 0x12d2 <main+0x542>
    12d6:	9a af       	std	Y+58, r25	; 0x3a
    12d8:	89 af       	std	Y+57, r24	; 0x39

		if(decision == CHOICE_1)
		{
			do
			{
				for(counter = INITIAL_VALUE; counter< PASSWORD_WIDTH; counter++)
    12da:	de 01       	movw	r26, r28
    12dc:	a7 5a       	subi	r26, 0xA7	; 167
    12de:	bf 4f       	sbci	r27, 0xFF	; 255
    12e0:	fe 01       	movw	r30, r28
    12e2:	e7 5a       	subi	r30, 0xA7	; 167
    12e4:	ff 4f       	sbci	r31, 0xFF	; 255
    12e6:	80 81       	ld	r24, Z
    12e8:	8f 5f       	subi	r24, 0xFF	; 255
    12ea:	8c 93       	st	X, r24
    12ec:	fe 01       	movw	r30, r28
    12ee:	e7 5a       	subi	r30, 0xA7	; 167
    12f0:	ff 4f       	sbci	r31, 0xFF	; 255
    12f2:	80 81       	ld	r24, Z
    12f4:	84 30       	cpi	r24, 0x04	; 4
    12f6:	08 f4       	brcc	.+2      	; 0x12fa <main+0x56a>
    12f8:	58 cf       	rjmp	.-336    	; 0x11aa <main+0x41a>
				{
					UART_sendByte(ECU_READY);
					password_compare[counter]= UART_recieveByte();
					_delay_ms(80);
				}
				for (counter = INITIAL_VALUE; counter < PASSWORD_WIDTH; counter++)
    12fa:	fe 01       	movw	r30, r28
    12fc:	e7 5a       	subi	r30, 0xA7	; 167
    12fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1300:	10 82       	st	Z, r1
    1302:	9a c0       	rjmp	.+308    	; 0x1438 <main+0x6a8>
				{

					EEPROM_readByte( (FIRST_ADDRESS_TO_STORE_PASSWORD | counter) , &compare );
    1304:	fe 01       	movw	r30, r28
    1306:	e7 5a       	subi	r30, 0xA7	; 167
    1308:	ff 4f       	sbci	r31, 0xFF	; 255
    130a:	80 81       	ld	r24, Z
    130c:	88 2f       	mov	r24, r24
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	82 61       	ori	r24, 0x12	; 18
    1312:	93 60       	ori	r25, 0x03	; 3
    1314:	9e 01       	movw	r18, r28
    1316:	2d 59       	subi	r18, 0x9D	; 157
    1318:	3f 4f       	sbci	r19, 0xFF	; 255
    131a:	b9 01       	movw	r22, r18
    131c:	0e 94 68 06 	call	0xcd0	; 0xcd0 <EEPROM_readByte>
					password_Stored[counter]= compare;
    1320:	fe 01       	movw	r30, r28
    1322:	e7 5a       	subi	r30, 0xA7	; 167
    1324:	ff 4f       	sbci	r31, 0xFF	; 255
    1326:	80 81       	ld	r24, Z
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	fe 01       	movw	r30, r28
    132e:	ed 59       	subi	r30, 0x9D	; 157
    1330:	ff 4f       	sbci	r31, 0xFF	; 255
    1332:	40 81       	ld	r20, Z
    1334:	ce 01       	movw	r24, r28
    1336:	85 5a       	subi	r24, 0xA5	; 165
    1338:	9f 4f       	sbci	r25, 0xFF	; 255
    133a:	fc 01       	movw	r30, r24
    133c:	e2 0f       	add	r30, r18
    133e:	f3 1f       	adc	r31, r19
    1340:	40 83       	st	Z, r20
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	a0 ea       	ldi	r26, 0xA0	; 160
    1348:	b2 e4       	ldi	r27, 0x42	; 66
    134a:	8d ab       	std	Y+53, r24	; 0x35
    134c:	9e ab       	std	Y+54, r25	; 0x36
    134e:	af ab       	std	Y+55, r26	; 0x37
    1350:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1352:	6d a9       	ldd	r22, Y+53	; 0x35
    1354:	7e a9       	ldd	r23, Y+54	; 0x36
    1356:	8f a9       	ldd	r24, Y+55	; 0x37
    1358:	98 ad       	ldd	r25, Y+56	; 0x38
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	4a ef       	ldi	r20, 0xFA	; 250
    1360:	54 e4       	ldi	r21, 0x44	; 68
    1362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	89 ab       	std	Y+49, r24	; 0x31
    136c:	9a ab       	std	Y+50, r25	; 0x32
    136e:	ab ab       	std	Y+51, r26	; 0x33
    1370:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1372:	69 a9       	ldd	r22, Y+49	; 0x31
    1374:	7a a9       	ldd	r23, Y+50	; 0x32
    1376:	8b a9       	ldd	r24, Y+51	; 0x33
    1378:	9c a9       	ldd	r25, Y+52	; 0x34
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	40 e8       	ldi	r20, 0x80	; 128
    1380:	5f e3       	ldi	r21, 0x3F	; 63
    1382:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1386:	88 23       	and	r24, r24
    1388:	2c f4       	brge	.+10     	; 0x1394 <main+0x604>
		__ticks = 1;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	98 ab       	std	Y+48, r25	; 0x30
    1390:	8f a7       	std	Y+47, r24	; 0x2f
    1392:	3f c0       	rjmp	.+126    	; 0x1412 <main+0x682>
	else if (__tmp > 65535)
    1394:	69 a9       	ldd	r22, Y+49	; 0x31
    1396:	7a a9       	ldd	r23, Y+50	; 0x32
    1398:	8b a9       	ldd	r24, Y+51	; 0x33
    139a:	9c a9       	ldd	r25, Y+52	; 0x34
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	3f ef       	ldi	r19, 0xFF	; 255
    13a0:	4f e7       	ldi	r20, 0x7F	; 127
    13a2:	57 e4       	ldi	r21, 0x47	; 71
    13a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13a8:	18 16       	cp	r1, r24
    13aa:	4c f5       	brge	.+82     	; 0x13fe <main+0x66e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ac:	6d a9       	ldd	r22, Y+53	; 0x35
    13ae:	7e a9       	ldd	r23, Y+54	; 0x36
    13b0:	8f a9       	ldd	r24, Y+55	; 0x37
    13b2:	98 ad       	ldd	r25, Y+56	; 0x38
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	40 e2       	ldi	r20, 0x20	; 32
    13ba:	51 e4       	ldi	r21, 0x41	; 65
    13bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	bc 01       	movw	r22, r24
    13c6:	cd 01       	movw	r24, r26
    13c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	98 ab       	std	Y+48, r25	; 0x30
    13d2:	8f a7       	std	Y+47, r24	; 0x2f
    13d4:	0f c0       	rjmp	.+30     	; 0x13f4 <main+0x664>
    13d6:	88 ec       	ldi	r24, 0xC8	; 200
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	9e a7       	std	Y+46, r25	; 0x2e
    13dc:	8d a7       	std	Y+45, r24	; 0x2d
    13de:	8d a5       	ldd	r24, Y+45	; 0x2d
    13e0:	9e a5       	ldd	r25, Y+46	; 0x2e
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	f1 f7       	brne	.-4      	; 0x13e2 <main+0x652>
    13e6:	9e a7       	std	Y+46, r25	; 0x2e
    13e8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    13ec:	98 a9       	ldd	r25, Y+48	; 0x30
    13ee:	01 97       	sbiw	r24, 0x01	; 1
    13f0:	98 ab       	std	Y+48, r25	; 0x30
    13f2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    13f6:	98 a9       	ldd	r25, Y+48	; 0x30
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	69 f7       	brne	.-38     	; 0x13d6 <main+0x646>
    13fc:	14 c0       	rjmp	.+40     	; 0x1426 <main+0x696>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1400:	7a a9       	ldd	r23, Y+50	; 0x32
    1402:	8b a9       	ldd	r24, Y+51	; 0x33
    1404:	9c a9       	ldd	r25, Y+52	; 0x34
    1406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	98 ab       	std	Y+48, r25	; 0x30
    1410:	8f a7       	std	Y+47, r24	; 0x2f
    1412:	8f a5       	ldd	r24, Y+47	; 0x2f
    1414:	98 a9       	ldd	r25, Y+48	; 0x30
    1416:	9c a7       	std	Y+44, r25	; 0x2c
    1418:	8b a7       	std	Y+43, r24	; 0x2b
    141a:	8b a5       	ldd	r24, Y+43	; 0x2b
    141c:	9c a5       	ldd	r25, Y+44	; 0x2c
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	f1 f7       	brne	.-4      	; 0x141e <main+0x68e>
    1422:	9c a7       	std	Y+44, r25	; 0x2c
    1424:	8b a7       	std	Y+43, r24	; 0x2b
				{
					UART_sendByte(ECU_READY);
					password_compare[counter]= UART_recieveByte();
					_delay_ms(80);
				}
				for (counter = INITIAL_VALUE; counter < PASSWORD_WIDTH; counter++)
    1426:	de 01       	movw	r26, r28
    1428:	a7 5a       	subi	r26, 0xA7	; 167
    142a:	bf 4f       	sbci	r27, 0xFF	; 255
    142c:	fe 01       	movw	r30, r28
    142e:	e7 5a       	subi	r30, 0xA7	; 167
    1430:	ff 4f       	sbci	r31, 0xFF	; 255
    1432:	80 81       	ld	r24, Z
    1434:	8f 5f       	subi	r24, 0xFF	; 255
    1436:	8c 93       	st	X, r24
    1438:	fe 01       	movw	r30, r28
    143a:	e7 5a       	subi	r30, 0xA7	; 167
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	80 81       	ld	r24, Z
    1440:	84 30       	cpi	r24, 0x04	; 4
    1442:	08 f4       	brcc	.+2      	; 0x1446 <main+0x6b6>
    1444:	5f cf       	rjmp	.-322    	; 0x1304 <main+0x574>

					EEPROM_readByte( (FIRST_ADDRESS_TO_STORE_PASSWORD | counter) , &compare );
					password_Stored[counter]= compare;
					_delay_ms(80);
				}
				pass_match= checkPass(password_Stored, password_compare);
    1446:	ce 01       	movw	r24, r28
    1448:	85 5a       	subi	r24, 0xA5	; 165
    144a:	9f 4f       	sbci	r25, 0xFF	; 255
    144c:	9e 01       	movw	r18, r28
    144e:	21 5a       	subi	r18, 0xA1	; 161
    1450:	3f 4f       	sbci	r19, 0xFF	; 255
    1452:	b9 01       	movw	r22, r18
    1454:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <checkPass>
    1458:	fe 01       	movw	r30, r28
    145a:	e8 5a       	subi	r30, 0xA8	; 168
    145c:	ff 4f       	sbci	r31, 0xFF	; 255
    145e:	80 83       	st	Z, r24
				if(pass_match == MISMATCH)
    1460:	fe 01       	movw	r30, r28
    1462:	e8 5a       	subi	r30, 0xA8	; 168
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	80 81       	ld	r24, Z
    1468:	81 30       	cpi	r24, 0x01	; 1
    146a:	79 f5       	brne	.+94     	; 0x14ca <main+0x73a>
				{
					while(UART_recieveByte() != ECU_READY){}
    146c:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <UART_recieveByte>
    1470:	80 31       	cpi	r24, 0x10	; 16
    1472:	e1 f7       	brne	.-8      	; 0x146c <main+0x6dc>
					UART_sendByte(pass_match);
    1474:	fe 01       	movw	r30, r28
    1476:	e8 5a       	subi	r30, 0xA8	; 168
    1478:	ff 4f       	sbci	r31, 0xFF	; 255
    147a:	80 81       	ld	r24, Z
    147c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <UART_sendByte>
					danger_error++;
    1480:	de 01       	movw	r26, r28
    1482:	aa 5a       	subi	r26, 0xAA	; 170
    1484:	bf 4f       	sbci	r27, 0xFF	; 255
    1486:	fe 01       	movw	r30, r28
    1488:	ea 5a       	subi	r30, 0xAA	; 170
    148a:	ff 4f       	sbci	r31, 0xFF	; 255
    148c:	80 81       	ld	r24, Z
    148e:	8f 5f       	subi	r24, 0xFF	; 255
    1490:	8c 93       	st	X, r24
					if(danger_error == ALLOWED_TRIES_TO_ENTER_PASSWORD)
    1492:	fe 01       	movw	r30, r28
    1494:	ea 5a       	subi	r30, 0xAA	; 170
    1496:	ff 4f       	sbci	r31, 0xFF	; 255
    1498:	80 81       	ld	r24, Z
    149a:	83 30       	cpi	r24, 0x03	; 3
    149c:	b1 f4       	brne	.+44     	; 0x14ca <main+0x73a>
					{
						Timer_setCallBack(Timer_Buzz, Timer1);
    149e:	8e e8       	ldi	r24, 0x8E	; 142
    14a0:	9d e0       	ldi	r25, 0x0D	; 13
    14a2:	61 e0       	ldi	r22, 0x01	; 1
    14a4:	0e 94 a4 10 	call	0x2148	; 0x2148 <Timer_setCallBack>
						Timer_init(&timer);
    14a8:	ce 01       	movw	r24, r28
    14aa:	8c 59       	subi	r24, 0x9C	; 156
    14ac:	9f 4f       	sbci	r25, 0xFF	; 255
    14ae:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <Timer_init>
						while(g_holdSystem != RESUME_SYSTEM){}
    14b2:	80 91 6b 00 	lds	r24, 0x006B
    14b6:	88 23       	and	r24, r24
    14b8:	e1 f7       	brne	.-8      	; 0x14b2 <main+0x722>
						g_holdSystem = HOLD_SYSTEM;
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	80 93 6b 00 	sts	0x006B, r24
						restart_mainProgram = TRUE;
    14c0:	fe 01       	movw	r30, r28
    14c2:	eb 5a       	subi	r30, 0xAB	; 171
    14c4:	ff 4f       	sbci	r31, 0xFF	; 255
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	80 83       	st	Z, r24
					}
				}
			}while( (pass_match== MISMATCH) && restart_mainProgram == FALSE);
    14ca:	fe 01       	movw	r30, r28
    14cc:	e8 5a       	subi	r30, 0xA8	; 168
    14ce:	ff 4f       	sbci	r31, 0xFF	; 255
    14d0:	80 81       	ld	r24, Z
    14d2:	81 30       	cpi	r24, 0x01	; 1
    14d4:	39 f4       	brne	.+14     	; 0x14e4 <main+0x754>
    14d6:	fe 01       	movw	r30, r28
    14d8:	eb 5a       	subi	r30, 0xAB	; 171
    14da:	ff 4f       	sbci	r31, 0xFF	; 255
    14dc:	80 81       	ld	r24, Z
    14de:	88 23       	and	r24, r24
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <main+0x754>
    14e2:	5e ce       	rjmp	.-836    	; 0x11a0 <main+0x410>

			if(pass_match == MATCH)
    14e4:	fe 01       	movw	r30, r28
    14e6:	e8 5a       	subi	r30, 0xA8	; 168
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	80 81       	ld	r24, Z
    14ec:	88 23       	and	r24, r24
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <main+0x762>
    14f0:	be c0       	rjmp	.+380    	; 0x166e <main+0x8de>
			{
				while(UART_recieveByte() != ECU_READY){}
    14f2:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <UART_recieveByte>
    14f6:	80 31       	cpi	r24, 0x10	; 16
    14f8:	e1 f7       	brne	.-8      	; 0x14f2 <main+0x762>
				UART_sendByte(pass_match);
    14fa:	fe 01       	movw	r30, r28
    14fc:	e8 5a       	subi	r30, 0xA8	; 168
    14fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1500:	80 81       	ld	r24, Z
    1502:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <UART_sendByte>
				for(counter = INITIAL_VALUE; counter< PASSWORD_WIDTH; counter++)
    1506:	fe 01       	movw	r30, r28
    1508:	e7 5a       	subi	r30, 0xA7	; 167
    150a:	ff 4f       	sbci	r31, 0xFF	; 255
    150c:	10 82       	st	Z, r1
    150e:	a8 c0       	rjmp	.+336    	; 0x1660 <main+0x8d0>
				{
					UART_sendByte(ECU_READY);
    1510:	80 e1       	ldi	r24, 0x10	; 16
    1512:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <UART_sendByte>
					password_Stored[counter]= UART_recieveByte();
    1516:	fe 01       	movw	r30, r28
    1518:	e7 5a       	subi	r30, 0xA7	; 167
    151a:	ff 4f       	sbci	r31, 0xFF	; 255
    151c:	80 81       	ld	r24, Z
    151e:	08 2f       	mov	r16, r24
    1520:	10 e0       	ldi	r17, 0x00	; 0
    1522:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <UART_recieveByte>
    1526:	28 2f       	mov	r18, r24
    1528:	ce 01       	movw	r24, r28
    152a:	85 5a       	subi	r24, 0xA5	; 165
    152c:	9f 4f       	sbci	r25, 0xFF	; 255
    152e:	fc 01       	movw	r30, r24
    1530:	e0 0f       	add	r30, r16
    1532:	f1 1f       	adc	r31, r17
    1534:	20 83       	st	Z, r18
					EEPROM_writeByte( (FIRST_ADDRESS_TO_STORE_PASSWORD | counter) , password_Stored[counter]);
    1536:	fe 01       	movw	r30, r28
    1538:	e7 5a       	subi	r30, 0xA7	; 167
    153a:	ff 4f       	sbci	r31, 0xFF	; 255
    153c:	80 81       	ld	r24, Z
    153e:	88 2f       	mov	r24, r24
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	82 61       	ori	r24, 0x12	; 18
    1544:	93 60       	ori	r25, 0x03	; 3
    1546:	ac 01       	movw	r20, r24
    1548:	fe 01       	movw	r30, r28
    154a:	e7 5a       	subi	r30, 0xA7	; 167
    154c:	ff 4f       	sbci	r31, 0xFF	; 255
    154e:	80 81       	ld	r24, Z
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	ce 01       	movw	r24, r28
    1556:	85 5a       	subi	r24, 0xA5	; 165
    1558:	9f 4f       	sbci	r25, 0xFF	; 255
    155a:	fc 01       	movw	r30, r24
    155c:	e2 0f       	add	r30, r18
    155e:	f3 1f       	adc	r31, r19
    1560:	20 81       	ld	r18, Z
    1562:	ca 01       	movw	r24, r20
    1564:	62 2f       	mov	r22, r18
    1566:	0e 94 27 06 	call	0xc4e	; 0xc4e <EEPROM_writeByte>
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	a0 ea       	ldi	r26, 0xA0	; 160
    1570:	b2 e4       	ldi	r27, 0x42	; 66
    1572:	8f a3       	std	Y+39, r24	; 0x27
    1574:	98 a7       	std	Y+40, r25	; 0x28
    1576:	a9 a7       	std	Y+41, r26	; 0x29
    1578:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    157a:	6f a1       	ldd	r22, Y+39	; 0x27
    157c:	78 a5       	ldd	r23, Y+40	; 0x28
    157e:	89 a5       	ldd	r24, Y+41	; 0x29
    1580:	9a a5       	ldd	r25, Y+42	; 0x2a
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	4a ef       	ldi	r20, 0xFA	; 250
    1588:	54 e4       	ldi	r21, 0x44	; 68
    158a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	8b a3       	std	Y+35, r24	; 0x23
    1594:	9c a3       	std	Y+36, r25	; 0x24
    1596:	ad a3       	std	Y+37, r26	; 0x25
    1598:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    159a:	6b a1       	ldd	r22, Y+35	; 0x23
    159c:	7c a1       	ldd	r23, Y+36	; 0x24
    159e:	8d a1       	ldd	r24, Y+37	; 0x25
    15a0:	9e a1       	ldd	r25, Y+38	; 0x26
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	40 e8       	ldi	r20, 0x80	; 128
    15a8:	5f e3       	ldi	r21, 0x3F	; 63
    15aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15ae:	88 23       	and	r24, r24
    15b0:	2c f4       	brge	.+10     	; 0x15bc <main+0x82c>
		__ticks = 1;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	9a a3       	std	Y+34, r25	; 0x22
    15b8:	89 a3       	std	Y+33, r24	; 0x21
    15ba:	3f c0       	rjmp	.+126    	; 0x163a <main+0x8aa>
	else if (__tmp > 65535)
    15bc:	6b a1       	ldd	r22, Y+35	; 0x23
    15be:	7c a1       	ldd	r23, Y+36	; 0x24
    15c0:	8d a1       	ldd	r24, Y+37	; 0x25
    15c2:	9e a1       	ldd	r25, Y+38	; 0x26
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	3f ef       	ldi	r19, 0xFF	; 255
    15c8:	4f e7       	ldi	r20, 0x7F	; 127
    15ca:	57 e4       	ldi	r21, 0x47	; 71
    15cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15d0:	18 16       	cp	r1, r24
    15d2:	4c f5       	brge	.+82     	; 0x1626 <main+0x896>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d4:	6f a1       	ldd	r22, Y+39	; 0x27
    15d6:	78 a5       	ldd	r23, Y+40	; 0x28
    15d8:	89 a5       	ldd	r24, Y+41	; 0x29
    15da:	9a a5       	ldd	r25, Y+42	; 0x2a
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	40 e2       	ldi	r20, 0x20	; 32
    15e2:	51 e4       	ldi	r21, 0x41	; 65
    15e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	bc 01       	movw	r22, r24
    15ee:	cd 01       	movw	r24, r26
    15f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f4:	dc 01       	movw	r26, r24
    15f6:	cb 01       	movw	r24, r22
    15f8:	9a a3       	std	Y+34, r25	; 0x22
    15fa:	89 a3       	std	Y+33, r24	; 0x21
    15fc:	0f c0       	rjmp	.+30     	; 0x161c <main+0x88c>
    15fe:	88 ec       	ldi	r24, 0xC8	; 200
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	98 a3       	std	Y+32, r25	; 0x20
    1604:	8f 8f       	std	Y+31, r24	; 0x1f
    1606:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1608:	98 a1       	ldd	r25, Y+32	; 0x20
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	f1 f7       	brne	.-4      	; 0x160a <main+0x87a>
    160e:	98 a3       	std	Y+32, r25	; 0x20
    1610:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1612:	89 a1       	ldd	r24, Y+33	; 0x21
    1614:	9a a1       	ldd	r25, Y+34	; 0x22
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	9a a3       	std	Y+34, r25	; 0x22
    161a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161c:	89 a1       	ldd	r24, Y+33	; 0x21
    161e:	9a a1       	ldd	r25, Y+34	; 0x22
    1620:	00 97       	sbiw	r24, 0x00	; 0
    1622:	69 f7       	brne	.-38     	; 0x15fe <main+0x86e>
    1624:	14 c0       	rjmp	.+40     	; 0x164e <main+0x8be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1626:	6b a1       	ldd	r22, Y+35	; 0x23
    1628:	7c a1       	ldd	r23, Y+36	; 0x24
    162a:	8d a1       	ldd	r24, Y+37	; 0x25
    162c:	9e a1       	ldd	r25, Y+38	; 0x26
    162e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	9a a3       	std	Y+34, r25	; 0x22
    1638:	89 a3       	std	Y+33, r24	; 0x21
    163a:	89 a1       	ldd	r24, Y+33	; 0x21
    163c:	9a a1       	ldd	r25, Y+34	; 0x22
    163e:	9e 8f       	std	Y+30, r25	; 0x1e
    1640:	8d 8f       	std	Y+29, r24	; 0x1d
    1642:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1644:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	f1 f7       	brne	.-4      	; 0x1646 <main+0x8b6>
    164a:	9e 8f       	std	Y+30, r25	; 0x1e
    164c:	8d 8f       	std	Y+29, r24	; 0x1d

			if(pass_match == MATCH)
			{
				while(UART_recieveByte() != ECU_READY){}
				UART_sendByte(pass_match);
				for(counter = INITIAL_VALUE; counter< PASSWORD_WIDTH; counter++)
    164e:	de 01       	movw	r26, r28
    1650:	a7 5a       	subi	r26, 0xA7	; 167
    1652:	bf 4f       	sbci	r27, 0xFF	; 255
    1654:	fe 01       	movw	r30, r28
    1656:	e7 5a       	subi	r30, 0xA7	; 167
    1658:	ff 4f       	sbci	r31, 0xFF	; 255
    165a:	80 81       	ld	r24, Z
    165c:	8f 5f       	subi	r24, 0xFF	; 255
    165e:	8c 93       	st	X, r24
    1660:	fe 01       	movw	r30, r28
    1662:	e7 5a       	subi	r30, 0xA7	; 167
    1664:	ff 4f       	sbci	r31, 0xFF	; 255
    1666:	80 81       	ld	r24, Z
    1668:	84 30       	cpi	r24, 0x04	; 4
    166a:	08 f4       	brcc	.+2      	; 0x166e <main+0x8de>
    166c:	51 cf       	rjmp	.-350    	; 0x1510 <main+0x780>
					password_Stored[counter]= UART_recieveByte();
					EEPROM_writeByte( (FIRST_ADDRESS_TO_STORE_PASSWORD | counter) , password_Stored[counter]);
					_delay_ms(80);
				}
			}
			danger_error = NO_DANGER;
    166e:	fe 01       	movw	r30, r28
    1670:	ea 5a       	subi	r30, 0xAA	; 170
    1672:	ff 4f       	sbci	r31, 0xFF	; 255
    1674:	10 82       	st	Z, r1
    1676:	bb c1       	rjmp	.+886    	; 0x19ee <main+0xc5e>
		}

		else if(decision == CHOICE_2)
    1678:	fe 01       	movw	r30, r28
    167a:	e9 5a       	subi	r30, 0xA9	; 169
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	80 81       	ld	r24, Z
    1680:	82 30       	cpi	r24, 0x02	; 2
    1682:	09 f0       	breq	.+2      	; 0x1686 <main+0x8f6>
    1684:	b4 c1       	rjmp	.+872    	; 0x19ee <main+0xc5e>
		{
			do
			{
				for(counter = INITIAL_VALUE; counter< PASSWORD_WIDTH; counter++)
    1686:	fe 01       	movw	r30, r28
    1688:	e7 5a       	subi	r30, 0xA7	; 167
    168a:	ff 4f       	sbci	r31, 0xFF	; 255
    168c:	10 82       	st	Z, r1
    168e:	8e c0       	rjmp	.+284    	; 0x17ac <main+0xa1c>
				{
					UART_sendByte(ECU_READY);
    1690:	80 e1       	ldi	r24, 0x10	; 16
    1692:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <UART_sendByte>
					password_compare[counter]= UART_recieveByte();
    1696:	fe 01       	movw	r30, r28
    1698:	e7 5a       	subi	r30, 0xA7	; 167
    169a:	ff 4f       	sbci	r31, 0xFF	; 255
    169c:	80 81       	ld	r24, Z
    169e:	08 2f       	mov	r16, r24
    16a0:	10 e0       	ldi	r17, 0x00	; 0
    16a2:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <UART_recieveByte>
    16a6:	28 2f       	mov	r18, r24
    16a8:	ce 01       	movw	r24, r28
    16aa:	81 5a       	subi	r24, 0xA1	; 161
    16ac:	9f 4f       	sbci	r25, 0xFF	; 255
    16ae:	fc 01       	movw	r30, r24
    16b0:	e0 0f       	add	r30, r16
    16b2:	f1 1f       	adc	r31, r17
    16b4:	20 83       	st	Z, r18
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	a0 ea       	ldi	r26, 0xA0	; 160
    16bc:	b2 e4       	ldi	r27, 0x42	; 66
    16be:	89 8f       	std	Y+25, r24	; 0x19
    16c0:	9a 8f       	std	Y+26, r25	; 0x1a
    16c2:	ab 8f       	std	Y+27, r26	; 0x1b
    16c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c6:	69 8d       	ldd	r22, Y+25	; 0x19
    16c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	4a ef       	ldi	r20, 0xFA	; 250
    16d4:	54 e4       	ldi	r21, 0x44	; 68
    16d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	8d 8b       	std	Y+21, r24	; 0x15
    16e0:	9e 8b       	std	Y+22, r25	; 0x16
    16e2:	af 8b       	std	Y+23, r26	; 0x17
    16e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16e6:	6d 89       	ldd	r22, Y+21	; 0x15
    16e8:	7e 89       	ldd	r23, Y+22	; 0x16
    16ea:	8f 89       	ldd	r24, Y+23	; 0x17
    16ec:	98 8d       	ldd	r25, Y+24	; 0x18
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	40 e8       	ldi	r20, 0x80	; 128
    16f4:	5f e3       	ldi	r21, 0x3F	; 63
    16f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16fa:	88 23       	and	r24, r24
    16fc:	2c f4       	brge	.+10     	; 0x1708 <main+0x978>
		__ticks = 1;
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	9c 8b       	std	Y+20, r25	; 0x14
    1704:	8b 8b       	std	Y+19, r24	; 0x13
    1706:	3f c0       	rjmp	.+126    	; 0x1786 <main+0x9f6>
	else if (__tmp > 65535)
    1708:	6d 89       	ldd	r22, Y+21	; 0x15
    170a:	7e 89       	ldd	r23, Y+22	; 0x16
    170c:	8f 89       	ldd	r24, Y+23	; 0x17
    170e:	98 8d       	ldd	r25, Y+24	; 0x18
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	3f ef       	ldi	r19, 0xFF	; 255
    1714:	4f e7       	ldi	r20, 0x7F	; 127
    1716:	57 e4       	ldi	r21, 0x47	; 71
    1718:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    171c:	18 16       	cp	r1, r24
    171e:	4c f5       	brge	.+82     	; 0x1772 <main+0x9e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1720:	69 8d       	ldd	r22, Y+25	; 0x19
    1722:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1724:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1726:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e2       	ldi	r20, 0x20	; 32
    172e:	51 e4       	ldi	r21, 0x41	; 65
    1730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	bc 01       	movw	r22, r24
    173a:	cd 01       	movw	r24, r26
    173c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	9c 8b       	std	Y+20, r25	; 0x14
    1746:	8b 8b       	std	Y+19, r24	; 0x13
    1748:	0f c0       	rjmp	.+30     	; 0x1768 <main+0x9d8>
    174a:	88 ec       	ldi	r24, 0xC8	; 200
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	9a 8b       	std	Y+18, r25	; 0x12
    1750:	89 8b       	std	Y+17, r24	; 0x11
    1752:	89 89       	ldd	r24, Y+17	; 0x11
    1754:	9a 89       	ldd	r25, Y+18	; 0x12
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	f1 f7       	brne	.-4      	; 0x1756 <main+0x9c6>
    175a:	9a 8b       	std	Y+18, r25	; 0x12
    175c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    175e:	8b 89       	ldd	r24, Y+19	; 0x13
    1760:	9c 89       	ldd	r25, Y+20	; 0x14
    1762:	01 97       	sbiw	r24, 0x01	; 1
    1764:	9c 8b       	std	Y+20, r25	; 0x14
    1766:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1768:	8b 89       	ldd	r24, Y+19	; 0x13
    176a:	9c 89       	ldd	r25, Y+20	; 0x14
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	69 f7       	brne	.-38     	; 0x174a <main+0x9ba>
    1770:	14 c0       	rjmp	.+40     	; 0x179a <main+0xa0a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1772:	6d 89       	ldd	r22, Y+21	; 0x15
    1774:	7e 89       	ldd	r23, Y+22	; 0x16
    1776:	8f 89       	ldd	r24, Y+23	; 0x17
    1778:	98 8d       	ldd	r25, Y+24	; 0x18
    177a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    177e:	dc 01       	movw	r26, r24
    1780:	cb 01       	movw	r24, r22
    1782:	9c 8b       	std	Y+20, r25	; 0x14
    1784:	8b 8b       	std	Y+19, r24	; 0x13
    1786:	8b 89       	ldd	r24, Y+19	; 0x13
    1788:	9c 89       	ldd	r25, Y+20	; 0x14
    178a:	98 8b       	std	Y+16, r25	; 0x10
    178c:	8f 87       	std	Y+15, r24	; 0x0f
    178e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1790:	98 89       	ldd	r25, Y+16	; 0x10
    1792:	01 97       	sbiw	r24, 0x01	; 1
    1794:	f1 f7       	brne	.-4      	; 0x1792 <main+0xa02>
    1796:	98 8b       	std	Y+16, r25	; 0x10
    1798:	8f 87       	std	Y+15, r24	; 0x0f

		else if(decision == CHOICE_2)
		{
			do
			{
				for(counter = INITIAL_VALUE; counter< PASSWORD_WIDTH; counter++)
    179a:	de 01       	movw	r26, r28
    179c:	a7 5a       	subi	r26, 0xA7	; 167
    179e:	bf 4f       	sbci	r27, 0xFF	; 255
    17a0:	fe 01       	movw	r30, r28
    17a2:	e7 5a       	subi	r30, 0xA7	; 167
    17a4:	ff 4f       	sbci	r31, 0xFF	; 255
    17a6:	80 81       	ld	r24, Z
    17a8:	8f 5f       	subi	r24, 0xFF	; 255
    17aa:	8c 93       	st	X, r24
    17ac:	fe 01       	movw	r30, r28
    17ae:	e7 5a       	subi	r30, 0xA7	; 167
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	80 81       	ld	r24, Z
    17b4:	84 30       	cpi	r24, 0x04	; 4
    17b6:	08 f4       	brcc	.+2      	; 0x17ba <main+0xa2a>
    17b8:	6b cf       	rjmp	.-298    	; 0x1690 <main+0x900>
					UART_sendByte(ECU_READY);
					password_compare[counter]= UART_recieveByte();
					_delay_ms(80);
				}

				for (counter = INITIAL_VALUE; counter < PASSWORD_WIDTH; counter++)
    17ba:	fe 01       	movw	r30, r28
    17bc:	e7 5a       	subi	r30, 0xA7	; 167
    17be:	ff 4f       	sbci	r31, 0xFF	; 255
    17c0:	10 82       	st	Z, r1
    17c2:	9a c0       	rjmp	.+308    	; 0x18f8 <main+0xb68>
				{
					EEPROM_readByte( (FIRST_ADDRESS_TO_STORE_PASSWORD | counter) , &compare );
    17c4:	fe 01       	movw	r30, r28
    17c6:	e7 5a       	subi	r30, 0xA7	; 167
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	80 81       	ld	r24, Z
    17cc:	88 2f       	mov	r24, r24
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	82 61       	ori	r24, 0x12	; 18
    17d2:	93 60       	ori	r25, 0x03	; 3
    17d4:	9e 01       	movw	r18, r28
    17d6:	2d 59       	subi	r18, 0x9D	; 157
    17d8:	3f 4f       	sbci	r19, 0xFF	; 255
    17da:	b9 01       	movw	r22, r18
    17dc:	0e 94 68 06 	call	0xcd0	; 0xcd0 <EEPROM_readByte>
					password_Stored[counter]= compare;
    17e0:	fe 01       	movw	r30, r28
    17e2:	e7 5a       	subi	r30, 0xA7	; 167
    17e4:	ff 4f       	sbci	r31, 0xFF	; 255
    17e6:	80 81       	ld	r24, Z
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	fe 01       	movw	r30, r28
    17ee:	ed 59       	subi	r30, 0x9D	; 157
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	40 81       	ld	r20, Z
    17f4:	ce 01       	movw	r24, r28
    17f6:	85 5a       	subi	r24, 0xA5	; 165
    17f8:	9f 4f       	sbci	r25, 0xFF	; 255
    17fa:	fc 01       	movw	r30, r24
    17fc:	e2 0f       	add	r30, r18
    17fe:	f3 1f       	adc	r31, r19
    1800:	40 83       	st	Z, r20
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	a0 ea       	ldi	r26, 0xA0	; 160
    1808:	b2 e4       	ldi	r27, 0x42	; 66
    180a:	8b 87       	std	Y+11, r24	; 0x0b
    180c:	9c 87       	std	Y+12, r25	; 0x0c
    180e:	ad 87       	std	Y+13, r26	; 0x0d
    1810:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1812:	6b 85       	ldd	r22, Y+11	; 0x0b
    1814:	7c 85       	ldd	r23, Y+12	; 0x0c
    1816:	8d 85       	ldd	r24, Y+13	; 0x0d
    1818:	9e 85       	ldd	r25, Y+14	; 0x0e
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	4a ef       	ldi	r20, 0xFA	; 250
    1820:	54 e4       	ldi	r21, 0x44	; 68
    1822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	8f 83       	std	Y+7, r24	; 0x07
    182c:	98 87       	std	Y+8, r25	; 0x08
    182e:	a9 87       	std	Y+9, r26	; 0x09
    1830:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1832:	6f 81       	ldd	r22, Y+7	; 0x07
    1834:	78 85       	ldd	r23, Y+8	; 0x08
    1836:	89 85       	ldd	r24, Y+9	; 0x09
    1838:	9a 85       	ldd	r25, Y+10	; 0x0a
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	40 e8       	ldi	r20, 0x80	; 128
    1840:	5f e3       	ldi	r21, 0x3F	; 63
    1842:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1846:	88 23       	and	r24, r24
    1848:	2c f4       	brge	.+10     	; 0x1854 <main+0xac4>
		__ticks = 1;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	9e 83       	std	Y+6, r25	; 0x06
    1850:	8d 83       	std	Y+5, r24	; 0x05
    1852:	3f c0       	rjmp	.+126    	; 0x18d2 <main+0xb42>
	else if (__tmp > 65535)
    1854:	6f 81       	ldd	r22, Y+7	; 0x07
    1856:	78 85       	ldd	r23, Y+8	; 0x08
    1858:	89 85       	ldd	r24, Y+9	; 0x09
    185a:	9a 85       	ldd	r25, Y+10	; 0x0a
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	3f ef       	ldi	r19, 0xFF	; 255
    1860:	4f e7       	ldi	r20, 0x7F	; 127
    1862:	57 e4       	ldi	r21, 0x47	; 71
    1864:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1868:	18 16       	cp	r1, r24
    186a:	4c f5       	brge	.+82     	; 0x18be <main+0xb2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    186c:	6b 85       	ldd	r22, Y+11	; 0x0b
    186e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1870:	8d 85       	ldd	r24, Y+13	; 0x0d
    1872:	9e 85       	ldd	r25, Y+14	; 0x0e
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e2       	ldi	r20, 0x20	; 32
    187a:	51 e4       	ldi	r21, 0x41	; 65
    187c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	bc 01       	movw	r22, r24
    1886:	cd 01       	movw	r24, r26
    1888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	9e 83       	std	Y+6, r25	; 0x06
    1892:	8d 83       	std	Y+5, r24	; 0x05
    1894:	0f c0       	rjmp	.+30     	; 0x18b4 <main+0xb24>
    1896:	88 ec       	ldi	r24, 0xC8	; 200
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	9c 83       	std	Y+4, r25	; 0x04
    189c:	8b 83       	std	Y+3, r24	; 0x03
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	9c 81       	ldd	r25, Y+4	; 0x04
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <main+0xb12>
    18a6:	9c 83       	std	Y+4, r25	; 0x04
    18a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18aa:	8d 81       	ldd	r24, Y+5	; 0x05
    18ac:	9e 81       	ldd	r25, Y+6	; 0x06
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	9e 83       	std	Y+6, r25	; 0x06
    18b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b4:	8d 81       	ldd	r24, Y+5	; 0x05
    18b6:	9e 81       	ldd	r25, Y+6	; 0x06
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	69 f7       	brne	.-38     	; 0x1896 <main+0xb06>
    18bc:	14 c0       	rjmp	.+40     	; 0x18e6 <main+0xb56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18be:	6f 81       	ldd	r22, Y+7	; 0x07
    18c0:	78 85       	ldd	r23, Y+8	; 0x08
    18c2:	89 85       	ldd	r24, Y+9	; 0x09
    18c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	9e 83       	std	Y+6, r25	; 0x06
    18d0:	8d 83       	std	Y+5, r24	; 0x05
    18d2:	8d 81       	ldd	r24, Y+5	; 0x05
    18d4:	9e 81       	ldd	r25, Y+6	; 0x06
    18d6:	9a 83       	std	Y+2, r25	; 0x02
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	89 81       	ldd	r24, Y+1	; 0x01
    18dc:	9a 81       	ldd	r25, Y+2	; 0x02
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	f1 f7       	brne	.-4      	; 0x18de <main+0xb4e>
    18e2:	9a 83       	std	Y+2, r25	; 0x02
    18e4:	89 83       	std	Y+1, r24	; 0x01
					UART_sendByte(ECU_READY);
					password_compare[counter]= UART_recieveByte();
					_delay_ms(80);
				}

				for (counter = INITIAL_VALUE; counter < PASSWORD_WIDTH; counter++)
    18e6:	de 01       	movw	r26, r28
    18e8:	a7 5a       	subi	r26, 0xA7	; 167
    18ea:	bf 4f       	sbci	r27, 0xFF	; 255
    18ec:	fe 01       	movw	r30, r28
    18ee:	e7 5a       	subi	r30, 0xA7	; 167
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	80 81       	ld	r24, Z
    18f4:	8f 5f       	subi	r24, 0xFF	; 255
    18f6:	8c 93       	st	X, r24
    18f8:	fe 01       	movw	r30, r28
    18fa:	e7 5a       	subi	r30, 0xA7	; 167
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	80 81       	ld	r24, Z
    1900:	84 30       	cpi	r24, 0x04	; 4
    1902:	08 f4       	brcc	.+2      	; 0x1906 <main+0xb76>
    1904:	5f cf       	rjmp	.-322    	; 0x17c4 <main+0xa34>
					EEPROM_readByte( (FIRST_ADDRESS_TO_STORE_PASSWORD | counter) , &compare );
					password_Stored[counter]= compare;
					_delay_ms(80);
				}

				pass_match= checkPass(password_Stored, password_compare);
    1906:	ce 01       	movw	r24, r28
    1908:	85 5a       	subi	r24, 0xA5	; 165
    190a:	9f 4f       	sbci	r25, 0xFF	; 255
    190c:	9e 01       	movw	r18, r28
    190e:	21 5a       	subi	r18, 0xA1	; 161
    1910:	3f 4f       	sbci	r19, 0xFF	; 255
    1912:	b9 01       	movw	r22, r18
    1914:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <checkPass>
    1918:	fe 01       	movw	r30, r28
    191a:	e8 5a       	subi	r30, 0xA8	; 168
    191c:	ff 4f       	sbci	r31, 0xFF	; 255
    191e:	80 83       	st	Z, r24

				if(pass_match == MISMATCH)
    1920:	fe 01       	movw	r30, r28
    1922:	e8 5a       	subi	r30, 0xA8	; 168
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	80 81       	ld	r24, Z
    1928:	81 30       	cpi	r24, 0x01	; 1
    192a:	79 f5       	brne	.+94     	; 0x198a <main+0xbfa>
				{
					while(UART_recieveByte() != ECU_READY){}
    192c:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <UART_recieveByte>
    1930:	80 31       	cpi	r24, 0x10	; 16
    1932:	e1 f7       	brne	.-8      	; 0x192c <main+0xb9c>
					UART_sendByte(pass_match);
    1934:	fe 01       	movw	r30, r28
    1936:	e8 5a       	subi	r30, 0xA8	; 168
    1938:	ff 4f       	sbci	r31, 0xFF	; 255
    193a:	80 81       	ld	r24, Z
    193c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <UART_sendByte>
					danger_error++;
    1940:	de 01       	movw	r26, r28
    1942:	aa 5a       	subi	r26, 0xAA	; 170
    1944:	bf 4f       	sbci	r27, 0xFF	; 255
    1946:	fe 01       	movw	r30, r28
    1948:	ea 5a       	subi	r30, 0xAA	; 170
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	80 81       	ld	r24, Z
    194e:	8f 5f       	subi	r24, 0xFF	; 255
    1950:	8c 93       	st	X, r24
					if(danger_error == ALLOWED_TRIES_TO_ENTER_PASSWORD)
    1952:	fe 01       	movw	r30, r28
    1954:	ea 5a       	subi	r30, 0xAA	; 170
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	80 81       	ld	r24, Z
    195a:	83 30       	cpi	r24, 0x03	; 3
    195c:	b1 f4       	brne	.+44     	; 0x198a <main+0xbfa>
					{
						Timer_setCallBack(Timer_Buzz, Timer1);
    195e:	8e e8       	ldi	r24, 0x8E	; 142
    1960:	9d e0       	ldi	r25, 0x0D	; 13
    1962:	61 e0       	ldi	r22, 0x01	; 1
    1964:	0e 94 a4 10 	call	0x2148	; 0x2148 <Timer_setCallBack>
						Timer_init(&timer);
    1968:	ce 01       	movw	r24, r28
    196a:	8c 59       	subi	r24, 0x9C	; 156
    196c:	9f 4f       	sbci	r25, 0xFF	; 255
    196e:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <Timer_init>
						while(g_holdSystem != RESUME_SYSTEM){}
    1972:	80 91 6b 00 	lds	r24, 0x006B
    1976:	88 23       	and	r24, r24
    1978:	e1 f7       	brne	.-8      	; 0x1972 <main+0xbe2>
						g_holdSystem = HOLD_SYSTEM;
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	80 93 6b 00 	sts	0x006B, r24
						restart_mainProgram = TRUE;
    1980:	fe 01       	movw	r30, r28
    1982:	eb 5a       	subi	r30, 0xAB	; 171
    1984:	ff 4f       	sbci	r31, 0xFF	; 255
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	80 83       	st	Z, r24
					}
				}
			}while( (pass_match== MISMATCH) && restart_mainProgram == FALSE);
    198a:	fe 01       	movw	r30, r28
    198c:	e8 5a       	subi	r30, 0xA8	; 168
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	80 81       	ld	r24, Z
    1992:	81 30       	cpi	r24, 0x01	; 1
    1994:	39 f4       	brne	.+14     	; 0x19a4 <main+0xc14>
    1996:	fe 01       	movw	r30, r28
    1998:	eb 5a       	subi	r30, 0xAB	; 171
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	80 81       	ld	r24, Z
    199e:	88 23       	and	r24, r24
    19a0:	09 f4       	brne	.+2      	; 0x19a4 <main+0xc14>
    19a2:	71 ce       	rjmp	.-798    	; 0x1686 <main+0x8f6>

			if(pass_match == MATCH)
    19a4:	fe 01       	movw	r30, r28
    19a6:	e8 5a       	subi	r30, 0xA8	; 168
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	80 81       	ld	r24, Z
    19ac:	88 23       	and	r24, r24
    19ae:	d9 f4       	brne	.+54     	; 0x19e6 <main+0xc56>
			{
				while(UART_recieveByte() != ECU_READY){}
    19b0:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <UART_recieveByte>
    19b4:	80 31       	cpi	r24, 0x10	; 16
    19b6:	e1 f7       	brne	.-8      	; 0x19b0 <main+0xc20>
				UART_sendByte(pass_match);
    19b8:	fe 01       	movw	r30, r28
    19ba:	e8 5a       	subi	r30, 0xA8	; 168
    19bc:	ff 4f       	sbci	r31, 0xFF	; 255
    19be:	80 81       	ld	r24, Z
    19c0:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <UART_sendByte>
				Timer_setCallBack(Timer_CW, Timer1);
    19c4:	80 e7       	ldi	r24, 0x70	; 112
    19c6:	9d e0       	ldi	r25, 0x0D	; 13
    19c8:	61 e0       	ldi	r22, 0x01	; 1
    19ca:	0e 94 a4 10 	call	0x2148	; 0x2148 <Timer_setCallBack>
				Timer_init(&timer);
    19ce:	ce 01       	movw	r24, r28
    19d0:	8c 59       	subi	r24, 0x9C	; 156
    19d2:	9f 4f       	sbci	r25, 0xFF	; 255
    19d4:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <Timer_init>
				while(g_holdSystem != RESUME_SYSTEM){}
    19d8:	80 91 6b 00 	lds	r24, 0x006B
    19dc:	88 23       	and	r24, r24
    19de:	e1 f7       	brne	.-8      	; 0x19d8 <main+0xc48>
				g_holdSystem = HOLD_SYSTEM;
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	80 93 6b 00 	sts	0x006B, r24
			}
			danger_error = NO_DANGER;
    19e6:	fe 01       	movw	r30, r28
    19e8:	ea 5a       	subi	r30, 0xAA	; 170
    19ea:	ff 4f       	sbci	r31, 0xFF	; 255
    19ec:	10 82       	st	Z, r1
		}
		restart_mainProgram = FALSE;
    19ee:	fe 01       	movw	r30, r28
    19f0:	eb 5a       	subi	r30, 0xAB	; 171
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	10 82       	st	Z, r1
    19f6:	c4 cb       	rjmp	.-2168   	; 0x1180 <main+0x3f0>

000019f8 <checkPass>:
/************************************************************************************************
 *                                    Functions Definitions                                     *
 ************************************************************************************************/

uint8 checkPass(uint8* pass1, uint8* pass2)
{
    19f8:	df 93       	push	r29
    19fa:	cf 93       	push	r28
    19fc:	00 d0       	rcall	.+0      	; 0x19fe <checkPass+0x6>
    19fe:	00 d0       	rcall	.+0      	; 0x1a00 <checkPass+0x8>
    1a00:	00 d0       	rcall	.+0      	; 0x1a02 <checkPass+0xa>
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	9c 83       	std	Y+4, r25	; 0x04
    1a08:	8b 83       	std	Y+3, r24	; 0x03
    1a0a:	7e 83       	std	Y+6, r23	; 0x06
    1a0c:	6d 83       	std	Y+5, r22	; 0x05
	uint8 count;
	uint8 mismatch=0;
    1a0e:	19 82       	std	Y+1, r1	; 0x01
	for(count=INITIAL_VALUE; count<PASSWORD_WIDTH; count++)
    1a10:	1a 82       	std	Y+2, r1	; 0x02
    1a12:	1b c0       	rjmp	.+54     	; 0x1a4a <checkPass+0x52>
	{
		if( pass1[count] != pass2[count] )
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1e:	fc 01       	movw	r30, r24
    1a20:	e2 0f       	add	r30, r18
    1a22:	f3 1f       	adc	r31, r19
    1a24:	40 81       	ld	r20, Z
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a30:	fc 01       	movw	r30, r24
    1a32:	e2 0f       	add	r30, r18
    1a34:	f3 1f       	adc	r31, r19
    1a36:	80 81       	ld	r24, Z
    1a38:	48 17       	cp	r20, r24
    1a3a:	21 f0       	breq	.+8      	; 0x1a44 <checkPass+0x4c>
		{
			mismatch = MISMATCH_OCCUR;
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	89 83       	std	Y+1, r24	; 0x01
			count= PASSWORD_WIDTH;
    1a40:	84 e0       	ldi	r24, 0x04	; 4
    1a42:	8a 83       	std	Y+2, r24	; 0x02

uint8 checkPass(uint8* pass1, uint8* pass2)
{
	uint8 count;
	uint8 mismatch=0;
	for(count=INITIAL_VALUE; count<PASSWORD_WIDTH; count++)
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	8f 5f       	subi	r24, 0xFF	; 255
    1a48:	8a 83       	std	Y+2, r24	; 0x02
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	84 30       	cpi	r24, 0x04	; 4
    1a4e:	10 f3       	brcs	.-60     	; 0x1a14 <checkPass+0x1c>
		{
			mismatch = MISMATCH_OCCUR;
			count= PASSWORD_WIDTH;
		}
	}
	return mismatch;
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a52:	26 96       	adiw	r28, 0x06	; 6
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	de bf       	out	0x3e, r29	; 62
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	cd bf       	out	0x3d, r28	; 61
    1a5e:	cf 91       	pop	r28
    1a60:	df 91       	pop	r29
    1a62:	08 95       	ret

00001a64 <Timer_CCW>:
/************************************************************************************************
 *                                 Timer CallBack Functions                                     *
 ************************************************************************************************/

void Timer_CCW(void)
{
    1a64:	df 93       	push	r29
    1a66:	cf 93       	push	r28
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
	g_tickFlag++;
    1a6c:	80 91 7a 00 	lds	r24, 0x007A
    1a70:	8f 5f       	subi	r24, 0xFF	; 255
    1a72:	80 93 7a 00 	sts	0x007A, r24
	if( g_tickFlag < MAXIMUM_SECONDS_ANTI_CLOCKWISE)
    1a76:	80 91 7a 00 	lds	r24, 0x007A
    1a7a:	8f 30       	cpi	r24, 0x0F	; 15
    1a7c:	18 f4       	brcc	.+6      	; 0x1a84 <Timer_CCW+0x20>
	{
		DCMotor_CCW();
    1a7e:	0e 94 de 05 	call	0xbbc	; 0xbbc <DCMotor_CCW>
    1a82:	0d c0       	rjmp	.+26     	; 0x1a9e <Timer_CCW+0x3a>
	}
	else if(g_tickFlag == MAXIMUM_SECONDS_ANTI_CLOCKWISE)
    1a84:	80 91 7a 00 	lds	r24, 0x007A
    1a88:	8f 30       	cpi	r24, 0x0F	; 15
    1a8a:	49 f4       	brne	.+18     	; 0x1a9e <Timer_CCW+0x3a>
	{
		Timer_DeInit(Timer1);
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <Timer_DeInit>
		DCMotor_Stop();
    1a92:	0e 94 fd 05 	call	0xbfa	; 0xbfa <DCMotor_Stop>
		g_tickFlag= 0;
    1a96:	10 92 7a 00 	sts	0x007A, r1
		g_holdSystem = RESUME_SYSTEM;
    1a9a:	10 92 6b 00 	sts	0x006B, r1
	}
}
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	08 95       	ret

00001aa4 <Timer_Stop>:


void Timer_Stop(void)
{
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
	g_tickFlag++;
    1aac:	80 91 7a 00 	lds	r24, 0x007A
    1ab0:	8f 5f       	subi	r24, 0xFF	; 255
    1ab2:	80 93 7a 00 	sts	0x007A, r24
	if( g_tickFlag < MAXIMUM_SECONDS_STOPPING)
    1ab6:	80 91 7a 00 	lds	r24, 0x007A
    1aba:	83 30       	cpi	r24, 0x03	; 3
    1abc:	18 f4       	brcc	.+6      	; 0x1ac4 <Timer_Stop+0x20>
	{
		DCMotor_Stop();
    1abe:	0e 94 fd 05 	call	0xbfa	; 0xbfa <DCMotor_Stop>
    1ac2:	0b c0       	rjmp	.+22     	; 0x1ada <Timer_Stop+0x36>
	}
	else if(g_tickFlag == MAXIMUM_SECONDS_STOPPING)
    1ac4:	80 91 7a 00 	lds	r24, 0x007A
    1ac8:	83 30       	cpi	r24, 0x03	; 3
    1aca:	39 f4       	brne	.+14     	; 0x1ada <Timer_Stop+0x36>
	{
		g_tickFlag=0;
    1acc:	10 92 7a 00 	sts	0x007A, r1
		Timer_setCallBack(Timer_CCW, Timer1);
    1ad0:	82 e3       	ldi	r24, 0x32	; 50
    1ad2:	9d e0       	ldi	r25, 0x0D	; 13
    1ad4:	61 e0       	ldi	r22, 0x01	; 1
    1ad6:	0e 94 a4 10 	call	0x2148	; 0x2148 <Timer_setCallBack>
	}
}
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	08 95       	ret

00001ae0 <Timer_CW>:


void Timer_CW(void)
{
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
	g_tickFlag++;
    1ae8:	80 91 7a 00 	lds	r24, 0x007A
    1aec:	8f 5f       	subi	r24, 0xFF	; 255
    1aee:	80 93 7a 00 	sts	0x007A, r24
	if( g_tickFlag < MAXIMUM_SECONDS_CLOCKWISE)
    1af2:	80 91 7a 00 	lds	r24, 0x007A
    1af6:	8f 30       	cpi	r24, 0x0F	; 15
    1af8:	18 f4       	brcc	.+6      	; 0x1b00 <Timer_CW+0x20>
	{
		DCMotor_CW();
    1afa:	0e 94 bf 05 	call	0xb7e	; 0xb7e <DCMotor_CW>
    1afe:	0b c0       	rjmp	.+22     	; 0x1b16 <Timer_CW+0x36>
	}
	else if(g_tickFlag == MAXIMUM_SECONDS_CLOCKWISE)
    1b00:	80 91 7a 00 	lds	r24, 0x007A
    1b04:	8f 30       	cpi	r24, 0x0F	; 15
    1b06:	39 f4       	brne	.+14     	; 0x1b16 <Timer_CW+0x36>
	{
		g_tickFlag=0;
    1b08:	10 92 7a 00 	sts	0x007A, r1
		Timer_setCallBack(Timer_Stop, Timer1);
    1b0c:	82 e5       	ldi	r24, 0x52	; 82
    1b0e:	9d e0       	ldi	r25, 0x0D	; 13
    1b10:	61 e0       	ldi	r22, 0x01	; 1
    1b12:	0e 94 a4 10 	call	0x2148	; 0x2148 <Timer_setCallBack>
	}
}
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <Timer_Buzz>:


void Timer_Buzz(void)
{
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
	g_tickFlag++;
    1b24:	80 91 7a 00 	lds	r24, 0x007A
    1b28:	8f 5f       	subi	r24, 0xFF	; 255
    1b2a:	80 93 7a 00 	sts	0x007A, r24
	if( g_tickFlag < MAXIMUM_SECONDS_BUZZER)
    1b2e:	80 91 7a 00 	lds	r24, 0x007A
    1b32:	8c 33       	cpi	r24, 0x3C	; 60
    1b34:	18 f4       	brcc	.+6      	; 0x1b3c <Timer_Buzz+0x20>
	{
		Buzzer_On();
    1b36:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_On>
    1b3a:	0d c0       	rjmp	.+26     	; 0x1b56 <Timer_Buzz+0x3a>
	}
	else if(g_tickFlag == MAXIMUM_SECONDS_BUZZER )
    1b3c:	80 91 7a 00 	lds	r24, 0x007A
    1b40:	8c 33       	cpi	r24, 0x3C	; 60
    1b42:	49 f4       	brne	.+18     	; 0x1b56 <Timer_Buzz+0x3a>
	{
		Buzzer_Off();
    1b44:	0e 94 b1 05 	call	0xb62	; 0xb62 <Buzzer_Off>
		Timer_DeInit(Timer1);
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	0e 94 fd 10 	call	0x21fa	; 0x21fa <Timer_DeInit>
		g_tickFlag=0;
    1b4e:	10 92 7a 00 	sts	0x007A, r1
		g_holdSystem= RESUME_SYSTEM;
    1b52:	10 92 6b 00 	sts	0x006B, r1
	}
}
    1b56:	cf 91       	pop	r28
    1b58:	df 91       	pop	r29
    1b5a:	08 95       	ret

00001b5c <TWI_init>:

#include "TWI_Driver.h"


void TWI_init(const TWI_ConfigType * Config_ptr)
{
    1b5c:	df 93       	push	r29
    1b5e:	cf 93       	push	r28
    1b60:	00 d0       	rcall	.+0      	; 0x1b62 <TWI_init+0x6>
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    1b66:	9a 83       	std	Y+2, r25	; 0x02
    1b68:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */

    TWBR = Config_ptr->rateRegister;
    1b6a:	a0 e2       	ldi	r26, 0x20	; 32
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b70:	fa 81       	ldd	r31, Y+2	; 0x02
    1b72:	80 81       	ld	r24, Z
    1b74:	8c 93       	st	X, r24

	TWSR = ( TWSR & (0XFC) ) | (Config_ptr->prescaler);
    1b76:	a1 e2       	ldi	r26, 0x21	; 33
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e1 e2       	ldi	r30, 0x21	; 33
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	98 2f       	mov	r25, r24
    1b82:	9c 7f       	andi	r25, 0xFC	; 252
    1b84:	e9 81       	ldd	r30, Y+1	; 0x01
    1b86:	fa 81       	ldd	r31, Y+2	; 0x02
    1b88:	82 81       	ldd	r24, Z+2	; 0x02
    1b8a:	89 2b       	or	r24, r25
    1b8c:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
	/*shift left to use as address is 7 bit only*/
    TWAR =  ( (Config_ptr->address)<< 1 );  //0b00000010; // my address = 0x01 :)
    1b8e:	a2 e2       	ldi	r26, 0x22	; 34
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	e9 81       	ldd	r30, Y+1	; 0x01
    1b94:	fa 81       	ldd	r31, Y+2	; 0x02
    1b96:	81 81       	ldd	r24, Z+1	; 0x01
    1b98:	88 0f       	add	r24, r24
    1b9a:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1b9c:	e6 e5       	ldi	r30, 0x56	; 86
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	84 e0       	ldi	r24, 0x04	; 4
    1ba2:	80 83       	st	Z, r24
}
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	08 95       	ret

00001bae <TWI_start>:



void TWI_start(void)
{
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1bb6:	e6 e5       	ldi	r30, 0x56	; 86
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	84 ea       	ldi	r24, 0xA4	; 164
    1bbc:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1bbe:	e6 e5       	ldi	r30, 0x56	; 86
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	88 23       	and	r24, r24
    1bc6:	dc f7       	brge	.-10     	; 0x1bbe <TWI_start+0x10>
}
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <TWI_stop>:

void TWI_stop(void)
{
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1bd6:	e6 e5       	ldi	r30, 0x56	; 86
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	84 e9       	ldi	r24, 0x94	; 148
    1bdc:	80 83       	st	Z, r24
}
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <TWI_write>:

void TWI_write(uint8 data)
{
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	0f 92       	push	r0
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
    1bee:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1bf0:	e3 e2       	ldi	r30, 0x23	; 35
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1bf8:	e6 e5       	ldi	r30, 0x56	; 86
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	84 e8       	ldi	r24, 0x84	; 132
    1bfe:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1c00:	e6 e5       	ldi	r30, 0x56	; 86
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	88 23       	and	r24, r24
    1c08:	dc f7       	brge	.-10     	; 0x1c00 <TWI_write+0x1c>
}
    1c0a:	0f 90       	pop	r0
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	08 95       	ret

00001c12 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1c1a:	e6 e5       	ldi	r30, 0x56	; 86
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	84 ec       	ldi	r24, 0xC4	; 196
    1c20:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1c22:	e6 e5       	ldi	r30, 0x56	; 86
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	88 23       	and	r24, r24
    1c2a:	dc f7       	brge	.-10     	; 0x1c22 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    1c2c:	e3 e2       	ldi	r30, 0x23	; 35
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
}
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1c40:	e6 e5       	ldi	r30, 0x56	; 86
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	84 e8       	ldi	r24, 0x84	; 132
    1c46:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1c48:	e6 e5       	ldi	r30, 0x56	; 86
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	88 23       	and	r24, r24
    1c50:	dc f7       	brge	.-10     	; 0x1c48 <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1c52:	e3 e2       	ldi	r30, 0x23	; 35
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
}
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	08 95       	ret

00001c5e <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	0f 92       	push	r0
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1c68:	e1 e2       	ldi	r30, 0x21	; 33
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	88 7f       	andi	r24, 0xF8	; 248
    1c70:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c74:	0f 90       	pop	r0
    1c76:	cf 91       	pop	r28
    1c78:	df 91       	pop	r29
    1c7a:	08 95       	ret

00001c7c <__vector_9>:
static volatile void (*g_Timer1_callBackPtr)(void) = NULL_PTR;
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect)
{
    1c7c:	1f 92       	push	r1
    1c7e:	0f 92       	push	r0
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	0f 92       	push	r0
    1c84:	11 24       	eor	r1, r1
    1c86:	2f 93       	push	r18
    1c88:	3f 93       	push	r19
    1c8a:	4f 93       	push	r20
    1c8c:	5f 93       	push	r21
    1c8e:	6f 93       	push	r22
    1c90:	7f 93       	push	r23
    1c92:	8f 93       	push	r24
    1c94:	9f 93       	push	r25
    1c96:	af 93       	push	r26
    1c98:	bf 93       	push	r27
    1c9a:	ef 93       	push	r30
    1c9c:	ff 93       	push	r31
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    1ca6:	80 91 7b 00 	lds	r24, 0x007B
    1caa:	90 91 7c 00 	lds	r25, 0x007C
    1cae:	00 97       	sbiw	r24, 0x00	; 0
    1cb0:	29 f0       	breq	.+10     	; 0x1cbc <__vector_9+0x40>
	{
		(*g_Timer0_callBackPtr)();
    1cb2:	e0 91 7b 00 	lds	r30, 0x007B
    1cb6:	f0 91 7c 00 	lds	r31, 0x007C
    1cba:	09 95       	icall
	}
}
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	ff 91       	pop	r31
    1cc2:	ef 91       	pop	r30
    1cc4:	bf 91       	pop	r27
    1cc6:	af 91       	pop	r26
    1cc8:	9f 91       	pop	r25
    1cca:	8f 91       	pop	r24
    1ccc:	7f 91       	pop	r23
    1cce:	6f 91       	pop	r22
    1cd0:	5f 91       	pop	r21
    1cd2:	4f 91       	pop	r20
    1cd4:	3f 91       	pop	r19
    1cd6:	2f 91       	pop	r18
    1cd8:	0f 90       	pop	r0
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	0f 90       	pop	r0
    1cde:	1f 90       	pop	r1
    1ce0:	18 95       	reti

00001ce2 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    1ce2:	1f 92       	push	r1
    1ce4:	0f 92       	push	r0
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	0f 92       	push	r0
    1cea:	11 24       	eor	r1, r1
    1cec:	2f 93       	push	r18
    1cee:	3f 93       	push	r19
    1cf0:	4f 93       	push	r20
    1cf2:	5f 93       	push	r21
    1cf4:	6f 93       	push	r22
    1cf6:	7f 93       	push	r23
    1cf8:	8f 93       	push	r24
    1cfa:	9f 93       	push	r25
    1cfc:	af 93       	push	r26
    1cfe:	bf 93       	push	r27
    1d00:	ef 93       	push	r30
    1d02:	ff 93       	push	r31
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    1d0c:	80 91 7b 00 	lds	r24, 0x007B
    1d10:	90 91 7c 00 	lds	r25, 0x007C
    1d14:	00 97       	sbiw	r24, 0x00	; 0
    1d16:	29 f0       	breq	.+10     	; 0x1d22 <__vector_19+0x40>
	{
		(*g_Timer0_callBackPtr)();
    1d18:	e0 91 7b 00 	lds	r30, 0x007B
    1d1c:	f0 91 7c 00 	lds	r31, 0x007C
    1d20:	09 95       	icall
	}
}
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	ff 91       	pop	r31
    1d28:	ef 91       	pop	r30
    1d2a:	bf 91       	pop	r27
    1d2c:	af 91       	pop	r26
    1d2e:	9f 91       	pop	r25
    1d30:	8f 91       	pop	r24
    1d32:	7f 91       	pop	r23
    1d34:	6f 91       	pop	r22
    1d36:	5f 91       	pop	r21
    1d38:	4f 91       	pop	r20
    1d3a:	3f 91       	pop	r19
    1d3c:	2f 91       	pop	r18
    1d3e:	0f 90       	pop	r0
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	0f 90       	pop	r0
    1d44:	1f 90       	pop	r1
    1d46:	18 95       	reti

00001d48 <__vector_8>:

ISR(TIMER1_OVF_vect)
{
    1d48:	1f 92       	push	r1
    1d4a:	0f 92       	push	r0
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	0f 92       	push	r0
    1d50:	11 24       	eor	r1, r1
    1d52:	2f 93       	push	r18
    1d54:	3f 93       	push	r19
    1d56:	4f 93       	push	r20
    1d58:	5f 93       	push	r21
    1d5a:	6f 93       	push	r22
    1d5c:	7f 93       	push	r23
    1d5e:	8f 93       	push	r24
    1d60:	9f 93       	push	r25
    1d62:	af 93       	push	r26
    1d64:	bf 93       	push	r27
    1d66:	ef 93       	push	r30
    1d68:	ff 93       	push	r31
    1d6a:	df 93       	push	r29
    1d6c:	cf 93       	push	r28
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtr != NULL_PTR)
    1d72:	80 91 7d 00 	lds	r24, 0x007D
    1d76:	90 91 7e 00 	lds	r25, 0x007E
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	29 f0       	breq	.+10     	; 0x1d88 <__vector_8+0x40>
	{
		(*g_Timer1_callBackPtr)();
    1d7e:	e0 91 7d 00 	lds	r30, 0x007D
    1d82:	f0 91 7e 00 	lds	r31, 0x007E
    1d86:	09 95       	icall
	}
}
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	ff 91       	pop	r31
    1d8e:	ef 91       	pop	r30
    1d90:	bf 91       	pop	r27
    1d92:	af 91       	pop	r26
    1d94:	9f 91       	pop	r25
    1d96:	8f 91       	pop	r24
    1d98:	7f 91       	pop	r23
    1d9a:	6f 91       	pop	r22
    1d9c:	5f 91       	pop	r21
    1d9e:	4f 91       	pop	r20
    1da0:	3f 91       	pop	r19
    1da2:	2f 91       	pop	r18
    1da4:	0f 90       	pop	r0
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	0f 90       	pop	r0
    1daa:	1f 90       	pop	r1
    1dac:	18 95       	reti

00001dae <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    1dae:	1f 92       	push	r1
    1db0:	0f 92       	push	r0
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	0f 92       	push	r0
    1db6:	11 24       	eor	r1, r1
    1db8:	2f 93       	push	r18
    1dba:	3f 93       	push	r19
    1dbc:	4f 93       	push	r20
    1dbe:	5f 93       	push	r21
    1dc0:	6f 93       	push	r22
    1dc2:	7f 93       	push	r23
    1dc4:	8f 93       	push	r24
    1dc6:	9f 93       	push	r25
    1dc8:	af 93       	push	r26
    1dca:	bf 93       	push	r27
    1dcc:	ef 93       	push	r30
    1dce:	ff 93       	push	r31
    1dd0:	df 93       	push	r29
    1dd2:	cf 93       	push	r28
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtr != NULL_PTR)
    1dd8:	80 91 7d 00 	lds	r24, 0x007D
    1ddc:	90 91 7e 00 	lds	r25, 0x007E
    1de0:	00 97       	sbiw	r24, 0x00	; 0
    1de2:	29 f0       	breq	.+10     	; 0x1dee <__vector_6+0x40>
	{
		(*g_Timer1_callBackPtr)();
    1de4:	e0 91 7d 00 	lds	r30, 0x007D
    1de8:	f0 91 7e 00 	lds	r31, 0x007E
    1dec:	09 95       	icall
	}
}
    1dee:	cf 91       	pop	r28
    1df0:	df 91       	pop	r29
    1df2:	ff 91       	pop	r31
    1df4:	ef 91       	pop	r30
    1df6:	bf 91       	pop	r27
    1df8:	af 91       	pop	r26
    1dfa:	9f 91       	pop	r25
    1dfc:	8f 91       	pop	r24
    1dfe:	7f 91       	pop	r23
    1e00:	6f 91       	pop	r22
    1e02:	5f 91       	pop	r21
    1e04:	4f 91       	pop	r20
    1e06:	3f 91       	pop	r19
    1e08:	2f 91       	pop	r18
    1e0a:	0f 90       	pop	r0
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	0f 90       	pop	r0
    1e10:	1f 90       	pop	r1
    1e12:	18 95       	reti

00001e14 <Timer_init>:
 *******************************************************************************/
/*
 * Description:  Function to Initialize Timer Driver
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    1e14:	df 93       	push	r29
    1e16:	cf 93       	push	r28
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	2c 97       	sbiw	r28, 0x0c	; 12
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	de bf       	out	0x3e, r29	; 62
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	cd bf       	out	0x3d, r28	; 61
    1e28:	9a 83       	std	Y+2, r25	; 0x02
    1e2a:	89 83       	std	Y+1, r24	; 0x01

	switch(Config_Ptr->timer_ID)
    1e2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e30:	80 85       	ldd	r24, Z+8	; 0x08
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	3c 87       	std	Y+12, r19	; 0x0c
    1e38:	2b 87       	std	Y+11, r18	; 0x0b
    1e3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	39 f0       	breq	.+14     	; 0x1e50 <Timer_init+0x3c>
    1e42:	eb 85       	ldd	r30, Y+11	; 0x0b
    1e44:	fc 85       	ldd	r31, Y+12	; 0x0c
    1e46:	e1 30       	cpi	r30, 0x01	; 1
    1e48:	f1 05       	cpc	r31, r1
    1e4a:	09 f4       	brne	.+2      	; 0x1e4e <Timer_init+0x3a>
    1e4c:	c4 c0       	rjmp	.+392    	; 0x1fd6 <Timer_init+0x1c2>
    1e4e:	73 c1       	rjmp	.+742    	; 0x2136 <Timer_init+0x322>
	{

	case Timer0:
		TCCR0        &= 0X00;
    1e50:	e3 e5       	ldi	r30, 0x53	; 83
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	20 81       	ld	r18, Z
    1e56:	e3 e5       	ldi	r30, 0x53	; 83
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	10 82       	st	Z, r1
		TCNT0   &= 0X00;
    1e5c:	e2 e5       	ldi	r30, 0x52	; 82
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	30 81       	ld	r19, Z
    1e62:	e2 e5       	ldi	r30, 0x52	; 82
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	10 82       	st	Z, r1
		OCR0  &= 0X00;
    1e68:	ec e5       	ldi	r30, 0x5C	; 92
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	ec e5       	ldi	r30, 0x5C	; 92
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	10 82       	st	Z, r1
		TIMSK  &= 0X00;
    1e74:	e9 e5       	ldi	r30, 0x59	; 89
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	90 81       	ld	r25, Z
    1e7a:	e9 e5       	ldi	r30, 0x59	; 89
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	10 82       	st	Z, r1
		TCCR0 = ( (Config_Ptr->timer_InitialValue) ) & 0XFF;
    1e80:	23 e5       	ldi	r18, 0x53	; 83
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	e9 81       	ldd	r30, Y+1	; 0x01
    1e86:	fa 81       	ldd	r31, Y+2	; 0x02
    1e88:	80 81       	ld	r24, Z
    1e8a:	91 81       	ldd	r25, Z+1	; 0x01
    1e8c:	a2 81       	ldd	r26, Z+2	; 0x02
    1e8e:	b3 81       	ldd	r27, Z+3	; 0x03
    1e90:	f9 01       	movw	r30, r18
    1e92:	80 83       	st	Z, r24
		TCCR0 = (TCCR0  & 0XF8) | (Config_Ptr->timer_clock);
    1e94:	a3 e5       	ldi	r26, 0x53	; 83
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	e3 e5       	ldi	r30, 0x53	; 83
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	98 2f       	mov	r25, r24
    1ea0:	98 7f       	andi	r25, 0xF8	; 248
    1ea2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea6:	81 85       	ldd	r24, Z+9	; 0x09
    1ea8:	89 2b       	or	r24, r25
    1eaa:	8c 93       	st	X, r24
		TCCR0  = CLEAR_BIT(TCCR0 , COM00);
    1eac:	23 e5       	ldi	r18, 0x53	; 83
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	a3 e5       	ldi	r26, 0x53	; 83
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e3 e5       	ldi	r30, 0x53	; 83
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	8f 7e       	andi	r24, 0xEF	; 239
    1ebc:	8c 93       	st	X, r24
    1ebe:	8c 91       	ld	r24, X
    1ec0:	f9 01       	movw	r30, r18
    1ec2:	80 83       	st	Z, r24
		TCCR0  = CLEAR_BIT(TCCR0 , COM01);
    1ec4:	23 e5       	ldi	r18, 0x53	; 83
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	a3 e5       	ldi	r26, 0x53	; 83
    1eca:	b0 e0       	ldi	r27, 0x00	; 0
    1ecc:	e3 e5       	ldi	r30, 0x53	; 83
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	8f 7d       	andi	r24, 0xDF	; 223
    1ed4:	8c 93       	st	X, r24
    1ed6:	8c 91       	ld	r24, X
    1ed8:	f9 01       	movw	r30, r18
    1eda:	80 83       	st	Z, r24

		switch(Config_Ptr->timer_mode)
    1edc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ede:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee0:	82 85       	ldd	r24, Z+10	; 0x0a
    1ee2:	28 2f       	mov	r18, r24
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	3e 83       	std	Y+6, r19	; 0x06
    1ee8:	2d 83       	std	Y+5, r18	; 0x05
    1eea:	8d 81       	ldd	r24, Y+5	; 0x05
    1eec:	9e 81       	ldd	r25, Y+6	; 0x06
    1eee:	00 97       	sbiw	r24, 0x00	; 0
    1ef0:	31 f0       	breq	.+12     	; 0x1efe <Timer_init+0xea>
    1ef2:	ed 81       	ldd	r30, Y+5	; 0x05
    1ef4:	fe 81       	ldd	r31, Y+6	; 0x06
    1ef6:	e1 30       	cpi	r30, 0x01	; 1
    1ef8:	f1 05       	cpc	r31, r1
    1efa:	91 f1       	breq	.+100    	; 0x1f60 <Timer_init+0x14c>
    1efc:	1c c1       	rjmp	.+568    	; 0x2136 <Timer_init+0x322>
		{
		case Overflow:

			TCCR0  = CLEAR_BIT(TCCR0 , WGM00);
    1efe:	23 e5       	ldi	r18, 0x53	; 83
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	a3 e5       	ldi	r26, 0x53	; 83
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e3 e5       	ldi	r30, 0x53	; 83
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	8f 7b       	andi	r24, 0xBF	; 191
    1f0e:	8c 93       	st	X, r24
    1f10:	8c 91       	ld	r24, X
    1f12:	f9 01       	movw	r30, r18
    1f14:	80 83       	st	Z, r24
			TCCR0  = CLEAR_BIT(TCCR0 , WGM01);
    1f16:	23 e5       	ldi	r18, 0x53	; 83
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	a3 e5       	ldi	r26, 0x53	; 83
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	e3 e5       	ldi	r30, 0x53	; 83
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	87 7f       	andi	r24, 0xF7	; 247
    1f26:	8c 93       	st	X, r24
    1f28:	8c 91       	ld	r24, X
    1f2a:	f9 01       	movw	r30, r18
    1f2c:	80 83       	st	Z, r24
			TCCR0 = SET_BIT(TCCR0,FOC0);
    1f2e:	23 e5       	ldi	r18, 0x53	; 83
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	a3 e5       	ldi	r26, 0x53	; 83
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	e3 e5       	ldi	r30, 0x53	; 83
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	80 68       	ori	r24, 0x80	; 128
    1f3e:	8c 93       	st	X, r24
    1f40:	8c 91       	ld	r24, X
    1f42:	f9 01       	movw	r30, r18
    1f44:	80 83       	st	Z, r24
			TIMSK = SET_BIT(TIMSK, TOIE0);
    1f46:	29 e5       	ldi	r18, 0x59	; 89
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	a9 e5       	ldi	r26, 0x59	; 89
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	e9 e5       	ldi	r30, 0x59	; 89
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	81 60       	ori	r24, 0x01	; 1
    1f56:	8c 93       	st	X, r24
    1f58:	8c 91       	ld	r24, X
    1f5a:	f9 01       	movw	r30, r18
    1f5c:	80 83       	st	Z, r24
    1f5e:	eb c0       	rjmp	.+470    	; 0x2136 <Timer_init+0x322>
			break;

		case Compare:
			TCCR0 = CLEAR_BIT(TCCR0, WGM00);
    1f60:	23 e5       	ldi	r18, 0x53	; 83
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	a3 e5       	ldi	r26, 0x53	; 83
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	e3 e5       	ldi	r30, 0x53	; 83
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	8f 7b       	andi	r24, 0xBF	; 191
    1f70:	8c 93       	st	X, r24
    1f72:	8c 91       	ld	r24, X
    1f74:	f9 01       	movw	r30, r18
    1f76:	80 83       	st	Z, r24
			TCCR0 = SET_BIT(TCCR0, WGM01);
    1f78:	23 e5       	ldi	r18, 0x53	; 83
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	a3 e5       	ldi	r26, 0x53	; 83
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	e3 e5       	ldi	r30, 0x53	; 83
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	88 60       	ori	r24, 0x08	; 8
    1f88:	8c 93       	st	X, r24
    1f8a:	8c 91       	ld	r24, X
    1f8c:	f9 01       	movw	r30, r18
    1f8e:	80 83       	st	Z, r24
			TCCR0 = SET_BIT(TCCR0, FOC0);
    1f90:	23 e5       	ldi	r18, 0x53	; 83
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	a3 e5       	ldi	r26, 0x53	; 83
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	e3 e5       	ldi	r30, 0x53	; 83
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	80 68       	ori	r24, 0x80	; 128
    1fa0:	8c 93       	st	X, r24
    1fa2:	8c 91       	ld	r24, X
    1fa4:	f9 01       	movw	r30, r18
    1fa6:	80 83       	st	Z, r24
			OCR0 = ((Config_Ptr->timer_compare_MatchValue)) & 0XFF;
    1fa8:	2c e5       	ldi	r18, 0x5C	; 92
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	e9 81       	ldd	r30, Y+1	; 0x01
    1fae:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb0:	84 81       	ldd	r24, Z+4	; 0x04
    1fb2:	95 81       	ldd	r25, Z+5	; 0x05
    1fb4:	a6 81       	ldd	r26, Z+6	; 0x06
    1fb6:	b7 81       	ldd	r27, Z+7	; 0x07
    1fb8:	f9 01       	movw	r30, r18
    1fba:	80 83       	st	Z, r24
			TIMSK = SET_BIT(TIMSK, OCIE0);
    1fbc:	29 e5       	ldi	r18, 0x59	; 89
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	a9 e5       	ldi	r26, 0x59	; 89
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	e9 e5       	ldi	r30, 0x59	; 89
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	82 60       	ori	r24, 0x02	; 2
    1fcc:	8c 93       	st	X, r24
    1fce:	8c 91       	ld	r24, X
    1fd0:	f9 01       	movw	r30, r18
    1fd2:	80 83       	st	Z, r24
    1fd4:	b0 c0       	rjmp	.+352    	; 0x2136 <Timer_init+0x322>
			break;
		}
		break;
		case Timer1:
			TCNT1 = ( (Config_Ptr->timer_InitialValue) ) & 0XFFFF;
    1fd6:	2c e4       	ldi	r18, 0x4C	; 76
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	e9 81       	ldd	r30, Y+1	; 0x01
    1fdc:	fa 81       	ldd	r31, Y+2	; 0x02
    1fde:	80 81       	ld	r24, Z
    1fe0:	91 81       	ldd	r25, Z+1	; 0x01
    1fe2:	a2 81       	ldd	r26, Z+2	; 0x02
    1fe4:	b3 81       	ldd	r27, Z+3	; 0x03
    1fe6:	f9 01       	movw	r30, r18
    1fe8:	91 83       	std	Z+1, r25	; 0x01
    1fea:	80 83       	st	Z, r24
			TCCR1B =  (TCCR1B & 0XF8) | (Config_Ptr->timer_clock);
    1fec:	ae e4       	ldi	r26, 0x4E	; 78
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	ee e4       	ldi	r30, 0x4E	; 78
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	98 2f       	mov	r25, r24
    1ff8:	98 7f       	andi	r25, 0xF8	; 248
    1ffa:	e9 81       	ldd	r30, Y+1	; 0x01
    1ffc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ffe:	81 85       	ldd	r24, Z+9	; 0x09
    2000:	89 2b       	or	r24, r25
    2002:	8c 93       	st	X, r24
			TCCR1A = TCCR1A & 0X0F;
    2004:	af e4       	ldi	r26, 0x4F	; 79
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	ef e4       	ldi	r30, 0x4F	; 79
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	8f 70       	andi	r24, 0x0F	; 15
    2010:	8c 93       	st	X, r24
			switch(Config_Ptr->timer_mode)
    2012:	e9 81       	ldd	r30, Y+1	; 0x01
    2014:	fa 81       	ldd	r31, Y+2	; 0x02
    2016:	82 85       	ldd	r24, Z+10	; 0x0a
    2018:	28 2f       	mov	r18, r24
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	3c 83       	std	Y+4, r19	; 0x04
    201e:	2b 83       	std	Y+3, r18	; 0x03
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	9c 81       	ldd	r25, Y+4	; 0x04
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	31 f0       	breq	.+12     	; 0x2034 <Timer_init+0x220>
    2028:	eb 81       	ldd	r30, Y+3	; 0x03
    202a:	fc 81       	ldd	r31, Y+4	; 0x04
    202c:	e1 30       	cpi	r30, 0x01	; 1
    202e:	f1 05       	cpc	r31, r1
    2030:	a1 f1       	breq	.+104    	; 0x209a <Timer_init+0x286>
    2032:	81 c0       	rjmp	.+258    	; 0x2136 <Timer_init+0x322>
			{
			case Overflow:
				TCCR1A = TCCR1A & 0XFC ;
    2034:	af e4       	ldi	r26, 0x4F	; 79
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	ef e4       	ldi	r30, 0x4F	; 79
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	8c 7f       	andi	r24, 0xFC	; 252
    2040:	8c 93       	st	X, r24
				TCCR1B = TCCR1B & 0XE7 ;
    2042:	ae e4       	ldi	r26, 0x4E	; 78
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	ee e4       	ldi	r30, 0x4E	; 78
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	87 7e       	andi	r24, 0xE7	; 231
    204e:	8c 93       	st	X, r24
				TCCR1A =  SET_BIT(TCCR1A,FOC1A);
    2050:	2f e4       	ldi	r18, 0x4F	; 79
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	af e4       	ldi	r26, 0x4F	; 79
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	ef e4       	ldi	r30, 0x4F	; 79
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	88 60       	ori	r24, 0x08	; 8
    2060:	8c 93       	st	X, r24
    2062:	8c 91       	ld	r24, X
    2064:	f9 01       	movw	r30, r18
    2066:	80 83       	st	Z, r24
				TCCR1A =  SET_BIT(TCCR1A,FOC1B);
    2068:	2f e4       	ldi	r18, 0x4F	; 79
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	af e4       	ldi	r26, 0x4F	; 79
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	ef e4       	ldi	r30, 0x4F	; 79
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	84 60       	ori	r24, 0x04	; 4
    2078:	8c 93       	st	X, r24
    207a:	8c 91       	ld	r24, X
    207c:	f9 01       	movw	r30, r18
    207e:	80 83       	st	Z, r24
				TIMSK = SET_BIT(TIMSK,TOIE1);
    2080:	29 e5       	ldi	r18, 0x59	; 89
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	a9 e5       	ldi	r26, 0x59	; 89
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	e9 e5       	ldi	r30, 0x59	; 89
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	84 60       	ori	r24, 0x04	; 4
    2090:	8c 93       	st	X, r24
    2092:	8c 91       	ld	r24, X
    2094:	f9 01       	movw	r30, r18
    2096:	80 83       	st	Z, r24
    2098:	4e c0       	rjmp	.+156    	; 0x2136 <Timer_init+0x322>
				break;
			case Compare:
				TCCR1A = TCCR1A & 0XFC ;
    209a:	af e4       	ldi	r26, 0x4F	; 79
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	ef e4       	ldi	r30, 0x4F	; 79
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	8c 7f       	andi	r24, 0xFC	; 252
    20a6:	8c 93       	st	X, r24
				TCCR1B = SET_BIT(TCCR1B, WGM12);
    20a8:	2e e4       	ldi	r18, 0x4E	; 78
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	ae e4       	ldi	r26, 0x4E	; 78
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	ee e4       	ldi	r30, 0x4E	; 78
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	88 60       	ori	r24, 0x08	; 8
    20b8:	8c 93       	st	X, r24
    20ba:	8c 91       	ld	r24, X
    20bc:	f9 01       	movw	r30, r18
    20be:	80 83       	st	Z, r24
				TCCR1B = CLEAR_BIT(TCCR1B, WGM13);
    20c0:	2e e4       	ldi	r18, 0x4E	; 78
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	ae e4       	ldi	r26, 0x4E	; 78
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	ee e4       	ldi	r30, 0x4E	; 78
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	8f 7e       	andi	r24, 0xEF	; 239
    20d0:	8c 93       	st	X, r24
    20d2:	8c 91       	ld	r24, X
    20d4:	f9 01       	movw	r30, r18
    20d6:	80 83       	st	Z, r24
				TCCR1A =  SET_BIT(TCCR1A,FOC1A);
    20d8:	2f e4       	ldi	r18, 0x4F	; 79
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	af e4       	ldi	r26, 0x4F	; 79
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	ef e4       	ldi	r30, 0x4F	; 79
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	88 60       	ori	r24, 0x08	; 8
    20e8:	8c 93       	st	X, r24
    20ea:	8c 91       	ld	r24, X
    20ec:	f9 01       	movw	r30, r18
    20ee:	80 83       	st	Z, r24
				TCCR1A =  SET_BIT(TCCR1A,FOC1B);
    20f0:	2f e4       	ldi	r18, 0x4F	; 79
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	af e4       	ldi	r26, 0x4F	; 79
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	ef e4       	ldi	r30, 0x4F	; 79
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	84 60       	ori	r24, 0x04	; 4
    2100:	8c 93       	st	X, r24
    2102:	8c 91       	ld	r24, X
    2104:	f9 01       	movw	r30, r18
    2106:	80 83       	st	Z, r24
				OCR1A = ((Config_Ptr->timer_compare_MatchValue)) & 0XFFFF;
    2108:	2a e4       	ldi	r18, 0x4A	; 74
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	e9 81       	ldd	r30, Y+1	; 0x01
    210e:	fa 81       	ldd	r31, Y+2	; 0x02
    2110:	84 81       	ldd	r24, Z+4	; 0x04
    2112:	95 81       	ldd	r25, Z+5	; 0x05
    2114:	a6 81       	ldd	r26, Z+6	; 0x06
    2116:	b7 81       	ldd	r27, Z+7	; 0x07
    2118:	f9 01       	movw	r30, r18
    211a:	91 83       	std	Z+1, r25	; 0x01
    211c:	80 83       	st	Z, r24
				TIMSK = SET_BIT(TIMSK,OCIE1A);
    211e:	29 e5       	ldi	r18, 0x59	; 89
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	a9 e5       	ldi	r26, 0x59	; 89
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	e9 e5       	ldi	r30, 0x59	; 89
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	80 61       	ori	r24, 0x10	; 16
    212e:	8c 93       	st	X, r24
    2130:	8c 91       	ld	r24, X
    2132:	f9 01       	movw	r30, r18
    2134:	80 83       	st	Z, r24
				break;
			}
			break;
	}
}
    2136:	2c 96       	adiw	r28, 0x0c	; 12
    2138:	0f b6       	in	r0, 0x3f	; 63
    213a:	f8 94       	cli
    213c:	de bf       	out	0x3e, r29	; 62
    213e:	0f be       	out	0x3f, r0	; 63
    2140:	cd bf       	out	0x3d, r28	; 61
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <Timer_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer_setCallBack(void(*a_ptr)(void), Timer_Type timer_type )
{
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	00 d0       	rcall	.+0      	; 0x214e <Timer_setCallBack+0x6>
    214e:	00 d0       	rcall	.+0      	; 0x2150 <Timer_setCallBack+0x8>
    2150:	0f 92       	push	r0
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	9a 83       	std	Y+2, r25	; 0x02
    2158:	89 83       	std	Y+1, r24	; 0x01
    215a:	6b 83       	std	Y+3, r22	; 0x03
	switch(timer_type)
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	28 2f       	mov	r18, r24
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	3d 83       	std	Y+5, r19	; 0x05
    2164:	2c 83       	std	Y+4, r18	; 0x04
    2166:	8c 81       	ldd	r24, Y+4	; 0x04
    2168:	9d 81       	ldd	r25, Y+5	; 0x05
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	31 f0       	breq	.+12     	; 0x217a <Timer_setCallBack+0x32>
    216e:	2c 81       	ldd	r18, Y+4	; 0x04
    2170:	3d 81       	ldd	r19, Y+5	; 0x05
    2172:	21 30       	cpi	r18, 0x01	; 1
    2174:	31 05       	cpc	r19, r1
    2176:	41 f0       	breq	.+16     	; 0x2188 <Timer_setCallBack+0x40>
    2178:	0d c0       	rjmp	.+26     	; 0x2194 <Timer_setCallBack+0x4c>
	{
	case Timer0:
		g_Timer0_callBackPtr = a_ptr;
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	9a 81       	ldd	r25, Y+2	; 0x02
    217e:	90 93 7c 00 	sts	0x007C, r25
    2182:	80 93 7b 00 	sts	0x007B, r24
    2186:	06 c0       	rjmp	.+12     	; 0x2194 <Timer_setCallBack+0x4c>
		break;

	case Timer1:
		g_Timer1_callBackPtr = a_ptr;
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	9a 81       	ldd	r25, Y+2	; 0x02
    218c:	90 93 7e 00 	sts	0x007E, r25
    2190:	80 93 7d 00 	sts	0x007D, r24
		break;
	}
}
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	cf 91       	pop	r28
    21a0:	df 91       	pop	r29
    21a2:	08 95       	ret

000021a4 <Timer_stop>:

/*
 * Description: Function to stop the clock of the timer to stop incrementing.
 */
void Timer_stop(Timer_Type timer_type)
{
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	00 d0       	rcall	.+0      	; 0x21aa <Timer_stop+0x6>
    21aa:	0f 92       	push	r0
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	28 2f       	mov	r18, r24
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	3b 83       	std	Y+3, r19	; 0x03
    21ba:	2a 83       	std	Y+2, r18	; 0x02
    21bc:	8a 81       	ldd	r24, Y+2	; 0x02
    21be:	9b 81       	ldd	r25, Y+3	; 0x03
    21c0:	00 97       	sbiw	r24, 0x00	; 0
    21c2:	31 f0       	breq	.+12     	; 0x21d0 <Timer_stop+0x2c>
    21c4:	2a 81       	ldd	r18, Y+2	; 0x02
    21c6:	3b 81       	ldd	r19, Y+3	; 0x03
    21c8:	21 30       	cpi	r18, 0x01	; 1
    21ca:	31 05       	cpc	r19, r1
    21cc:	49 f0       	breq	.+18     	; 0x21e0 <Timer_stop+0x3c>
    21ce:	0f c0       	rjmp	.+30     	; 0x21ee <Timer_stop+0x4a>
	{
	case Timer0:
		TCCR0 = (TCCR0  & 0XF8) ;
    21d0:	a3 e5       	ldi	r26, 0x53	; 83
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	e3 e5       	ldi	r30, 0x53	; 83
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	88 7f       	andi	r24, 0xF8	; 248
    21dc:	8c 93       	st	X, r24
    21de:	07 c0       	rjmp	.+14     	; 0x21ee <Timer_stop+0x4a>
		break;

	case Timer1:
		TCCR1B  =  (TCCR1B  & 0XF8) ;
    21e0:	ae e4       	ldi	r26, 0x4E	; 78
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	ee e4       	ldi	r30, 0x4E	; 78
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	88 7f       	andi	r24, 0xF8	; 248
    21ec:	8c 93       	st	X, r24
		break;
	}
}
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	cf 91       	pop	r28
    21f6:	df 91       	pop	r29
    21f8:	08 95       	ret

000021fa <Timer_DeInit>:

/*
 * Description: Function to DeInit the timer to start again from beginning
 */
void Timer_DeInit(Timer_Type timer_type)
{
    21fa:	df 93       	push	r29
    21fc:	cf 93       	push	r28
    21fe:	cd b7       	in	r28, 0x3d	; 61
    2200:	de b7       	in	r29, 0x3e	; 62
    2202:	2e 97       	sbiw	r28, 0x0e	; 14
    2204:	0f b6       	in	r0, 0x3f	; 63
    2206:	f8 94       	cli
    2208:	de bf       	out	0x3e, r29	; 62
    220a:	0f be       	out	0x3f, r0	; 63
    220c:	cd bf       	out	0x3d, r28	; 61
    220e:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	3e 87       	std	Y+14, r19	; 0x0e
    2218:	2d 87       	std	Y+13, r18	; 0x0d
    221a:	8d 85       	ldd	r24, Y+13	; 0x0d
    221c:	9e 85       	ldd	r25, Y+14	; 0x0e
    221e:	00 97       	sbiw	r24, 0x00	; 0
    2220:	31 f0       	breq	.+12     	; 0x222e <Timer_DeInit+0x34>
    2222:	2d 85       	ldd	r18, Y+13	; 0x0d
    2224:	3e 85       	ldd	r19, Y+14	; 0x0e
    2226:	21 30       	cpi	r18, 0x01	; 1
    2228:	31 05       	cpc	r19, r1
    222a:	d1 f0       	breq	.+52     	; 0x2260 <Timer_DeInit+0x66>
    222c:	3b c0       	rjmp	.+118    	; 0x22a4 <Timer_DeInit+0xaa>
	{
	case Timer0:
		TCCR0        	&= 0X00;
    222e:	e3 e5       	ldi	r30, 0x53	; 83
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	30 81       	ld	r19, Z
    2234:	e3 e5       	ldi	r30, 0x53	; 83
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	10 82       	st	Z, r1
		TCNT0   		&= 0X00;
    223a:	e2 e5       	ldi	r30, 0x52	; 82
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	e2 e5       	ldi	r30, 0x52	; 82
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	10 82       	st	Z, r1
		OCR0  			&= 0X00;
    2246:	ec e5       	ldi	r30, 0x5C	; 92
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	90 81       	ld	r25, Z
    224c:	ec e5       	ldi	r30, 0x5C	; 92
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	10 82       	st	Z, r1
		TIMSK  			&= 0X00;
    2252:	e9 e5       	ldi	r30, 0x59	; 89
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	20 81       	ld	r18, Z
    2258:	e9 e5       	ldi	r30, 0x59	; 89
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	10 82       	st	Z, r1
    225e:	22 c0       	rjmp	.+68     	; 0x22a4 <Timer_DeInit+0xaa>
		break;

	case Timer1:
		TCCR1A         	&= 0X00;
    2260:	ef e4       	ldi	r30, 0x4F	; 79
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	30 81       	ld	r19, Z
    2266:	ef e4       	ldi	r30, 0x4F	; 79
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	10 82       	st	Z, r1
		TCCR1B         	&= 0X00;
    226c:	ee e4       	ldi	r30, 0x4E	; 78
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	ee e4       	ldi	r30, 0x4E	; 78
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	10 82       	st	Z, r1
		TCNT1      		&= 0X00;
    2278:	ec e4       	ldi	r30, 0x4C	; 76
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	20 81       	ld	r18, Z
    227e:	31 81       	ldd	r19, Z+1	; 0x01
    2280:	ec e4       	ldi	r30, 0x4C	; 76
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	11 82       	std	Z+1, r1	; 0x01
    2286:	10 82       	st	Z, r1
		OCR1A   		&= 0X00;
    2288:	ea e4       	ldi	r30, 0x4A	; 74
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	91 81       	ldd	r25, Z+1	; 0x01
    2290:	ea e4       	ldi	r30, 0x4A	; 74
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	11 82       	std	Z+1, r1	; 0x01
    2296:	10 82       	st	Z, r1
		TIMSK     		&= 0X00;
    2298:	e9 e5       	ldi	r30, 0x59	; 89
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	90 81       	ld	r25, Z
    229e:	e9 e5       	ldi	r30, 0x59	; 89
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	10 82       	st	Z, r1
		break;
	}
}
    22a4:	2e 96       	adiw	r28, 0x0e	; 14
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	f8 94       	cli
    22aa:	de bf       	out	0x3e, r29	; 62
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	cd bf       	out	0x3d, r28	; 61
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	08 95       	ret

000022b6 <UART_init>:

#include "UART_Driver.h"


void UART_init(const UART_config * cofig_Ptr)
{
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	00 d0       	rcall	.+0      	; 0x22bc <UART_init+0x6>
    22bc:	cd b7       	in	r28, 0x3d	; 61
    22be:	de b7       	in	r29, 0x3e	; 62
    22c0:	9a 83       	std	Y+2, r25	; 0x02
    22c2:	89 83       	std	Y+1, r24	; 0x01
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB |= (1 << RXEN) | (1 << TXEN);
    22c4:	aa e2       	ldi	r26, 0x2A	; 42
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	ea e2       	ldi	r30, 0x2A	; 42
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	88 61       	ori	r24, 0x18	; 24
    22d0:	8c 93       	st	X, r24

	UCSRB = (UCSRB & 0xFB) | (cofig_Ptr->data_bits & 0x04);
    22d2:	aa e2       	ldi	r26, 0x2A	; 42
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	ea e2       	ldi	r30, 0x2A	; 42
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	98 2f       	mov	r25, r24
    22de:	9b 7f       	andi	r25, 0xFB	; 251
    22e0:	e9 81       	ldd	r30, Y+1	; 0x01
    22e2:	fa 81       	ldd	r31, Y+2	; 0x02
    22e4:	80 81       	ld	r24, Z
    22e6:	84 70       	andi	r24, 0x04	; 4
    22e8:	89 2b       	or	r24, r25
    22ea:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC |= (1 << URSEL) ;
    22ec:	a0 e4       	ldi	r26, 0x40	; 64
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	e0 e4       	ldi	r30, 0x40	; 64
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	80 68       	ori	r24, 0x80	; 128
    22f8:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xF9) | ((cofig_Ptr->data_bits & 0x03)<<1);
    22fa:	a0 e4       	ldi	r26, 0x40	; 64
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	e0 e4       	ldi	r30, 0x40	; 64
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	28 2f       	mov	r18, r24
    2306:	29 7f       	andi	r18, 0xF9	; 249
    2308:	e9 81       	ldd	r30, Y+1	; 0x01
    230a:	fa 81       	ldd	r31, Y+2	; 0x02
    230c:	80 81       	ld	r24, Z
    230e:	88 2f       	mov	r24, r24
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	83 70       	andi	r24, 0x03	; 3
    2314:	90 70       	andi	r25, 0x00	; 0
    2316:	88 0f       	add	r24, r24
    2318:	99 1f       	adc	r25, r25
    231a:	82 2b       	or	r24, r18
    231c:	8c 93       	st	X, r24

	/*parity*/
	UCSRC = (UCSRC & 0xCF) | (cofig_Ptr->parity << 4);
    231e:	a0 e4       	ldi	r26, 0x40	; 64
    2320:	b0 e0       	ldi	r27, 0x00	; 0
    2322:	e0 e4       	ldi	r30, 0x40	; 64
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	80 81       	ld	r24, Z
    2328:	28 2f       	mov	r18, r24
    232a:	2f 7c       	andi	r18, 0xCF	; 207
    232c:	e9 81       	ldd	r30, Y+1	; 0x01
    232e:	fa 81       	ldd	r31, Y+2	; 0x02
    2330:	81 81       	ldd	r24, Z+1	; 0x01
    2332:	88 2f       	mov	r24, r24
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	82 95       	swap	r24
    2338:	92 95       	swap	r25
    233a:	90 7f       	andi	r25, 0xF0	; 240
    233c:	98 27       	eor	r25, r24
    233e:	80 7f       	andi	r24, 0xF0	; 240
    2340:	98 27       	eor	r25, r24
    2342:	82 2b       	or	r24, r18
    2344:	8c 93       	st	X, r24

	/* stop_bit*/
	UCSRC = (UCSRC & 0xF7) | (cofig_Ptr->stop_bit << 3);
    2346:	a0 e4       	ldi	r26, 0x40	; 64
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	e0 e4       	ldi	r30, 0x40	; 64
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	28 2f       	mov	r18, r24
    2352:	27 7f       	andi	r18, 0xF7	; 247
    2354:	e9 81       	ldd	r30, Y+1	; 0x01
    2356:	fa 81       	ldd	r31, Y+2	; 0x02
    2358:	82 81       	ldd	r24, Z+2	; 0x02
    235a:	88 2f       	mov	r24, r24
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	88 0f       	add	r24, r24
    2360:	99 1f       	adc	r25, r25
    2362:	88 0f       	add	r24, r24
    2364:	99 1f       	adc	r25, r25
    2366:	88 0f       	add	r24, r24
    2368:	99 1f       	adc	r25, r25
    236a:	82 2b       	or	r24, r18
    236c:	8c 93       	st	X, r24

	/*mode*/
	UCSRC = (UCSRC & 0xBF) | (mode_bit << 6);
    236e:	a0 e4       	ldi	r26, 0x40	; 64
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	e0 e4       	ldi	r30, 0x40	; 64
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	8f 7b       	andi	r24, 0xBF	; 191
    237a:	8c 93       	st	X, r24

	/* U2X = 1 for double transmission speed */
	UCSRA = (UCSRA & 0xFD) | (double_speed << 1);
    237c:	ab e2       	ldi	r26, 0x2B	; 43
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	eb e2       	ldi	r30, 0x2B	; 43
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	82 60       	ori	r24, 0x02	; 2
    2388:	8c 93       	st	X, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRL = BAUD_PRESCALE;
    238a:	e9 e2       	ldi	r30, 0x29	; 41
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	87 e6       	ldi	r24, 0x67	; 103
    2390:	80 83       	st	Z, r24

	UBRRH = BAUD_PRESCALE >> 8;
    2392:	e0 e4       	ldi	r30, 0x40	; 64
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	10 82       	st	Z, r1
}/*end of Uart_init function*/
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	08 95       	ret

000023a2 <UART_sendByte>:


void UART_sendByte(uint8 data)
{
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	0f 92       	push	r0
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA ,UDRE)){};
    23ae:	eb e2       	ldi	r30, 0x2B	; 43
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	88 2f       	mov	r24, r24
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	80 72       	andi	r24, 0x20	; 32
    23ba:	90 70       	andi	r25, 0x00	; 0
    23bc:	00 97       	sbiw	r24, 0x00	; 0
    23be:	b9 f3       	breq	.-18     	; 0x23ae <UART_sendByte+0xc>
	/* put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    23c0:	ec e2       	ldi	r30, 0x2C	; 44
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
    23c6:	80 83       	st	Z, r24
}
    23c8:	0f 90       	pop	r0
    23ca:	cf 91       	pop	r28
    23cc:	df 91       	pop	r29
    23ce:	08 95       	ret

000023d0 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    23d0:	df 93       	push	r29
    23d2:	cf 93       	push	r28
    23d4:	cd b7       	in	r28, 0x3d	; 61
    23d6:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while (BIT_IS_CLEAR(UCSRA ,RXC)){};
    23d8:	eb e2       	ldi	r30, 0x2B	; 43
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 81       	ld	r24, Z
    23de:	88 23       	and	r24, r24
    23e0:	dc f7       	brge	.-10     	; 0x23d8 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
	return UDR;
    23e2:	ec e2       	ldi	r30, 0x2C	; 44
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
}
    23e8:	cf 91       	pop	r28
    23ea:	df 91       	pop	r29
    23ec:	08 95       	ret

000023ee <UART_sendString>:

void UART_sendString(const uint8 *str)
{
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	00 d0       	rcall	.+0      	; 0x23f4 <UART_sendString+0x6>
    23f4:	0f 92       	push	r0
    23f6:	cd b7       	in	r28, 0x3d	; 61
    23f8:	de b7       	in	r29, 0x3e	; 62
    23fa:	9b 83       	std	Y+3, r25	; 0x03
    23fc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    23fe:	19 82       	std	Y+1, r1	; 0x01
    2400:	0e c0       	rjmp	.+28     	; 0x241e <UART_sendString+0x30>
	while (str[i] != '\0')
	{
		UART_sendByte(str[i]);
    2402:	89 81       	ldd	r24, Y+1	; 0x01
    2404:	28 2f       	mov	r18, r24
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	8a 81       	ldd	r24, Y+2	; 0x02
    240a:	9b 81       	ldd	r25, Y+3	; 0x03
    240c:	fc 01       	movw	r30, r24
    240e:	e2 0f       	add	r30, r18
    2410:	f3 1f       	adc	r31, r19
    2412:	80 81       	ld	r24, Z
    2414:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <UART_sendByte>
		i++;
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	8f 5f       	subi	r24, 0xFF	; 255
    241c:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *str)
{
	uint8 i = 0;
	while (str[i] != '\0')
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	28 2f       	mov	r18, r24
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	8a 81       	ldd	r24, Y+2	; 0x02
    2426:	9b 81       	ldd	r25, Y+3	; 0x03
    2428:	fc 01       	movw	r30, r24
    242a:	e2 0f       	add	r30, r18
    242c:	f3 1f       	adc	r31, r19
    242e:	80 81       	ld	r24, Z
    2430:	88 23       	and	r24, r24
    2432:	39 f7       	brne	.-50     	; 0x2402 <UART_sendString+0x14>
	{
		UART_sendByte(str[i]);
		i++;
	}
}
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	0f 90       	pop	r0
    243a:	cf 91       	pop	r28
    243c:	df 91       	pop	r29
    243e:	08 95       	ret

00002440 <UART_recieveString>:

void UART_recieveString(uint8 *str)
{
    2440:	0f 93       	push	r16
    2442:	1f 93       	push	r17
    2444:	df 93       	push	r29
    2446:	cf 93       	push	r28
    2448:	00 d0       	rcall	.+0      	; 0x244a <UART_recieveString+0xa>
    244a:	0f 92       	push	r0
    244c:	cd b7       	in	r28, 0x3d	; 61
    244e:	de b7       	in	r29, 0x3e	; 62
    2450:	9b 83       	std	Y+3, r25	; 0x03
    2452:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2454:	19 82       	std	Y+1, r1	; 0x01
	str[i] = UART_recieveByte();
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	28 2f       	mov	r18, r24
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	9b 81       	ldd	r25, Y+3	; 0x03
    2460:	8c 01       	movw	r16, r24
    2462:	02 0f       	add	r16, r18
    2464:	13 1f       	adc	r17, r19
    2466:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <UART_recieveByte>
    246a:	f8 01       	movw	r30, r16
    246c:	80 83       	st	Z, r24
    246e:	0f c0       	rjmp	.+30     	; 0x248e <UART_recieveString+0x4e>
	while (str[i] != '#')
	{
		i++;
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	8f 5f       	subi	r24, 0xFF	; 255
    2474:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_recieveByte();
    2476:	89 81       	ldd	r24, Y+1	; 0x01
    2478:	28 2f       	mov	r18, r24
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	8a 81       	ldd	r24, Y+2	; 0x02
    247e:	9b 81       	ldd	r25, Y+3	; 0x03
    2480:	8c 01       	movw	r16, r24
    2482:	02 0f       	add	r16, r18
    2484:	13 1f       	adc	r17, r19
    2486:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <UART_recieveByte>
    248a:	f8 01       	movw	r30, r16
    248c:	80 83       	st	Z, r24

void UART_recieveString(uint8 *str)
{
	uint8 i = 0;
	str[i] = UART_recieveByte();
	while (str[i] != '#')
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	28 2f       	mov	r18, r24
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	8a 81       	ldd	r24, Y+2	; 0x02
    2496:	9b 81       	ldd	r25, Y+3	; 0x03
    2498:	fc 01       	movw	r30, r24
    249a:	e2 0f       	add	r30, r18
    249c:	f3 1f       	adc	r31, r19
    249e:	80 81       	ld	r24, Z
    24a0:	83 32       	cpi	r24, 0x23	; 35
    24a2:	31 f7       	brne	.-52     	; 0x2470 <UART_recieveString+0x30>
	{
		i++;
		str[i] = UART_recieveByte();
	}
	str[i] = '\0';
    24a4:	89 81       	ldd	r24, Y+1	; 0x01
    24a6:	28 2f       	mov	r18, r24
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	8a 81       	ldd	r24, Y+2	; 0x02
    24ac:	9b 81       	ldd	r25, Y+3	; 0x03
    24ae:	fc 01       	movw	r30, r24
    24b0:	e2 0f       	add	r30, r18
    24b2:	f3 1f       	adc	r31, r19
    24b4:	10 82       	st	Z, r1
}
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	0f 90       	pop	r0
    24bc:	cf 91       	pop	r28
    24be:	df 91       	pop	r29
    24c0:	1f 91       	pop	r17
    24c2:	0f 91       	pop	r16
    24c4:	08 95       	ret

000024c6 <__prologue_saves__>:
    24c6:	2f 92       	push	r2
    24c8:	3f 92       	push	r3
    24ca:	4f 92       	push	r4
    24cc:	5f 92       	push	r5
    24ce:	6f 92       	push	r6
    24d0:	7f 92       	push	r7
    24d2:	8f 92       	push	r8
    24d4:	9f 92       	push	r9
    24d6:	af 92       	push	r10
    24d8:	bf 92       	push	r11
    24da:	cf 92       	push	r12
    24dc:	df 92       	push	r13
    24de:	ef 92       	push	r14
    24e0:	ff 92       	push	r15
    24e2:	0f 93       	push	r16
    24e4:	1f 93       	push	r17
    24e6:	cf 93       	push	r28
    24e8:	df 93       	push	r29
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
    24ee:	ca 1b       	sub	r28, r26
    24f0:	db 0b       	sbc	r29, r27
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	de bf       	out	0x3e, r29	; 62
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	cd bf       	out	0x3d, r28	; 61
    24fc:	09 94       	ijmp

000024fe <__epilogue_restores__>:
    24fe:	2a 88       	ldd	r2, Y+18	; 0x12
    2500:	39 88       	ldd	r3, Y+17	; 0x11
    2502:	48 88       	ldd	r4, Y+16	; 0x10
    2504:	5f 84       	ldd	r5, Y+15	; 0x0f
    2506:	6e 84       	ldd	r6, Y+14	; 0x0e
    2508:	7d 84       	ldd	r7, Y+13	; 0x0d
    250a:	8c 84       	ldd	r8, Y+12	; 0x0c
    250c:	9b 84       	ldd	r9, Y+11	; 0x0b
    250e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2510:	b9 84       	ldd	r11, Y+9	; 0x09
    2512:	c8 84       	ldd	r12, Y+8	; 0x08
    2514:	df 80       	ldd	r13, Y+7	; 0x07
    2516:	ee 80       	ldd	r14, Y+6	; 0x06
    2518:	fd 80       	ldd	r15, Y+5	; 0x05
    251a:	0c 81       	ldd	r16, Y+4	; 0x04
    251c:	1b 81       	ldd	r17, Y+3	; 0x03
    251e:	aa 81       	ldd	r26, Y+2	; 0x02
    2520:	b9 81       	ldd	r27, Y+1	; 0x01
    2522:	ce 0f       	add	r28, r30
    2524:	d1 1d       	adc	r29, r1
    2526:	0f b6       	in	r0, 0x3f	; 63
    2528:	f8 94       	cli
    252a:	de bf       	out	0x3e, r29	; 62
    252c:	0f be       	out	0x3f, r0	; 63
    252e:	cd bf       	out	0x3d, r28	; 61
    2530:	ed 01       	movw	r28, r26
    2532:	08 95       	ret

00002534 <_exit>:
    2534:	f8 94       	cli

00002536 <__stop_program>:
    2536:	ff cf       	rjmp	.-2      	; 0x2536 <__stop_program>
