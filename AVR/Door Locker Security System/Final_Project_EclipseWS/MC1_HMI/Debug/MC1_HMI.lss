
MC1_HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f8  00800060  000038ce  00003962  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800158  00800158  00003a5a  2**0
                  ALLOC
  3 .stab         00003030  00000000  00000000  00003a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000113b  00000000  00000000  00006a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007d07  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007e77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a9ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b758  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b8b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bb45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c313  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 2a 18 	jmp	0x3054	; 0x3054 <__vector_8>
      24:	0c 94 c4 17 	jmp	0x2f88	; 0x2f88 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 f7 17 	jmp	0x2fee	; 0x2fee <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 35       	cpi	r26, 0x58	; 88
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e5       	ldi	r26, 0x58	; 88
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 36       	cpi	r26, 0x65	; 101
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 65 0b 	call	0x16ca	; 0x16ca <main>
      8a:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e4       	ldi	r26, 0x40	; 64
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 05 1c 	jmp	0x380a	; 0x380a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f5 1b 	jmp	0x37ea	; 0x37ea <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 11 1c 	jmp	0x3822	; 0x3822 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f5 1b 	jmp	0x37ea	; 0x37ea <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 11 1c 	jmp	0x3822	; 0x3822 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e4       	ldi	r24, 0x40	; 64
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 05 1c 	jmp	0x380a	; 0x380a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f5 1b 	jmp	0x37ea	; 0x37ea <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 11 1c 	jmp	0x3822	; 0x3822 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f5 1b 	jmp	0x37ea	; 0x37ea <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 11 1c 	jmp	0x3822	; 0x3822 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f5 1b 	jmp	0x37ea	; 0x37ea <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 11 1c 	jmp	0x3822	; 0x3822 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f9 1b 	jmp	0x37f2	; 0x37f2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 15 1c 	jmp	0x382a	; 0x382a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <KeyPad_getPressedKey+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     b50:	1a 82       	std	Y+2, r1	; 0x02
     b52:	4c c0       	rjmp	.+152    	; 0xbec <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and
			 * the rest will be input pins include the row pins
			 */
			KEYPAD_PORT_DIR = (0b00010000<<col);
     b54:	ea e3       	ldi	r30, 0x3A	; 58
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	80 e1       	ldi	r24, 0x10	; 16
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <KeyPad_getPressedKey+0x22>
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	2a 95       	dec	r18
     b6a:	e2 f7       	brpl	.-8      	; 0xb64 <KeyPad_getPressedKey+0x1e>
     b6c:	80 83       	st	Z, r24
			
			/*
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
     b6e:	eb e3       	ldi	r30, 0x3B	; 59
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	8a 81       	ldd	r24, Y+2	; 0x02
     b74:	28 2f       	mov	r18, r24
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	80 e1       	ldi	r24, 0x10	; 16
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	02 2e       	mov	r0, r18
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <KeyPad_getPressedKey+0x3e>
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	0a 94       	dec	r0
     b86:	e2 f7       	brpl	.-8      	; 0xb80 <KeyPad_getPressedKey+0x3a>
     b88:	80 95       	com	r24
     b8a:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
     b8c:	19 82       	std	Y+1, r1	; 0x01
     b8e:	28 c0       	rjmp	.+80     	; 0xbe0 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */
     b90:	e9 e3       	ldi	r30, 0x39	; 57
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	88 2f       	mov	r24, r24
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	a9 01       	movw	r20, r18
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <KeyPad_getPressedKey+0x62>
     ba4:	55 95       	asr	r21
     ba6:	47 95       	ror	r20
     ba8:	8a 95       	dec	r24
     baa:	e2 f7       	brpl	.-8      	; 0xba4 <KeyPad_getPressedKey+0x5e>
     bac:	ca 01       	movw	r24, r20
     bae:	81 70       	andi	r24, 0x01	; 1
     bb0:	90 70       	andi	r25, 0x00	; 0
     bb2:	00 97       	sbiw	r24, 0x00	; 0
     bb4:	91 f4       	brne	.+36     	; 0xbda <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	88 2f       	mov	r24, r24
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	98 2f       	mov	r25, r24
     bc6:	8a 81       	ldd	r24, Y+2	; 0x02
     bc8:	89 0f       	add	r24, r25
     bca:	8f 5f       	subi	r24, 0xFF	; 255
     bcc:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	8f 5f       	subi	r24, 0xFF	; 255
     bde:	89 83       	std	Y+1, r24	; 0x01
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	84 30       	cpi	r24, 0x04	; 4
     be4:	a8 f2       	brcs	.-86     	; 0xb90 <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	8f 5f       	subi	r24, 0xFF	; 255
     bea:	8a 83       	std	Y+2, r24	; 0x02
     bec:	8a 81       	ldd	r24, Y+2	; 0x02
     bee:	84 30       	cpi	r24, 0x04	; 4
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <KeyPad_getPressedKey+0xae>
     bf2:	b0 cf       	rjmp	.-160    	; 0xb54 <KeyPad_getPressedKey+0xe>
     bf4:	ad cf       	rjmp	.-166    	; 0xb50 <KeyPad_getPressedKey+0xa>

00000bf6 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)

static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	00 d0       	rcall	.+0      	; 0xbfc <KeyPad_4x4_adjustKeyNumber+0x6>
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <KeyPad_4x4_adjustKeyNumber+0x8>
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	3c 83       	std	Y+4, r19	; 0x04
     c0c:	2b 83       	std	Y+3, r18	; 0x03
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	9c 81       	ldd	r25, Y+4	; 0x04
     c12:	88 30       	cpi	r24, 0x08	; 8
     c14:	91 05       	cpc	r25, r1
     c16:	09 f4       	brne	.+2      	; 0xc1a <KeyPad_4x4_adjustKeyNumber+0x24>
     c18:	70 c0       	rjmp	.+224    	; 0xcfa <KeyPad_4x4_adjustKeyNumber+0x104>
     c1a:	2b 81       	ldd	r18, Y+3	; 0x03
     c1c:	3c 81       	ldd	r19, Y+4	; 0x04
     c1e:	29 30       	cpi	r18, 0x09	; 9
     c20:	31 05       	cpc	r19, r1
     c22:	5c f5       	brge	.+86     	; 0xc7a <KeyPad_4x4_adjustKeyNumber+0x84>
     c24:	8b 81       	ldd	r24, Y+3	; 0x03
     c26:	9c 81       	ldd	r25, Y+4	; 0x04
     c28:	84 30       	cpi	r24, 0x04	; 4
     c2a:	91 05       	cpc	r25, r1
     c2c:	09 f4       	brne	.+2      	; 0xc30 <KeyPad_4x4_adjustKeyNumber+0x3a>
     c2e:	59 c0       	rjmp	.+178    	; 0xce2 <KeyPad_4x4_adjustKeyNumber+0xec>
     c30:	2b 81       	ldd	r18, Y+3	; 0x03
     c32:	3c 81       	ldd	r19, Y+4	; 0x04
     c34:	25 30       	cpi	r18, 0x05	; 5
     c36:	31 05       	cpc	r19, r1
     c38:	9c f4       	brge	.+38     	; 0xc60 <KeyPad_4x4_adjustKeyNumber+0x6a>
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	9c 81       	ldd	r25, Y+4	; 0x04
     c3e:	82 30       	cpi	r24, 0x02	; 2
     c40:	91 05       	cpc	r25, r1
     c42:	09 f4       	brne	.+2      	; 0xc46 <KeyPad_4x4_adjustKeyNumber+0x50>
     c44:	48 c0       	rjmp	.+144    	; 0xcd6 <KeyPad_4x4_adjustKeyNumber+0xe0>
     c46:	2b 81       	ldd	r18, Y+3	; 0x03
     c48:	3c 81       	ldd	r19, Y+4	; 0x04
     c4a:	23 30       	cpi	r18, 0x03	; 3
     c4c:	31 05       	cpc	r19, r1
     c4e:	0c f0       	brlt	.+2      	; 0xc52 <KeyPad_4x4_adjustKeyNumber+0x5c>
     c50:	45 c0       	rjmp	.+138    	; 0xcdc <KeyPad_4x4_adjustKeyNumber+0xe6>
     c52:	8b 81       	ldd	r24, Y+3	; 0x03
     c54:	9c 81       	ldd	r25, Y+4	; 0x04
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	91 05       	cpc	r25, r1
     c5a:	09 f4       	brne	.+2      	; 0xc5e <KeyPad_4x4_adjustKeyNumber+0x68>
     c5c:	39 c0       	rjmp	.+114    	; 0xcd0 <KeyPad_4x4_adjustKeyNumber+0xda>
     c5e:	67 c0       	rjmp	.+206    	; 0xd2e <KeyPad_4x4_adjustKeyNumber+0x138>
     c60:	2b 81       	ldd	r18, Y+3	; 0x03
     c62:	3c 81       	ldd	r19, Y+4	; 0x04
     c64:	26 30       	cpi	r18, 0x06	; 6
     c66:	31 05       	cpc	r19, r1
     c68:	09 f4       	brne	.+2      	; 0xc6c <KeyPad_4x4_adjustKeyNumber+0x76>
     c6a:	41 c0       	rjmp	.+130    	; 0xcee <KeyPad_4x4_adjustKeyNumber+0xf8>
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	9c 81       	ldd	r25, Y+4	; 0x04
     c70:	87 30       	cpi	r24, 0x07	; 7
     c72:	91 05       	cpc	r25, r1
     c74:	0c f0       	brlt	.+2      	; 0xc78 <KeyPad_4x4_adjustKeyNumber+0x82>
     c76:	3e c0       	rjmp	.+124    	; 0xcf4 <KeyPad_4x4_adjustKeyNumber+0xfe>
     c78:	37 c0       	rjmp	.+110    	; 0xce8 <KeyPad_4x4_adjustKeyNumber+0xf2>
     c7a:	2b 81       	ldd	r18, Y+3	; 0x03
     c7c:	3c 81       	ldd	r19, Y+4	; 0x04
     c7e:	2c 30       	cpi	r18, 0x0C	; 12
     c80:	31 05       	cpc	r19, r1
     c82:	09 f4       	brne	.+2      	; 0xc86 <KeyPad_4x4_adjustKeyNumber+0x90>
     c84:	46 c0       	rjmp	.+140    	; 0xd12 <KeyPad_4x4_adjustKeyNumber+0x11c>
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	9c 81       	ldd	r25, Y+4	; 0x04
     c8a:	8d 30       	cpi	r24, 0x0D	; 13
     c8c:	91 05       	cpc	r25, r1
     c8e:	5c f4       	brge	.+22     	; 0xca6 <KeyPad_4x4_adjustKeyNumber+0xb0>
     c90:	2b 81       	ldd	r18, Y+3	; 0x03
     c92:	3c 81       	ldd	r19, Y+4	; 0x04
     c94:	2a 30       	cpi	r18, 0x0A	; 10
     c96:	31 05       	cpc	r19, r1
     c98:	b1 f1       	breq	.+108    	; 0xd06 <KeyPad_4x4_adjustKeyNumber+0x110>
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	9c 81       	ldd	r25, Y+4	; 0x04
     c9e:	8b 30       	cpi	r24, 0x0B	; 11
     ca0:	91 05       	cpc	r25, r1
     ca2:	a4 f5       	brge	.+104    	; 0xd0c <KeyPad_4x4_adjustKeyNumber+0x116>
     ca4:	2d c0       	rjmp	.+90     	; 0xd00 <KeyPad_4x4_adjustKeyNumber+0x10a>
     ca6:	2b 81       	ldd	r18, Y+3	; 0x03
     ca8:	3c 81       	ldd	r19, Y+4	; 0x04
     caa:	2e 30       	cpi	r18, 0x0E	; 14
     cac:	31 05       	cpc	r19, r1
     cae:	b9 f1       	breq	.+110    	; 0xd1e <KeyPad_4x4_adjustKeyNumber+0x128>
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	9c 81       	ldd	r25, Y+4	; 0x04
     cb4:	8e 30       	cpi	r24, 0x0E	; 14
     cb6:	91 05       	cpc	r25, r1
     cb8:	7c f1       	brlt	.+94     	; 0xd18 <KeyPad_4x4_adjustKeyNumber+0x122>
     cba:	2b 81       	ldd	r18, Y+3	; 0x03
     cbc:	3c 81       	ldd	r19, Y+4	; 0x04
     cbe:	2f 30       	cpi	r18, 0x0F	; 15
     cc0:	31 05       	cpc	r19, r1
     cc2:	79 f1       	breq	.+94     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x12c>
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	9c 81       	ldd	r25, Y+4	; 0x04
     cc8:	80 31       	cpi	r24, 0x10	; 16
     cca:	91 05       	cpc	r25, r1
     ccc:	69 f1       	breq	.+90     	; 0xd28 <KeyPad_4x4_adjustKeyNumber+0x132>
     cce:	2f c0       	rjmp	.+94     	; 0xd2e <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7;
     cd0:	97 e0       	ldi	r25, 0x07	; 7
     cd2:	9a 83       	std	Y+2, r25	; 0x02
     cd4:	2e c0       	rjmp	.+92     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8;
     cd6:	28 e0       	ldi	r18, 0x08	; 8
     cd8:	2a 83       	std	Y+2, r18	; 0x02
     cda:	2b c0       	rjmp	.+86     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9;
     cdc:	39 e0       	ldi	r19, 0x09	; 9
     cde:	3a 83       	std	Y+2, r19	; 0x02
     ce0:	28 c0       	rjmp	.+80     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
     ce2:	85 e2       	ldi	r24, 0x25	; 37
     ce4:	8a 83       	std	Y+2, r24	; 0x02
     ce6:	25 c0       	rjmp	.+74     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4;
     ce8:	94 e0       	ldi	r25, 0x04	; 4
     cea:	9a 83       	std	Y+2, r25	; 0x02
     cec:	22 c0       	rjmp	.+68     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
     cee:	25 e0       	ldi	r18, 0x05	; 5
     cf0:	2a 83       	std	Y+2, r18	; 0x02
     cf2:	1f c0       	rjmp	.+62     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6;
     cf4:	36 e0       	ldi	r19, 0x06	; 6
     cf6:	3a 83       	std	Y+2, r19	; 0x02
     cf8:	1c c0       	rjmp	.+56     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
     cfa:	8a e2       	ldi	r24, 0x2A	; 42
     cfc:	8a 83       	std	Y+2, r24	; 0x02
     cfe:	19 c0       	rjmp	.+50     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1;
     d00:	91 e0       	ldi	r25, 0x01	; 1
     d02:	9a 83       	std	Y+2, r25	; 0x02
     d04:	16 c0       	rjmp	.+44     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2;
     d06:	22 e0       	ldi	r18, 0x02	; 2
     d08:	2a 83       	std	Y+2, r18	; 0x02
     d0a:	13 c0       	rjmp	.+38     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3;
     d0c:	33 e0       	ldi	r19, 0x03	; 3
     d0e:	3a 83       	std	Y+2, r19	; 0x02
     d10:	10 c0       	rjmp	.+32     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
     d12:	8d e2       	ldi	r24, 0x2D	; 45
     d14:	8a 83       	std	Y+2, r24	; 0x02
     d16:	0d c0       	rjmp	.+26     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
     d18:	9d e0       	ldi	r25, 0x0D	; 13
     d1a:	9a 83       	std	Y+2, r25	; 0x02
     d1c:	0a c0       	rjmp	.+20     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0;
     d1e:	1a 82       	std	Y+2, r1	; 0x02
     d20:	08 c0       	rjmp	.+16     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
     d22:	2d e3       	ldi	r18, 0x3D	; 61
     d24:	2a 83       	std	Y+2, r18	; 0x02
     d26:	05 c0       	rjmp	.+10     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
     d28:	3b e2       	ldi	r19, 0x2B	; 43
     d2a:	3a 83       	std	Y+2, r19	; 0x02
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	8a 83       	std	Y+2, r24	; 0x02
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
     d4a:	e4 e3       	ldi	r30, 0x34	; 52
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	8f ef       	ldi	r24, 0xFF	; 255
     d50:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
     d52:	a7 e3       	ldi	r26, 0x37	; 55
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e7 e3       	ldi	r30, 0x37	; 55
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	80 6e       	ori	r24, 0xE0	; 224
     d5e:	8c 93       	st	X, r24

	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
     d60:	88 e3       	ldi	r24, 0x38	; 56
     d62:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_sendCommand>

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
     d66:	8c e0       	ldi	r24, 0x0C	; 12
     d68:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_sendCommand>

	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_sendCommand>
}
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	e9 97       	sbiw	r28, 0x39	; 57
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
     d8e:	a8 e3       	ldi	r26, 0x38	; 56
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e8 e3       	ldi	r30, 0x38	; 56
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	8f 7d       	andi	r24, 0xDF	; 223
     d9a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
     d9c:	a8 e3       	ldi	r26, 0x38	; 56
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e8 e3       	ldi	r30, 0x38	; 56
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8f 7b       	andi	r24, 0xBF	; 191
     da8:	8c 93       	st	X, r24
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	a0 e8       	ldi	r26, 0x80	; 128
     db0:	bf e3       	ldi	r27, 0x3F	; 63
     db2:	8d ab       	std	Y+53, r24	; 0x35
     db4:	9e ab       	std	Y+54, r25	; 0x36
     db6:	af ab       	std	Y+55, r26	; 0x37
     db8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dba:	6d a9       	ldd	r22, Y+53	; 0x35
     dbc:	7e a9       	ldd	r23, Y+54	; 0x36
     dbe:	8f a9       	ldd	r24, Y+55	; 0x37
     dc0:	98 ad       	ldd	r25, Y+56	; 0x38
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	4a ef       	ldi	r20, 0xFA	; 250
     dc8:	54 e4       	ldi	r21, 0x44	; 68
     dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	89 ab       	std	Y+49, r24	; 0x31
     dd4:	9a ab       	std	Y+50, r25	; 0x32
     dd6:	ab ab       	std	Y+51, r26	; 0x33
     dd8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     dda:	69 a9       	ldd	r22, Y+49	; 0x31
     ddc:	7a a9       	ldd	r23, Y+50	; 0x32
     dde:	8b a9       	ldd	r24, Y+51	; 0x33
     de0:	9c a9       	ldd	r25, Y+52	; 0x34
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	40 e8       	ldi	r20, 0x80	; 128
     de8:	5f e3       	ldi	r21, 0x3F	; 63
     dea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dee:	88 23       	and	r24, r24
     df0:	2c f4       	brge	.+10     	; 0xdfc <LCD_sendCommand+0x84>
		__ticks = 1;
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	98 ab       	std	Y+48, r25	; 0x30
     df8:	8f a7       	std	Y+47, r24	; 0x2f
     dfa:	3f c0       	rjmp	.+126    	; 0xe7a <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
     dfc:	69 a9       	ldd	r22, Y+49	; 0x31
     dfe:	7a a9       	ldd	r23, Y+50	; 0x32
     e00:	8b a9       	ldd	r24, Y+51	; 0x33
     e02:	9c a9       	ldd	r25, Y+52	; 0x34
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	3f ef       	ldi	r19, 0xFF	; 255
     e08:	4f e7       	ldi	r20, 0x7F	; 127
     e0a:	57 e4       	ldi	r21, 0x47	; 71
     e0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e10:	18 16       	cp	r1, r24
     e12:	4c f5       	brge	.+82     	; 0xe66 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e14:	6d a9       	ldd	r22, Y+53	; 0x35
     e16:	7e a9       	ldd	r23, Y+54	; 0x36
     e18:	8f a9       	ldd	r24, Y+55	; 0x37
     e1a:	98 ad       	ldd	r25, Y+56	; 0x38
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	40 e2       	ldi	r20, 0x20	; 32
     e22:	51 e4       	ldi	r21, 0x41	; 65
     e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e28:	dc 01       	movw	r26, r24
     e2a:	cb 01       	movw	r24, r22
     e2c:	bc 01       	movw	r22, r24
     e2e:	cd 01       	movw	r24, r26
     e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	98 ab       	std	Y+48, r25	; 0x30
     e3a:	8f a7       	std	Y+47, r24	; 0x2f
     e3c:	0f c0       	rjmp	.+30     	; 0xe5c <LCD_sendCommand+0xe4>
     e3e:	88 ec       	ldi	r24, 0xC8	; 200
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	9e a7       	std	Y+46, r25	; 0x2e
     e44:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e46:	8d a5       	ldd	r24, Y+45	; 0x2d
     e48:	9e a5       	ldd	r25, Y+46	; 0x2e
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	f1 f7       	brne	.-4      	; 0xe4a <LCD_sendCommand+0xd2>
     e4e:	9e a7       	std	Y+46, r25	; 0x2e
     e50:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e52:	8f a5       	ldd	r24, Y+47	; 0x2f
     e54:	98 a9       	ldd	r25, Y+48	; 0x30
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	98 ab       	std	Y+48, r25	; 0x30
     e5a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e5c:	8f a5       	ldd	r24, Y+47	; 0x2f
     e5e:	98 a9       	ldd	r25, Y+48	; 0x30
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	69 f7       	brne	.-38     	; 0xe3e <LCD_sendCommand+0xc6>
     e64:	14 c0       	rjmp	.+40     	; 0xe8e <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e66:	69 a9       	ldd	r22, Y+49	; 0x31
     e68:	7a a9       	ldd	r23, Y+50	; 0x32
     e6a:	8b a9       	ldd	r24, Y+51	; 0x33
     e6c:	9c a9       	ldd	r25, Y+52	; 0x34
     e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e72:	dc 01       	movw	r26, r24
     e74:	cb 01       	movw	r24, r22
     e76:	98 ab       	std	Y+48, r25	; 0x30
     e78:	8f a7       	std	Y+47, r24	; 0x2f
     e7a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e7c:	98 a9       	ldd	r25, Y+48	; 0x30
     e7e:	9c a7       	std	Y+44, r25	; 0x2c
     e80:	8b a7       	std	Y+43, r24	; 0x2b
     e82:	8b a5       	ldd	r24, Y+43	; 0x2b
     e84:	9c a5       	ldd	r25, Y+44	; 0x2c
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	f1 f7       	brne	.-4      	; 0xe86 <LCD_sendCommand+0x10e>
     e8a:	9c a7       	std	Y+44, r25	; 0x2c
     e8c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
     e8e:	a8 e3       	ldi	r26, 0x38	; 56
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e8 e3       	ldi	r30, 0x38	; 56
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	80 68       	ori	r24, 0x80	; 128
     e9a:	8c 93       	st	X, r24
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	a0 e8       	ldi	r26, 0x80	; 128
     ea2:	bf e3       	ldi	r27, 0x3F	; 63
     ea4:	8f a3       	std	Y+39, r24	; 0x27
     ea6:	98 a7       	std	Y+40, r25	; 0x28
     ea8:	a9 a7       	std	Y+41, r26	; 0x29
     eaa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eac:	6f a1       	ldd	r22, Y+39	; 0x27
     eae:	78 a5       	ldd	r23, Y+40	; 0x28
     eb0:	89 a5       	ldd	r24, Y+41	; 0x29
     eb2:	9a a5       	ldd	r25, Y+42	; 0x2a
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	4a ef       	ldi	r20, 0xFA	; 250
     eba:	54 e4       	ldi	r21, 0x44	; 68
     ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	8b a3       	std	Y+35, r24	; 0x23
     ec6:	9c a3       	std	Y+36, r25	; 0x24
     ec8:	ad a3       	std	Y+37, r26	; 0x25
     eca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     ecc:	6b a1       	ldd	r22, Y+35	; 0x23
     ece:	7c a1       	ldd	r23, Y+36	; 0x24
     ed0:	8d a1       	ldd	r24, Y+37	; 0x25
     ed2:	9e a1       	ldd	r25, Y+38	; 0x26
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	40 e8       	ldi	r20, 0x80	; 128
     eda:	5f e3       	ldi	r21, 0x3F	; 63
     edc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ee0:	88 23       	and	r24, r24
     ee2:	2c f4       	brge	.+10     	; 0xeee <LCD_sendCommand+0x176>
		__ticks = 1;
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	9a a3       	std	Y+34, r25	; 0x22
     eea:	89 a3       	std	Y+33, r24	; 0x21
     eec:	3f c0       	rjmp	.+126    	; 0xf6c <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
     eee:	6b a1       	ldd	r22, Y+35	; 0x23
     ef0:	7c a1       	ldd	r23, Y+36	; 0x24
     ef2:	8d a1       	ldd	r24, Y+37	; 0x25
     ef4:	9e a1       	ldd	r25, Y+38	; 0x26
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	3f ef       	ldi	r19, 0xFF	; 255
     efa:	4f e7       	ldi	r20, 0x7F	; 127
     efc:	57 e4       	ldi	r21, 0x47	; 71
     efe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f02:	18 16       	cp	r1, r24
     f04:	4c f5       	brge	.+82     	; 0xf58 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f06:	6f a1       	ldd	r22, Y+39	; 0x27
     f08:	78 a5       	ldd	r23, Y+40	; 0x28
     f0a:	89 a5       	ldd	r24, Y+41	; 0x29
     f0c:	9a a5       	ldd	r25, Y+42	; 0x2a
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	40 e2       	ldi	r20, 0x20	; 32
     f14:	51 e4       	ldi	r21, 0x41	; 65
     f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	bc 01       	movw	r22, r24
     f20:	cd 01       	movw	r24, r26
     f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	9a a3       	std	Y+34, r25	; 0x22
     f2c:	89 a3       	std	Y+33, r24	; 0x21
     f2e:	0f c0       	rjmp	.+30     	; 0xf4e <LCD_sendCommand+0x1d6>
     f30:	88 ec       	ldi	r24, 0xC8	; 200
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	98 a3       	std	Y+32, r25	; 0x20
     f36:	8f 8f       	std	Y+31, r24	; 0x1f
     f38:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f3a:	98 a1       	ldd	r25, Y+32	; 0x20
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <LCD_sendCommand+0x1c4>
     f40:	98 a3       	std	Y+32, r25	; 0x20
     f42:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f44:	89 a1       	ldd	r24, Y+33	; 0x21
     f46:	9a a1       	ldd	r25, Y+34	; 0x22
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	9a a3       	std	Y+34, r25	; 0x22
     f4c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f4e:	89 a1       	ldd	r24, Y+33	; 0x21
     f50:	9a a1       	ldd	r25, Y+34	; 0x22
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	69 f7       	brne	.-38     	; 0xf30 <LCD_sendCommand+0x1b8>
     f56:	14 c0       	rjmp	.+40     	; 0xf80 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f58:	6b a1       	ldd	r22, Y+35	; 0x23
     f5a:	7c a1       	ldd	r23, Y+36	; 0x24
     f5c:	8d a1       	ldd	r24, Y+37	; 0x25
     f5e:	9e a1       	ldd	r25, Y+38	; 0x26
     f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	9a a3       	std	Y+34, r25	; 0x22
     f6a:	89 a3       	std	Y+33, r24	; 0x21
     f6c:	89 a1       	ldd	r24, Y+33	; 0x21
     f6e:	9a a1       	ldd	r25, Y+34	; 0x22
     f70:	9e 8f       	std	Y+30, r25	; 0x1e
     f72:	8d 8f       	std	Y+29, r24	; 0x1d
     f74:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f76:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	f1 f7       	brne	.-4      	; 0xf78 <LCD_sendCommand+0x200>
     f7c:	9e 8f       	std	Y+30, r25	; 0x1e
     f7e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
     f80:	e5 e3       	ldi	r30, 0x35	; 53
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	89 ad       	ldd	r24, Y+57	; 0x39
     f86:	80 83       	st	Z, r24
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	a0 e8       	ldi	r26, 0x80	; 128
     f8e:	bf e3       	ldi	r27, 0x3F	; 63
     f90:	89 8f       	std	Y+25, r24	; 0x19
     f92:	9a 8f       	std	Y+26, r25	; 0x1a
     f94:	ab 8f       	std	Y+27, r26	; 0x1b
     f96:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f98:	69 8d       	ldd	r22, Y+25	; 0x19
     f9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	4a ef       	ldi	r20, 0xFA	; 250
     fa6:	54 e4       	ldi	r21, 0x44	; 68
     fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	8d 8b       	std	Y+21, r24	; 0x15
     fb2:	9e 8b       	std	Y+22, r25	; 0x16
     fb4:	af 8b       	std	Y+23, r26	; 0x17
     fb6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fb8:	6d 89       	ldd	r22, Y+21	; 0x15
     fba:	7e 89       	ldd	r23, Y+22	; 0x16
     fbc:	8f 89       	ldd	r24, Y+23	; 0x17
     fbe:	98 8d       	ldd	r25, Y+24	; 0x18
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e8       	ldi	r20, 0x80	; 128
     fc6:	5f e3       	ldi	r21, 0x3F	; 63
     fc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fcc:	88 23       	and	r24, r24
     fce:	2c f4       	brge	.+10     	; 0xfda <LCD_sendCommand+0x262>
		__ticks = 1;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	9c 8b       	std	Y+20, r25	; 0x14
     fd6:	8b 8b       	std	Y+19, r24	; 0x13
     fd8:	3f c0       	rjmp	.+126    	; 0x1058 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
     fda:	6d 89       	ldd	r22, Y+21	; 0x15
     fdc:	7e 89       	ldd	r23, Y+22	; 0x16
     fde:	8f 89       	ldd	r24, Y+23	; 0x17
     fe0:	98 8d       	ldd	r25, Y+24	; 0x18
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	3f ef       	ldi	r19, 0xFF	; 255
     fe6:	4f e7       	ldi	r20, 0x7F	; 127
     fe8:	57 e4       	ldi	r21, 0x47	; 71
     fea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fee:	18 16       	cp	r1, r24
     ff0:	4c f5       	brge	.+82     	; 0x1044 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff2:	69 8d       	ldd	r22, Y+25	; 0x19
     ff4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ff6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ff8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	40 e2       	ldi	r20, 0x20	; 32
    1000:	51 e4       	ldi	r21, 0x41	; 65
    1002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	bc 01       	movw	r22, r24
    100c:	cd 01       	movw	r24, r26
    100e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	9c 8b       	std	Y+20, r25	; 0x14
    1018:	8b 8b       	std	Y+19, r24	; 0x13
    101a:	0f c0       	rjmp	.+30     	; 0x103a <LCD_sendCommand+0x2c2>
    101c:	88 ec       	ldi	r24, 0xC8	; 200
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	9a 8b       	std	Y+18, r25	; 0x12
    1022:	89 8b       	std	Y+17, r24	; 0x11
    1024:	89 89       	ldd	r24, Y+17	; 0x11
    1026:	9a 89       	ldd	r25, Y+18	; 0x12
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <LCD_sendCommand+0x2b0>
    102c:	9a 8b       	std	Y+18, r25	; 0x12
    102e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1030:	8b 89       	ldd	r24, Y+19	; 0x13
    1032:	9c 89       	ldd	r25, Y+20	; 0x14
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	9c 8b       	std	Y+20, r25	; 0x14
    1038:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    103a:	8b 89       	ldd	r24, Y+19	; 0x13
    103c:	9c 89       	ldd	r25, Y+20	; 0x14
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	69 f7       	brne	.-38     	; 0x101c <LCD_sendCommand+0x2a4>
    1042:	14 c0       	rjmp	.+40     	; 0x106c <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1044:	6d 89       	ldd	r22, Y+21	; 0x15
    1046:	7e 89       	ldd	r23, Y+22	; 0x16
    1048:	8f 89       	ldd	r24, Y+23	; 0x17
    104a:	98 8d       	ldd	r25, Y+24	; 0x18
    104c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	9c 8b       	std	Y+20, r25	; 0x14
    1056:	8b 8b       	std	Y+19, r24	; 0x13
    1058:	8b 89       	ldd	r24, Y+19	; 0x13
    105a:	9c 89       	ldd	r25, Y+20	; 0x14
    105c:	98 8b       	std	Y+16, r25	; 0x10
    105e:	8f 87       	std	Y+15, r24	; 0x0f
    1060:	8f 85       	ldd	r24, Y+15	; 0x0f
    1062:	98 89       	ldd	r25, Y+16	; 0x10
    1064:	01 97       	sbiw	r24, 0x01	; 1
    1066:	f1 f7       	brne	.-4      	; 0x1064 <LCD_sendCommand+0x2ec>
    1068:	98 8b       	std	Y+16, r25	; 0x10
    106a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    106c:	a8 e3       	ldi	r26, 0x38	; 56
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e8 e3       	ldi	r30, 0x38	; 56
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8f 77       	andi	r24, 0x7F	; 127
    1078:	8c 93       	st	X, r24
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	a0 e8       	ldi	r26, 0x80	; 128
    1080:	bf e3       	ldi	r27, 0x3F	; 63
    1082:	8b 87       	std	Y+11, r24	; 0x0b
    1084:	9c 87       	std	Y+12, r25	; 0x0c
    1086:	ad 87       	std	Y+13, r26	; 0x0d
    1088:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    108a:	6b 85       	ldd	r22, Y+11	; 0x0b
    108c:	7c 85       	ldd	r23, Y+12	; 0x0c
    108e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1090:	9e 85       	ldd	r25, Y+14	; 0x0e
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	4a ef       	ldi	r20, 0xFA	; 250
    1098:	54 e4       	ldi	r21, 0x44	; 68
    109a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	8f 83       	std	Y+7, r24	; 0x07
    10a4:	98 87       	std	Y+8, r25	; 0x08
    10a6:	a9 87       	std	Y+9, r26	; 0x09
    10a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10aa:	6f 81       	ldd	r22, Y+7	; 0x07
    10ac:	78 85       	ldd	r23, Y+8	; 0x08
    10ae:	89 85       	ldd	r24, Y+9	; 0x09
    10b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e8       	ldi	r20, 0x80	; 128
    10b8:	5f e3       	ldi	r21, 0x3F	; 63
    10ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10be:	88 23       	and	r24, r24
    10c0:	2c f4       	brge	.+10     	; 0x10cc <LCD_sendCommand+0x354>
		__ticks = 1;
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	9e 83       	std	Y+6, r25	; 0x06
    10c8:	8d 83       	std	Y+5, r24	; 0x05
    10ca:	3f c0       	rjmp	.+126    	; 0x114a <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    10cc:	6f 81       	ldd	r22, Y+7	; 0x07
    10ce:	78 85       	ldd	r23, Y+8	; 0x08
    10d0:	89 85       	ldd	r24, Y+9	; 0x09
    10d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	3f ef       	ldi	r19, 0xFF	; 255
    10d8:	4f e7       	ldi	r20, 0x7F	; 127
    10da:	57 e4       	ldi	r21, 0x47	; 71
    10dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10e0:	18 16       	cp	r1, r24
    10e2:	4c f5       	brge	.+82     	; 0x1136 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e2       	ldi	r20, 0x20	; 32
    10f2:	51 e4       	ldi	r21, 0x41	; 65
    10f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	9e 83       	std	Y+6, r25	; 0x06
    110a:	8d 83       	std	Y+5, r24	; 0x05
    110c:	0f c0       	rjmp	.+30     	; 0x112c <LCD_sendCommand+0x3b4>
    110e:	88 ec       	ldi	r24, 0xC8	; 200
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	9c 83       	std	Y+4, r25	; 0x04
    1114:	8b 83       	std	Y+3, r24	; 0x03
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	9c 81       	ldd	r25, Y+4	; 0x04
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	f1 f7       	brne	.-4      	; 0x111a <LCD_sendCommand+0x3a2>
    111e:	9c 83       	std	Y+4, r25	; 0x04
    1120:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1122:	8d 81       	ldd	r24, Y+5	; 0x05
    1124:	9e 81       	ldd	r25, Y+6	; 0x06
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	9e 83       	std	Y+6, r25	; 0x06
    112a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	69 f7       	brne	.-38     	; 0x110e <LCD_sendCommand+0x396>
    1134:	14 c0       	rjmp	.+40     	; 0x115e <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1136:	6f 81       	ldd	r22, Y+7	; 0x07
    1138:	78 85       	ldd	r23, Y+8	; 0x08
    113a:	89 85       	ldd	r24, Y+9	; 0x09
    113c:	9a 85       	ldd	r25, Y+10	; 0x0a
    113e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	9e 83       	std	Y+6, r25	; 0x06
    1148:	8d 83       	std	Y+5, r24	; 0x05
    114a:	8d 81       	ldd	r24, Y+5	; 0x05
    114c:	9e 81       	ldd	r25, Y+6	; 0x06
    114e:	9a 83       	std	Y+2, r25	; 0x02
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	9a 81       	ldd	r25, Y+2	; 0x02
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	f1 f7       	brne	.-4      	; 0x1156 <LCD_sendCommand+0x3de>
    115a:	9a 83       	std	Y+2, r25	; 0x02
    115c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    115e:	e9 96       	adiw	r28, 0x39	; 57
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	e9 97       	sbiw	r28, 0x39	; 57
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1186:	a8 e3       	ldi	r26, 0x38	; 56
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e8 e3       	ldi	r30, 0x38	; 56
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	80 62       	ori	r24, 0x20	; 32
    1192:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1194:	a8 e3       	ldi	r26, 0x38	; 56
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e8 e3       	ldi	r30, 0x38	; 56
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	8f 7b       	andi	r24, 0xBF	; 191
    11a0:	8c 93       	st	X, r24
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	a0 e8       	ldi	r26, 0x80	; 128
    11a8:	bf e3       	ldi	r27, 0x3F	; 63
    11aa:	8d ab       	std	Y+53, r24	; 0x35
    11ac:	9e ab       	std	Y+54, r25	; 0x36
    11ae:	af ab       	std	Y+55, r26	; 0x37
    11b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b2:	6d a9       	ldd	r22, Y+53	; 0x35
    11b4:	7e a9       	ldd	r23, Y+54	; 0x36
    11b6:	8f a9       	ldd	r24, Y+55	; 0x37
    11b8:	98 ad       	ldd	r25, Y+56	; 0x38
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	4a ef       	ldi	r20, 0xFA	; 250
    11c0:	54 e4       	ldi	r21, 0x44	; 68
    11c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	89 ab       	std	Y+49, r24	; 0x31
    11cc:	9a ab       	std	Y+50, r25	; 0x32
    11ce:	ab ab       	std	Y+51, r26	; 0x33
    11d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11d2:	69 a9       	ldd	r22, Y+49	; 0x31
    11d4:	7a a9       	ldd	r23, Y+50	; 0x32
    11d6:	8b a9       	ldd	r24, Y+51	; 0x33
    11d8:	9c a9       	ldd	r25, Y+52	; 0x34
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	40 e8       	ldi	r20, 0x80	; 128
    11e0:	5f e3       	ldi	r21, 0x3F	; 63
    11e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11e6:	88 23       	and	r24, r24
    11e8:	2c f4       	brge	.+10     	; 0x11f4 <LCD_displayCharacter+0x84>
		__ticks = 1;
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	98 ab       	std	Y+48, r25	; 0x30
    11f0:	8f a7       	std	Y+47, r24	; 0x2f
    11f2:	3f c0       	rjmp	.+126    	; 0x1272 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    11f4:	69 a9       	ldd	r22, Y+49	; 0x31
    11f6:	7a a9       	ldd	r23, Y+50	; 0x32
    11f8:	8b a9       	ldd	r24, Y+51	; 0x33
    11fa:	9c a9       	ldd	r25, Y+52	; 0x34
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	3f ef       	ldi	r19, 0xFF	; 255
    1200:	4f e7       	ldi	r20, 0x7F	; 127
    1202:	57 e4       	ldi	r21, 0x47	; 71
    1204:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1208:	18 16       	cp	r1, r24
    120a:	4c f5       	brge	.+82     	; 0x125e <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    120c:	6d a9       	ldd	r22, Y+53	; 0x35
    120e:	7e a9       	ldd	r23, Y+54	; 0x36
    1210:	8f a9       	ldd	r24, Y+55	; 0x37
    1212:	98 ad       	ldd	r25, Y+56	; 0x38
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	40 e2       	ldi	r20, 0x20	; 32
    121a:	51 e4       	ldi	r21, 0x41	; 65
    121c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	bc 01       	movw	r22, r24
    1226:	cd 01       	movw	r24, r26
    1228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	98 ab       	std	Y+48, r25	; 0x30
    1232:	8f a7       	std	Y+47, r24	; 0x2f
    1234:	0f c0       	rjmp	.+30     	; 0x1254 <LCD_displayCharacter+0xe4>
    1236:	88 ec       	ldi	r24, 0xC8	; 200
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	9e a7       	std	Y+46, r25	; 0x2e
    123c:	8d a7       	std	Y+45, r24	; 0x2d
    123e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1240:	9e a5       	ldd	r25, Y+46	; 0x2e
    1242:	01 97       	sbiw	r24, 0x01	; 1
    1244:	f1 f7       	brne	.-4      	; 0x1242 <LCD_displayCharacter+0xd2>
    1246:	9e a7       	std	Y+46, r25	; 0x2e
    1248:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    124a:	8f a5       	ldd	r24, Y+47	; 0x2f
    124c:	98 a9       	ldd	r25, Y+48	; 0x30
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	98 ab       	std	Y+48, r25	; 0x30
    1252:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1254:	8f a5       	ldd	r24, Y+47	; 0x2f
    1256:	98 a9       	ldd	r25, Y+48	; 0x30
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	69 f7       	brne	.-38     	; 0x1236 <LCD_displayCharacter+0xc6>
    125c:	14 c0       	rjmp	.+40     	; 0x1286 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    125e:	69 a9       	ldd	r22, Y+49	; 0x31
    1260:	7a a9       	ldd	r23, Y+50	; 0x32
    1262:	8b a9       	ldd	r24, Y+51	; 0x33
    1264:	9c a9       	ldd	r25, Y+52	; 0x34
    1266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	98 ab       	std	Y+48, r25	; 0x30
    1270:	8f a7       	std	Y+47, r24	; 0x2f
    1272:	8f a5       	ldd	r24, Y+47	; 0x2f
    1274:	98 a9       	ldd	r25, Y+48	; 0x30
    1276:	9c a7       	std	Y+44, r25	; 0x2c
    1278:	8b a7       	std	Y+43, r24	; 0x2b
    127a:	8b a5       	ldd	r24, Y+43	; 0x2b
    127c:	9c a5       	ldd	r25, Y+44	; 0x2c
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	f1 f7       	brne	.-4      	; 0x127e <LCD_displayCharacter+0x10e>
    1282:	9c a7       	std	Y+44, r25	; 0x2c
    1284:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1286:	a8 e3       	ldi	r26, 0x38	; 56
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e8 e3       	ldi	r30, 0x38	; 56
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	80 68       	ori	r24, 0x80	; 128
    1292:	8c 93       	st	X, r24
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	a0 e8       	ldi	r26, 0x80	; 128
    129a:	bf e3       	ldi	r27, 0x3F	; 63
    129c:	8f a3       	std	Y+39, r24	; 0x27
    129e:	98 a7       	std	Y+40, r25	; 0x28
    12a0:	a9 a7       	std	Y+41, r26	; 0x29
    12a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a4:	6f a1       	ldd	r22, Y+39	; 0x27
    12a6:	78 a5       	ldd	r23, Y+40	; 0x28
    12a8:	89 a5       	ldd	r24, Y+41	; 0x29
    12aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	4a ef       	ldi	r20, 0xFA	; 250
    12b2:	54 e4       	ldi	r21, 0x44	; 68
    12b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b8:	dc 01       	movw	r26, r24
    12ba:	cb 01       	movw	r24, r22
    12bc:	8b a3       	std	Y+35, r24	; 0x23
    12be:	9c a3       	std	Y+36, r25	; 0x24
    12c0:	ad a3       	std	Y+37, r26	; 0x25
    12c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12c4:	6b a1       	ldd	r22, Y+35	; 0x23
    12c6:	7c a1       	ldd	r23, Y+36	; 0x24
    12c8:	8d a1       	ldd	r24, Y+37	; 0x25
    12ca:	9e a1       	ldd	r25, Y+38	; 0x26
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	40 e8       	ldi	r20, 0x80	; 128
    12d2:	5f e3       	ldi	r21, 0x3F	; 63
    12d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12d8:	88 23       	and	r24, r24
    12da:	2c f4       	brge	.+10     	; 0x12e6 <LCD_displayCharacter+0x176>
		__ticks = 1;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	9a a3       	std	Y+34, r25	; 0x22
    12e2:	89 a3       	std	Y+33, r24	; 0x21
    12e4:	3f c0       	rjmp	.+126    	; 0x1364 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    12e6:	6b a1       	ldd	r22, Y+35	; 0x23
    12e8:	7c a1       	ldd	r23, Y+36	; 0x24
    12ea:	8d a1       	ldd	r24, Y+37	; 0x25
    12ec:	9e a1       	ldd	r25, Y+38	; 0x26
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	3f ef       	ldi	r19, 0xFF	; 255
    12f2:	4f e7       	ldi	r20, 0x7F	; 127
    12f4:	57 e4       	ldi	r21, 0x47	; 71
    12f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12fa:	18 16       	cp	r1, r24
    12fc:	4c f5       	brge	.+82     	; 0x1350 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fe:	6f a1       	ldd	r22, Y+39	; 0x27
    1300:	78 a5       	ldd	r23, Y+40	; 0x28
    1302:	89 a5       	ldd	r24, Y+41	; 0x29
    1304:	9a a5       	ldd	r25, Y+42	; 0x2a
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e2       	ldi	r20, 0x20	; 32
    130c:	51 e4       	ldi	r21, 0x41	; 65
    130e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	bc 01       	movw	r22, r24
    1318:	cd 01       	movw	r24, r26
    131a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	9a a3       	std	Y+34, r25	; 0x22
    1324:	89 a3       	std	Y+33, r24	; 0x21
    1326:	0f c0       	rjmp	.+30     	; 0x1346 <LCD_displayCharacter+0x1d6>
    1328:	88 ec       	ldi	r24, 0xC8	; 200
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	98 a3       	std	Y+32, r25	; 0x20
    132e:	8f 8f       	std	Y+31, r24	; 0x1f
    1330:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1332:	98 a1       	ldd	r25, Y+32	; 0x20
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	f1 f7       	brne	.-4      	; 0x1334 <LCD_displayCharacter+0x1c4>
    1338:	98 a3       	std	Y+32, r25	; 0x20
    133a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133c:	89 a1       	ldd	r24, Y+33	; 0x21
    133e:	9a a1       	ldd	r25, Y+34	; 0x22
    1340:	01 97       	sbiw	r24, 0x01	; 1
    1342:	9a a3       	std	Y+34, r25	; 0x22
    1344:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1346:	89 a1       	ldd	r24, Y+33	; 0x21
    1348:	9a a1       	ldd	r25, Y+34	; 0x22
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	69 f7       	brne	.-38     	; 0x1328 <LCD_displayCharacter+0x1b8>
    134e:	14 c0       	rjmp	.+40     	; 0x1378 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1350:	6b a1       	ldd	r22, Y+35	; 0x23
    1352:	7c a1       	ldd	r23, Y+36	; 0x24
    1354:	8d a1       	ldd	r24, Y+37	; 0x25
    1356:	9e a1       	ldd	r25, Y+38	; 0x26
    1358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	9a a3       	std	Y+34, r25	; 0x22
    1362:	89 a3       	std	Y+33, r24	; 0x21
    1364:	89 a1       	ldd	r24, Y+33	; 0x21
    1366:	9a a1       	ldd	r25, Y+34	; 0x22
    1368:	9e 8f       	std	Y+30, r25	; 0x1e
    136a:	8d 8f       	std	Y+29, r24	; 0x1d
    136c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    136e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	f1 f7       	brne	.-4      	; 0x1370 <LCD_displayCharacter+0x200>
    1374:	9e 8f       	std	Y+30, r25	; 0x1e
    1376:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    1378:	e5 e3       	ldi	r30, 0x35	; 53
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	89 ad       	ldd	r24, Y+57	; 0x39
    137e:	80 83       	st	Z, r24
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	a0 e8       	ldi	r26, 0x80	; 128
    1386:	bf e3       	ldi	r27, 0x3F	; 63
    1388:	89 8f       	std	Y+25, r24	; 0x19
    138a:	9a 8f       	std	Y+26, r25	; 0x1a
    138c:	ab 8f       	std	Y+27, r26	; 0x1b
    138e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1390:	69 8d       	ldd	r22, Y+25	; 0x19
    1392:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1394:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1396:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	4a ef       	ldi	r20, 0xFA	; 250
    139e:	54 e4       	ldi	r21, 0x44	; 68
    13a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	8d 8b       	std	Y+21, r24	; 0x15
    13aa:	9e 8b       	std	Y+22, r25	; 0x16
    13ac:	af 8b       	std	Y+23, r26	; 0x17
    13ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13b0:	6d 89       	ldd	r22, Y+21	; 0x15
    13b2:	7e 89       	ldd	r23, Y+22	; 0x16
    13b4:	8f 89       	ldd	r24, Y+23	; 0x17
    13b6:	98 8d       	ldd	r25, Y+24	; 0x18
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	40 e8       	ldi	r20, 0x80	; 128
    13be:	5f e3       	ldi	r21, 0x3F	; 63
    13c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13c4:	88 23       	and	r24, r24
    13c6:	2c f4       	brge	.+10     	; 0x13d2 <LCD_displayCharacter+0x262>
		__ticks = 1;
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	9c 8b       	std	Y+20, r25	; 0x14
    13ce:	8b 8b       	std	Y+19, r24	; 0x13
    13d0:	3f c0       	rjmp	.+126    	; 0x1450 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    13d2:	6d 89       	ldd	r22, Y+21	; 0x15
    13d4:	7e 89       	ldd	r23, Y+22	; 0x16
    13d6:	8f 89       	ldd	r24, Y+23	; 0x17
    13d8:	98 8d       	ldd	r25, Y+24	; 0x18
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	3f ef       	ldi	r19, 0xFF	; 255
    13de:	4f e7       	ldi	r20, 0x7F	; 127
    13e0:	57 e4       	ldi	r21, 0x47	; 71
    13e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13e6:	18 16       	cp	r1, r24
    13e8:	4c f5       	brge	.+82     	; 0x143c <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ea:	69 8d       	ldd	r22, Y+25	; 0x19
    13ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	40 e2       	ldi	r20, 0x20	; 32
    13f8:	51 e4       	ldi	r21, 0x41	; 65
    13fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	bc 01       	movw	r22, r24
    1404:	cd 01       	movw	r24, r26
    1406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	9c 8b       	std	Y+20, r25	; 0x14
    1410:	8b 8b       	std	Y+19, r24	; 0x13
    1412:	0f c0       	rjmp	.+30     	; 0x1432 <LCD_displayCharacter+0x2c2>
    1414:	88 ec       	ldi	r24, 0xC8	; 200
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	9a 8b       	std	Y+18, r25	; 0x12
    141a:	89 8b       	std	Y+17, r24	; 0x11
    141c:	89 89       	ldd	r24, Y+17	; 0x11
    141e:	9a 89       	ldd	r25, Y+18	; 0x12
    1420:	01 97       	sbiw	r24, 0x01	; 1
    1422:	f1 f7       	brne	.-4      	; 0x1420 <LCD_displayCharacter+0x2b0>
    1424:	9a 8b       	std	Y+18, r25	; 0x12
    1426:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1428:	8b 89       	ldd	r24, Y+19	; 0x13
    142a:	9c 89       	ldd	r25, Y+20	; 0x14
    142c:	01 97       	sbiw	r24, 0x01	; 1
    142e:	9c 8b       	std	Y+20, r25	; 0x14
    1430:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1432:	8b 89       	ldd	r24, Y+19	; 0x13
    1434:	9c 89       	ldd	r25, Y+20	; 0x14
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	69 f7       	brne	.-38     	; 0x1414 <LCD_displayCharacter+0x2a4>
    143a:	14 c0       	rjmp	.+40     	; 0x1464 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    143c:	6d 89       	ldd	r22, Y+21	; 0x15
    143e:	7e 89       	ldd	r23, Y+22	; 0x16
    1440:	8f 89       	ldd	r24, Y+23	; 0x17
    1442:	98 8d       	ldd	r25, Y+24	; 0x18
    1444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	9c 8b       	std	Y+20, r25	; 0x14
    144e:	8b 8b       	std	Y+19, r24	; 0x13
    1450:	8b 89       	ldd	r24, Y+19	; 0x13
    1452:	9c 89       	ldd	r25, Y+20	; 0x14
    1454:	98 8b       	std	Y+16, r25	; 0x10
    1456:	8f 87       	std	Y+15, r24	; 0x0f
    1458:	8f 85       	ldd	r24, Y+15	; 0x0f
    145a:	98 89       	ldd	r25, Y+16	; 0x10
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	f1 f7       	brne	.-4      	; 0x145c <LCD_displayCharacter+0x2ec>
    1460:	98 8b       	std	Y+16, r25	; 0x10
    1462:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1464:	a8 e3       	ldi	r26, 0x38	; 56
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e8 e3       	ldi	r30, 0x38	; 56
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	8f 77       	andi	r24, 0x7F	; 127
    1470:	8c 93       	st	X, r24
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	a0 e8       	ldi	r26, 0x80	; 128
    1478:	bf e3       	ldi	r27, 0x3F	; 63
    147a:	8b 87       	std	Y+11, r24	; 0x0b
    147c:	9c 87       	std	Y+12, r25	; 0x0c
    147e:	ad 87       	std	Y+13, r26	; 0x0d
    1480:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1482:	6b 85       	ldd	r22, Y+11	; 0x0b
    1484:	7c 85       	ldd	r23, Y+12	; 0x0c
    1486:	8d 85       	ldd	r24, Y+13	; 0x0d
    1488:	9e 85       	ldd	r25, Y+14	; 0x0e
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	4a ef       	ldi	r20, 0xFA	; 250
    1490:	54 e4       	ldi	r21, 0x44	; 68
    1492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	8f 83       	std	Y+7, r24	; 0x07
    149c:	98 87       	std	Y+8, r25	; 0x08
    149e:	a9 87       	std	Y+9, r26	; 0x09
    14a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14a2:	6f 81       	ldd	r22, Y+7	; 0x07
    14a4:	78 85       	ldd	r23, Y+8	; 0x08
    14a6:	89 85       	ldd	r24, Y+9	; 0x09
    14a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	40 e8       	ldi	r20, 0x80	; 128
    14b0:	5f e3       	ldi	r21, 0x3F	; 63
    14b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14b6:	88 23       	and	r24, r24
    14b8:	2c f4       	brge	.+10     	; 0x14c4 <LCD_displayCharacter+0x354>
		__ticks = 1;
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	9e 83       	std	Y+6, r25	; 0x06
    14c0:	8d 83       	std	Y+5, r24	; 0x05
    14c2:	3f c0       	rjmp	.+126    	; 0x1542 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    14c4:	6f 81       	ldd	r22, Y+7	; 0x07
    14c6:	78 85       	ldd	r23, Y+8	; 0x08
    14c8:	89 85       	ldd	r24, Y+9	; 0x09
    14ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	3f ef       	ldi	r19, 0xFF	; 255
    14d0:	4f e7       	ldi	r20, 0x7F	; 127
    14d2:	57 e4       	ldi	r21, 0x47	; 71
    14d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14d8:	18 16       	cp	r1, r24
    14da:	4c f5       	brge	.+82     	; 0x152e <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    14de:	7c 85       	ldd	r23, Y+12	; 0x0c
    14e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e2       	ldi	r20, 0x20	; 32
    14ea:	51 e4       	ldi	r21, 0x41	; 65
    14ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	bc 01       	movw	r22, r24
    14f6:	cd 01       	movw	r24, r26
    14f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	9e 83       	std	Y+6, r25	; 0x06
    1502:	8d 83       	std	Y+5, r24	; 0x05
    1504:	0f c0       	rjmp	.+30     	; 0x1524 <LCD_displayCharacter+0x3b4>
    1506:	88 ec       	ldi	r24, 0xC8	; 200
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	9c 83       	std	Y+4, r25	; 0x04
    150c:	8b 83       	std	Y+3, r24	; 0x03
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	9c 81       	ldd	r25, Y+4	; 0x04
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	f1 f7       	brne	.-4      	; 0x1512 <LCD_displayCharacter+0x3a2>
    1516:	9c 83       	std	Y+4, r25	; 0x04
    1518:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    151a:	8d 81       	ldd	r24, Y+5	; 0x05
    151c:	9e 81       	ldd	r25, Y+6	; 0x06
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	9e 83       	std	Y+6, r25	; 0x06
    1522:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	9e 81       	ldd	r25, Y+6	; 0x06
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	69 f7       	brne	.-38     	; 0x1506 <LCD_displayCharacter+0x396>
    152c:	14 c0       	rjmp	.+40     	; 0x1556 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    152e:	6f 81       	ldd	r22, Y+7	; 0x07
    1530:	78 85       	ldd	r23, Y+8	; 0x08
    1532:	89 85       	ldd	r24, Y+9	; 0x09
    1534:	9a 85       	ldd	r25, Y+10	; 0x0a
    1536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	9e 83       	std	Y+6, r25	; 0x06
    1540:	8d 83       	std	Y+5, r24	; 0x05
    1542:	8d 81       	ldd	r24, Y+5	; 0x05
    1544:	9e 81       	ldd	r25, Y+6	; 0x06
    1546:	9a 83       	std	Y+2, r25	; 0x02
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	9a 81       	ldd	r25, Y+2	; 0x02
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	f1 f7       	brne	.-4      	; 0x154e <LCD_displayCharacter+0x3de>
    1552:	9a 83       	std	Y+2, r25	; 0x02
    1554:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1556:	e9 96       	adiw	r28, 0x39	; 57
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	de bf       	out	0x3e, r29	; 62
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	cd bf       	out	0x3d, r28	; 61
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	00 d0       	rcall	.+0      	; 0x156e <LCD_displayString+0x6>
    156e:	0f 92       	push	r0
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	9b 83       	std	Y+3, r25	; 0x03
    1576:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1578:	19 82       	std	Y+1, r1	; 0x01
    157a:	0e c0       	rjmp	.+28     	; 0x1598 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	9b 81       	ldd	r25, Y+3	; 0x03
    1586:	fc 01       	movw	r30, r24
    1588:	e2 0f       	add	r30, r18
    158a:	f3 1f       	adc	r31, r19
    158c:	80 81       	ld	r24, Z
    158e:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCD_displayCharacter>
		i++;
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	8f 5f       	subi	r24, 0xFF	; 255
    1596:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	9b 81       	ldd	r25, Y+3	; 0x03
    15a2:	fc 01       	movw	r30, r24
    15a4:	e2 0f       	add	r30, r18
    15a6:	f3 1f       	adc	r31, r19
    15a8:	80 81       	ld	r24, Z
    15aa:	88 23       	and	r24, r24
    15ac:	39 f7       	brne	.-50     	; 0x157c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <LCD_moveCursor>:

void LCD_moveCursor(uint8 row,uint8 col)
{
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <LCD_moveCursor+0x6>
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <LCD_moveCursor+0x8>
    15c2:	0f 92       	push	r0
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	8a 83       	std	Y+2, r24	; 0x02
    15ca:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	3d 83       	std	Y+5, r19	; 0x05
    15d4:	2c 83       	std	Y+4, r18	; 0x04
    15d6:	8c 81       	ldd	r24, Y+4	; 0x04
    15d8:	9d 81       	ldd	r25, Y+5	; 0x05
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	91 05       	cpc	r25, r1
    15de:	c1 f0       	breq	.+48     	; 0x1610 <LCD_moveCursor+0x56>
    15e0:	2c 81       	ldd	r18, Y+4	; 0x04
    15e2:	3d 81       	ldd	r19, Y+5	; 0x05
    15e4:	22 30       	cpi	r18, 0x02	; 2
    15e6:	31 05       	cpc	r19, r1
    15e8:	2c f4       	brge	.+10     	; 0x15f4 <LCD_moveCursor+0x3a>
    15ea:	8c 81       	ldd	r24, Y+4	; 0x04
    15ec:	9d 81       	ldd	r25, Y+5	; 0x05
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	61 f0       	breq	.+24     	; 0x160a <LCD_moveCursor+0x50>
    15f2:	19 c0       	rjmp	.+50     	; 0x1626 <LCD_moveCursor+0x6c>
    15f4:	2c 81       	ldd	r18, Y+4	; 0x04
    15f6:	3d 81       	ldd	r19, Y+5	; 0x05
    15f8:	22 30       	cpi	r18, 0x02	; 2
    15fa:	31 05       	cpc	r19, r1
    15fc:	69 f0       	breq	.+26     	; 0x1618 <LCD_moveCursor+0x5e>
    15fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1600:	9d 81       	ldd	r25, Y+5	; 0x05
    1602:	83 30       	cpi	r24, 0x03	; 3
    1604:	91 05       	cpc	r25, r1
    1606:	61 f0       	breq	.+24     	; 0x1620 <LCD_moveCursor+0x66>
    1608:	0e c0       	rjmp	.+28     	; 0x1626 <LCD_moveCursor+0x6c>
	{
		case 0:
				Address=col;
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	0b c0       	rjmp	.+22     	; 0x1626 <LCD_moveCursor+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	80 5c       	subi	r24, 0xC0	; 192
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	07 c0       	rjmp	.+14     	; 0x1626 <LCD_moveCursor+0x6c>
				break;
		case 2:
				Address=col+0x14;
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	8c 5e       	subi	r24, 0xEC	; 236
    161c:	89 83       	std	Y+1, r24	; 0x01
    161e:	03 c0       	rjmp	.+6      	; 0x1626 <LCD_moveCursor+0x6c>
				break;
		case 3:
				Address=col+0x54;
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	8c 5a       	subi	r24, 0xAC	; 172
    1624:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	80 68       	ori	r24, 0x80	; 128
    162a:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_sendCommand>
}
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	00 d0       	rcall	.+0      	; 0x1644 <LCD_displayStringRowColumn+0x6>
    1644:	00 d0       	rcall	.+0      	; 0x1646 <LCD_displayStringRowColumn+0x8>
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	6a 83       	std	Y+2, r22	; 0x02
    164e:	5c 83       	std	Y+4, r21	; 0x04
    1650:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	6a 81       	ldd	r22, Y+2	; 0x02
    1656:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	9c 81       	ldd	r25, Y+4	; 0x04
    165e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
}
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
    1678:	62 97       	sbiw	r28, 0x12	; 18
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	9a 8b       	std	Y+18, r25	; 0x12
    1686:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    1688:	89 89       	ldd	r24, Y+17	; 0x11
    168a:	9a 89       	ldd	r25, Y+18	; 0x12
    168c:	9e 01       	movw	r18, r28
    168e:	2f 5f       	subi	r18, 0xFF	; 255
    1690:	3f 4f       	sbci	r19, 0xFF	; 255
    1692:	b9 01       	movw	r22, r18
    1694:	4a e0       	ldi	r20, 0x0A	; 10
    1696:	50 e0       	ldi	r21, 0x00	; 0
    1698:	0e 94 20 1c 	call	0x3840	; 0x3840 <itoa>
   LCD_displayString(buff);
    169c:	ce 01       	movw	r24, r28
    169e:	01 96       	adiw	r24, 0x01	; 1
    16a0:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
}
    16a4:	62 96       	adiw	r28, 0x12	; 18
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	f8 94       	cli
    16aa:	de bf       	out	0x3e, r29	; 62
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	cd bf       	out	0x3d, r28	; 61
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_sendCommand>
}
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <main>:
uint8 g_password2[PASSWORD_WIDTH];
uint8 g_tickFlag=0;
uint8 g_holdSystem = HOLD_SYSTEM;

int main(void)
{
    16ca:	0f 93       	push	r16
    16cc:	1f 93       	push	r17
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	cb 5a       	subi	r28, 0xAB	; 171
    16d8:	d0 40       	sbci	r29, 0x00	; 0
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	f8 94       	cli
    16de:	de bf       	out	0x3e, r29	; 62
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	cd bf       	out	0x3d, r28	; 61
	uint8 systemStarting;
	uint8 pass_match;
	uint8 counter;
	uint8 check_EEPROM;
	uint8 decision;
	uint8 danger_error = NO_DANGER;
    16e4:	fe 01       	movw	r30, r28
    16e6:	e2 57       	subi	r30, 0x72	; 114
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	10 82       	st	Z, r1
	uint8 restart_mainProgram = FALSE;
    16ec:	fe 01       	movw	r30, r28
    16ee:	e3 57       	subi	r30, 0x73	; 115
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	10 82       	st	Z, r1

	Timer_ConfigType timer={START_VALUE, COMPARE_VALUE, Timer1, F_CPU_1024, Compare};
    16f4:	ce 01       	movw	r24, r28
    16f6:	8c 56       	subi	r24, 0x6C	; 108
    16f8:	9f 4f       	sbci	r25, 0xFF	; 255
    16fa:	ce 55       	subi	r28, 0x5E	; 94
    16fc:	df 4f       	sbci	r29, 0xFF	; 255
    16fe:	99 83       	std	Y+1, r25	; 0x01
    1700:	88 83       	st	Y, r24
    1702:	c2 5a       	subi	r28, 0xA2	; 162
    1704:	d0 40       	sbci	r29, 0x00	; 0
    1706:	8c e4       	ldi	r24, 0x4C	; 76
    1708:	91 e0       	ldi	r25, 0x01	; 1
    170a:	cc 55       	subi	r28, 0x5C	; 92
    170c:	df 4f       	sbci	r29, 0xFF	; 255
    170e:	99 83       	std	Y+1, r25	; 0x01
    1710:	88 83       	st	Y, r24
    1712:	c4 5a       	subi	r28, 0xA4	; 164
    1714:	d0 40       	sbci	r29, 0x00	; 0
    1716:	9b e0       	ldi	r25, 0x0B	; 11
    1718:	ca 55       	subi	r28, 0x5A	; 90
    171a:	df 4f       	sbci	r29, 0xFF	; 255
    171c:	98 83       	st	Y, r25
    171e:	c6 5a       	subi	r28, 0xA6	; 166
    1720:	d0 40       	sbci	r29, 0x00	; 0
    1722:	cc 55       	subi	r28, 0x5C	; 92
    1724:	df 4f       	sbci	r29, 0xFF	; 255
    1726:	e8 81       	ld	r30, Y
    1728:	f9 81       	ldd	r31, Y+1	; 0x01
    172a:	c4 5a       	subi	r28, 0xA4	; 164
    172c:	d0 40       	sbci	r29, 0x00	; 0
    172e:	00 80       	ld	r0, Z
    1730:	cc 55       	subi	r28, 0x5C	; 92
    1732:	df 4f       	sbci	r29, 0xFF	; 255
    1734:	88 81       	ld	r24, Y
    1736:	99 81       	ldd	r25, Y+1	; 0x01
    1738:	c4 5a       	subi	r28, 0xA4	; 164
    173a:	d0 40       	sbci	r29, 0x00	; 0
    173c:	01 96       	adiw	r24, 0x01	; 1
    173e:	cc 55       	subi	r28, 0x5C	; 92
    1740:	df 4f       	sbci	r29, 0xFF	; 255
    1742:	99 83       	std	Y+1, r25	; 0x01
    1744:	88 83       	st	Y, r24
    1746:	c4 5a       	subi	r28, 0xA4	; 164
    1748:	d0 40       	sbci	r29, 0x00	; 0
    174a:	ce 55       	subi	r28, 0x5E	; 94
    174c:	df 4f       	sbci	r29, 0xFF	; 255
    174e:	e8 81       	ld	r30, Y
    1750:	f9 81       	ldd	r31, Y+1	; 0x01
    1752:	c2 5a       	subi	r28, 0xA2	; 162
    1754:	d0 40       	sbci	r29, 0x00	; 0
    1756:	00 82       	st	Z, r0
    1758:	ce 55       	subi	r28, 0x5E	; 94
    175a:	df 4f       	sbci	r29, 0xFF	; 255
    175c:	88 81       	ld	r24, Y
    175e:	99 81       	ldd	r25, Y+1	; 0x01
    1760:	c2 5a       	subi	r28, 0xA2	; 162
    1762:	d0 40       	sbci	r29, 0x00	; 0
    1764:	01 96       	adiw	r24, 0x01	; 1
    1766:	ce 55       	subi	r28, 0x5E	; 94
    1768:	df 4f       	sbci	r29, 0xFF	; 255
    176a:	99 83       	std	Y+1, r25	; 0x01
    176c:	88 83       	st	Y, r24
    176e:	c2 5a       	subi	r28, 0xA2	; 162
    1770:	d0 40       	sbci	r29, 0x00	; 0
    1772:	ca 55       	subi	r28, 0x5A	; 90
    1774:	df 4f       	sbci	r29, 0xFF	; 255
    1776:	98 81       	ld	r25, Y
    1778:	c6 5a       	subi	r28, 0xA6	; 166
    177a:	d0 40       	sbci	r29, 0x00	; 0
    177c:	91 50       	subi	r25, 0x01	; 1
    177e:	ca 55       	subi	r28, 0x5A	; 90
    1780:	df 4f       	sbci	r29, 0xFF	; 255
    1782:	98 83       	st	Y, r25
    1784:	c6 5a       	subi	r28, 0xA6	; 166
    1786:	d0 40       	sbci	r29, 0x00	; 0
    1788:	ca 55       	subi	r28, 0x5A	; 90
    178a:	df 4f       	sbci	r29, 0xFF	; 255
    178c:	e8 81       	ld	r30, Y
    178e:	c6 5a       	subi	r28, 0xA6	; 166
    1790:	d0 40       	sbci	r29, 0x00	; 0
    1792:	ee 23       	and	r30, r30
    1794:	31 f6       	brne	.-116    	; 0x1722 <main+0x58>

	UART_config uart = {BIT_8, DISABLE, STOP_BIT_1};
    1796:	ce 01       	movw	r24, r28
    1798:	81 56       	subi	r24, 0x61	; 97
    179a:	9f 4f       	sbci	r25, 0xFF	; 255
    179c:	c9 55       	subi	r28, 0x59	; 89
    179e:	df 4f       	sbci	r29, 0xFF	; 255
    17a0:	99 83       	std	Y+1, r25	; 0x01
    17a2:	88 83       	st	Y, r24
    17a4:	c7 5a       	subi	r28, 0xA7	; 167
    17a6:	d0 40       	sbci	r29, 0x00	; 0
    17a8:	89 e4       	ldi	r24, 0x49	; 73
    17aa:	91 e0       	ldi	r25, 0x01	; 1
    17ac:	c7 55       	subi	r28, 0x57	; 87
    17ae:	df 4f       	sbci	r29, 0xFF	; 255
    17b0:	99 83       	std	Y+1, r25	; 0x01
    17b2:	88 83       	st	Y, r24
    17b4:	c9 5a       	subi	r28, 0xA9	; 169
    17b6:	d0 40       	sbci	r29, 0x00	; 0
    17b8:	93 e0       	ldi	r25, 0x03	; 3
    17ba:	c5 55       	subi	r28, 0x55	; 85
    17bc:	df 4f       	sbci	r29, 0xFF	; 255
    17be:	98 83       	st	Y, r25
    17c0:	cb 5a       	subi	r28, 0xAB	; 171
    17c2:	d0 40       	sbci	r29, 0x00	; 0
    17c4:	c7 55       	subi	r28, 0x57	; 87
    17c6:	df 4f       	sbci	r29, 0xFF	; 255
    17c8:	e8 81       	ld	r30, Y
    17ca:	f9 81       	ldd	r31, Y+1	; 0x01
    17cc:	c9 5a       	subi	r28, 0xA9	; 169
    17ce:	d0 40       	sbci	r29, 0x00	; 0
    17d0:	00 80       	ld	r0, Z
    17d2:	c7 55       	subi	r28, 0x57	; 87
    17d4:	df 4f       	sbci	r29, 0xFF	; 255
    17d6:	88 81       	ld	r24, Y
    17d8:	99 81       	ldd	r25, Y+1	; 0x01
    17da:	c9 5a       	subi	r28, 0xA9	; 169
    17dc:	d0 40       	sbci	r29, 0x00	; 0
    17de:	01 96       	adiw	r24, 0x01	; 1
    17e0:	c7 55       	subi	r28, 0x57	; 87
    17e2:	df 4f       	sbci	r29, 0xFF	; 255
    17e4:	99 83       	std	Y+1, r25	; 0x01
    17e6:	88 83       	st	Y, r24
    17e8:	c9 5a       	subi	r28, 0xA9	; 169
    17ea:	d0 40       	sbci	r29, 0x00	; 0
    17ec:	c9 55       	subi	r28, 0x59	; 89
    17ee:	df 4f       	sbci	r29, 0xFF	; 255
    17f0:	e8 81       	ld	r30, Y
    17f2:	f9 81       	ldd	r31, Y+1	; 0x01
    17f4:	c7 5a       	subi	r28, 0xA7	; 167
    17f6:	d0 40       	sbci	r29, 0x00	; 0
    17f8:	00 82       	st	Z, r0
    17fa:	c9 55       	subi	r28, 0x59	; 89
    17fc:	df 4f       	sbci	r29, 0xFF	; 255
    17fe:	88 81       	ld	r24, Y
    1800:	99 81       	ldd	r25, Y+1	; 0x01
    1802:	c7 5a       	subi	r28, 0xA7	; 167
    1804:	d0 40       	sbci	r29, 0x00	; 0
    1806:	01 96       	adiw	r24, 0x01	; 1
    1808:	c9 55       	subi	r28, 0x59	; 89
    180a:	df 4f       	sbci	r29, 0xFF	; 255
    180c:	99 83       	std	Y+1, r25	; 0x01
    180e:	88 83       	st	Y, r24
    1810:	c7 5a       	subi	r28, 0xA7	; 167
    1812:	d0 40       	sbci	r29, 0x00	; 0
    1814:	c5 55       	subi	r28, 0x55	; 85
    1816:	df 4f       	sbci	r29, 0xFF	; 255
    1818:	98 81       	ld	r25, Y
    181a:	cb 5a       	subi	r28, 0xAB	; 171
    181c:	d0 40       	sbci	r29, 0x00	; 0
    181e:	91 50       	subi	r25, 0x01	; 1
    1820:	c5 55       	subi	r28, 0x55	; 85
    1822:	df 4f       	sbci	r29, 0xFF	; 255
    1824:	98 83       	st	Y, r25
    1826:	cb 5a       	subi	r28, 0xAB	; 171
    1828:	d0 40       	sbci	r29, 0x00	; 0
    182a:	c5 55       	subi	r28, 0x55	; 85
    182c:	df 4f       	sbci	r29, 0xFF	; 255
    182e:	e8 81       	ld	r30, Y
    1830:	cb 5a       	subi	r28, 0xAB	; 171
    1832:	d0 40       	sbci	r29, 0x00	; 0
    1834:	ee 23       	and	r30, r30
    1836:	31 f6       	brne	.-116    	; 0x17c4 <main+0xfa>
	UART_init(&uart);
    1838:	ce 01       	movw	r24, r28
    183a:	81 56       	subi	r24, 0x61	; 97
    183c:	9f 4f       	sbci	r25, 0xFF	; 255
    183e:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <UART_init>
	SREG |= (1<<7);
    1842:	af e5       	ldi	r26, 0x5F	; 95
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	ef e5       	ldi	r30, 0x5F	; 95
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	80 68       	ori	r24, 0x80	; 128
    184e:	8c 93       	st	X, r24

	LCD_init();
    1850:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCD_init>

	UART_sendByte(ECU_READY);
    1854:	80 e1       	ldi	r24, 0x10	; 16
    1856:	0e 94 57 1b 	call	0x36ae	; 0x36ae <UART_sendByte>
	systemStarting= UART_recieveByte();
    185a:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <UART_recieveByte>
    185e:	fe 01       	movw	r30, r28
    1860:	ed 56       	subi	r30, 0x6D	; 109
    1862:	ff 4f       	sbci	r31, 0xFF	; 255
    1864:	80 83       	st	Z, r24

	/* For the First Login Only: */
	if (systemStarting == FIRST_TIME_TO_LOG_IN)
    1866:	fe 01       	movw	r30, r28
    1868:	ed 56       	subi	r30, 0x6D	; 109
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	80 81       	ld	r24, Z
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	09 f0       	breq	.+2      	; 0x1874 <main+0x1aa>
    1872:	75 c2       	rjmp	.+1258   	; 0x1d5e <main+0x694>
	{
		do
		{
			start_System();
    1874:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <start_System>
			pass_match = checkPass(g_password1, g_password2);
    1878:	8d e5       	ldi	r24, 0x5D	; 93
    187a:	91 e0       	ldi	r25, 0x01	; 1
    187c:	21 e6       	ldi	r18, 0x61	; 97
    187e:	31 e0       	ldi	r19, 0x01	; 1
    1880:	b9 01       	movw	r22, r18
    1882:	0e 94 a7 14 	call	0x294e	; 0x294e <checkPass>
    1886:	fe 01       	movw	r30, r28
    1888:	ee 56       	subi	r30, 0x6E	; 110
    188a:	ff 4f       	sbci	r31, 0xFF	; 255
    188c:	80 83       	st	Z, r24
			if(pass_match == MISMATCH)
    188e:	fe 01       	movw	r30, r28
    1890:	ee 56       	subi	r30, 0x6E	; 110
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	80 81       	ld	r24, Z
    1896:	81 30       	cpi	r24, 0x01	; 1
    1898:	09 f0       	breq	.+2      	; 0x189c <main+0x1d2>
    189a:	bd c0       	rjmp	.+378    	; 0x1a16 <main+0x34c>
			{
				LCD_clearScreen();
    189c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"Mismatch passwords");
    18a0:	20 e6       	ldi	r18, 0x60	; 96
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	60 e0       	ldi	r22, 0x00	; 0
    18a8:	a9 01       	movw	r20, r18
    18aa:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>
    18ae:	fe 01       	movw	r30, r28
    18b0:	e7 57       	subi	r30, 0x77	; 119
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	aa e7       	ldi	r26, 0x7A	; 122
    18ba:	b4 e4       	ldi	r27, 0x44	; 68
    18bc:	80 83       	st	Z, r24
    18be:	91 83       	std	Z+1, r25	; 0x01
    18c0:	a2 83       	std	Z+2, r26	; 0x02
    18c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c4:	8e 01       	movw	r16, r28
    18c6:	0b 57       	subi	r16, 0x7B	; 123
    18c8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ca:	fe 01       	movw	r30, r28
    18cc:	e7 57       	subi	r30, 0x77	; 119
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	60 81       	ld	r22, Z
    18d2:	71 81       	ldd	r23, Z+1	; 0x01
    18d4:	82 81       	ldd	r24, Z+2	; 0x02
    18d6:	93 81       	ldd	r25, Z+3	; 0x03
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	4a ef       	ldi	r20, 0xFA	; 250
    18de:	54 e4       	ldi	r21, 0x44	; 68
    18e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	f8 01       	movw	r30, r16
    18ea:	80 83       	st	Z, r24
    18ec:	91 83       	std	Z+1, r25	; 0x01
    18ee:	a2 83       	std	Z+2, r26	; 0x02
    18f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18f2:	fe 01       	movw	r30, r28
    18f4:	eb 57       	subi	r30, 0x7B	; 123
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	60 81       	ld	r22, Z
    18fa:	71 81       	ldd	r23, Z+1	; 0x01
    18fc:	82 81       	ldd	r24, Z+2	; 0x02
    18fe:	93 81       	ldd	r25, Z+3	; 0x03
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	40 e8       	ldi	r20, 0x80	; 128
    1906:	5f e3       	ldi	r21, 0x3F	; 63
    1908:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    190c:	88 23       	and	r24, r24
    190e:	44 f4       	brge	.+16     	; 0x1920 <main+0x256>
		__ticks = 1;
    1910:	fe 01       	movw	r30, r28
    1912:	ed 57       	subi	r30, 0x7D	; 125
    1914:	ff 4f       	sbci	r31, 0xFF	; 255
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	91 83       	std	Z+1, r25	; 0x01
    191c:	80 83       	st	Z, r24
    191e:	64 c0       	rjmp	.+200    	; 0x19e8 <main+0x31e>
	else if (__tmp > 65535)
    1920:	fe 01       	movw	r30, r28
    1922:	eb 57       	subi	r30, 0x7B	; 123
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	60 81       	ld	r22, Z
    1928:	71 81       	ldd	r23, Z+1	; 0x01
    192a:	82 81       	ldd	r24, Z+2	; 0x02
    192c:	93 81       	ldd	r25, Z+3	; 0x03
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	3f ef       	ldi	r19, 0xFF	; 255
    1932:	4f e7       	ldi	r20, 0x7F	; 127
    1934:	57 e4       	ldi	r21, 0x47	; 71
    1936:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    193a:	18 16       	cp	r1, r24
    193c:	0c f0       	brlt	.+2      	; 0x1940 <main+0x276>
    193e:	43 c0       	rjmp	.+134    	; 0x19c6 <main+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1940:	fe 01       	movw	r30, r28
    1942:	e7 57       	subi	r30, 0x77	; 119
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	60 81       	ld	r22, Z
    1948:	71 81       	ldd	r23, Z+1	; 0x01
    194a:	82 81       	ldd	r24, Z+2	; 0x02
    194c:	93 81       	ldd	r25, Z+3	; 0x03
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	40 e2       	ldi	r20, 0x20	; 32
    1954:	51 e4       	ldi	r21, 0x41	; 65
    1956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	8e 01       	movw	r16, r28
    1960:	0d 57       	subi	r16, 0x7D	; 125
    1962:	1f 4f       	sbci	r17, 0xFF	; 255
    1964:	bc 01       	movw	r22, r24
    1966:	cd 01       	movw	r24, r26
    1968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	f8 01       	movw	r30, r16
    1972:	91 83       	std	Z+1, r25	; 0x01
    1974:	80 83       	st	Z, r24
    1976:	1f c0       	rjmp	.+62     	; 0x19b6 <main+0x2ec>
    1978:	fe 01       	movw	r30, r28
    197a:	ef 57       	subi	r30, 0x7F	; 127
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	88 ec       	ldi	r24, 0xC8	; 200
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	91 83       	std	Z+1, r25	; 0x01
    1984:	80 83       	st	Z, r24
    1986:	fe 01       	movw	r30, r28
    1988:	ef 57       	subi	r30, 0x7F	; 127
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	80 81       	ld	r24, Z
    198e:	91 81       	ldd	r25, Z+1	; 0x01
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <main+0x2c6>
    1994:	fe 01       	movw	r30, r28
    1996:	ef 57       	subi	r30, 0x7F	; 127
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	91 83       	std	Z+1, r25	; 0x01
    199c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199e:	de 01       	movw	r26, r28
    19a0:	ad 57       	subi	r26, 0x7D	; 125
    19a2:	bf 4f       	sbci	r27, 0xFF	; 255
    19a4:	fe 01       	movw	r30, r28
    19a6:	ed 57       	subi	r30, 0x7D	; 125
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	80 81       	ld	r24, Z
    19ac:	91 81       	ldd	r25, Z+1	; 0x01
    19ae:	01 97       	sbiw	r24, 0x01	; 1
    19b0:	11 96       	adiw	r26, 0x01	; 1
    19b2:	9c 93       	st	X, r25
    19b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b6:	fe 01       	movw	r30, r28
    19b8:	ed 57       	subi	r30, 0x7D	; 125
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	80 81       	ld	r24, Z
    19be:	91 81       	ldd	r25, Z+1	; 0x01
    19c0:	00 97       	sbiw	r24, 0x00	; 0
    19c2:	d1 f6       	brne	.-76     	; 0x1978 <main+0x2ae>
    19c4:	28 c0       	rjmp	.+80     	; 0x1a16 <main+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c6:	8e 01       	movw	r16, r28
    19c8:	0d 57       	subi	r16, 0x7D	; 125
    19ca:	1f 4f       	sbci	r17, 0xFF	; 255
    19cc:	fe 01       	movw	r30, r28
    19ce:	eb 57       	subi	r30, 0x7B	; 123
    19d0:	ff 4f       	sbci	r31, 0xFF	; 255
    19d2:	60 81       	ld	r22, Z
    19d4:	71 81       	ldd	r23, Z+1	; 0x01
    19d6:	82 81       	ldd	r24, Z+2	; 0x02
    19d8:	93 81       	ldd	r25, Z+3	; 0x03
    19da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	f8 01       	movw	r30, r16
    19e4:	91 83       	std	Z+1, r25	; 0x01
    19e6:	80 83       	st	Z, r24
    19e8:	de 01       	movw	r26, r28
    19ea:	a1 58       	subi	r26, 0x81	; 129
    19ec:	bf 4f       	sbci	r27, 0xFF	; 255
    19ee:	fe 01       	movw	r30, r28
    19f0:	ed 57       	subi	r30, 0x7D	; 125
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	80 81       	ld	r24, Z
    19f6:	91 81       	ldd	r25, Z+1	; 0x01
    19f8:	11 96       	adiw	r26, 0x01	; 1
    19fa:	9c 93       	st	X, r25
    19fc:	8e 93       	st	-X, r24
    19fe:	fe 01       	movw	r30, r28
    1a00:	e1 58       	subi	r30, 0x81	; 129
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	80 81       	ld	r24, Z
    1a06:	91 81       	ldd	r25, Z+1	; 0x01
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	f1 f7       	brne	.-4      	; 0x1a08 <main+0x33e>
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	e1 58       	subi	r30, 0x81	; 129
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	91 83       	std	Z+1, r25	; 0x01
    1a14:	80 83       	st	Z, r24
				_delay_ms(1000);
			}
		}while(pass_match == MISMATCH);
    1a16:	fe 01       	movw	r30, r28
    1a18:	ee 56       	subi	r30, 0x6E	; 110
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	80 81       	ld	r24, Z
    1a1e:	81 30       	cpi	r24, 0x01	; 1
    1a20:	09 f4       	brne	.+2      	; 0x1a24 <main+0x35a>
    1a22:	28 cf       	rjmp	.-432    	; 0x1874 <main+0x1aa>

		if(pass_match == MATCH)
    1a24:	fe 01       	movw	r30, r28
    1a26:	ee 56       	subi	r30, 0x6E	; 110
    1a28:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2a:	80 81       	ld	r24, Z
    1a2c:	88 23       	and	r24, r24
    1a2e:	09 f0       	breq	.+2      	; 0x1a32 <main+0x368>
    1a30:	96 c1       	rjmp	.+812    	; 0x1d5e <main+0x694>
		{
			for(counter = INITIAL_VALUE; counter< PASSWORD_WIDTH; counter++)
    1a32:	fe 01       	movw	r30, r28
    1a34:	ef 56       	subi	r30, 0x6F	; 111
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	10 82       	st	Z, r1
    1a3a:	cc c0       	rjmp	.+408    	; 0x1bd4 <main+0x50a>
			{
				while(UART_recieveByte() != ECU_READY){}
    1a3c:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <UART_recieveByte>
    1a40:	80 31       	cpi	r24, 0x10	; 16
    1a42:	e1 f7       	brne	.-8      	; 0x1a3c <main+0x372>
				UART_sendByte(g_password1[counter]);
    1a44:	fe 01       	movw	r30, r28
    1a46:	ef 56       	subi	r30, 0x6F	; 111
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	80 81       	ld	r24, Z
    1a4c:	88 2f       	mov	r24, r24
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	fc 01       	movw	r30, r24
    1a52:	e3 5a       	subi	r30, 0xA3	; 163
    1a54:	fe 4f       	sbci	r31, 0xFE	; 254
    1a56:	80 81       	ld	r24, Z
    1a58:	0e 94 57 1b 	call	0x36ae	; 0x36ae <UART_sendByte>
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	e5 58       	subi	r30, 0x85	; 133
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	a0 ea       	ldi	r26, 0xA0	; 160
    1a68:	b2 e4       	ldi	r27, 0x42	; 66
    1a6a:	80 83       	st	Z, r24
    1a6c:	91 83       	std	Z+1, r25	; 0x01
    1a6e:	a2 83       	std	Z+2, r26	; 0x02
    1a70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a72:	8e 01       	movw	r16, r28
    1a74:	09 58       	subi	r16, 0x89	; 137
    1a76:	1f 4f       	sbci	r17, 0xFF	; 255
    1a78:	fe 01       	movw	r30, r28
    1a7a:	e5 58       	subi	r30, 0x85	; 133
    1a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7e:	60 81       	ld	r22, Z
    1a80:	71 81       	ldd	r23, Z+1	; 0x01
    1a82:	82 81       	ldd	r24, Z+2	; 0x02
    1a84:	93 81       	ldd	r25, Z+3	; 0x03
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	4a ef       	ldi	r20, 0xFA	; 250
    1a8c:	54 e4       	ldi	r21, 0x44	; 68
    1a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	f8 01       	movw	r30, r16
    1a98:	80 83       	st	Z, r24
    1a9a:	91 83       	std	Z+1, r25	; 0x01
    1a9c:	a2 83       	std	Z+2, r26	; 0x02
    1a9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	e9 58       	subi	r30, 0x89	; 137
    1aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa6:	60 81       	ld	r22, Z
    1aa8:	71 81       	ldd	r23, Z+1	; 0x01
    1aaa:	82 81       	ldd	r24, Z+2	; 0x02
    1aac:	93 81       	ldd	r25, Z+3	; 0x03
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	40 e8       	ldi	r20, 0x80	; 128
    1ab4:	5f e3       	ldi	r21, 0x3F	; 63
    1ab6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aba:	88 23       	and	r24, r24
    1abc:	44 f4       	brge	.+16     	; 0x1ace <main+0x404>
		__ticks = 1;
    1abe:	fe 01       	movw	r30, r28
    1ac0:	eb 58       	subi	r30, 0x8B	; 139
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	91 83       	std	Z+1, r25	; 0x01
    1aca:	80 83       	st	Z, r24
    1acc:	64 c0       	rjmp	.+200    	; 0x1b96 <main+0x4cc>
	else if (__tmp > 65535)
    1ace:	fe 01       	movw	r30, r28
    1ad0:	e9 58       	subi	r30, 0x89	; 137
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	60 81       	ld	r22, Z
    1ad6:	71 81       	ldd	r23, Z+1	; 0x01
    1ad8:	82 81       	ldd	r24, Z+2	; 0x02
    1ada:	93 81       	ldd	r25, Z+3	; 0x03
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	3f ef       	ldi	r19, 0xFF	; 255
    1ae0:	4f e7       	ldi	r20, 0x7F	; 127
    1ae2:	57 e4       	ldi	r21, 0x47	; 71
    1ae4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ae8:	18 16       	cp	r1, r24
    1aea:	0c f0       	brlt	.+2      	; 0x1aee <main+0x424>
    1aec:	43 c0       	rjmp	.+134    	; 0x1b74 <main+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aee:	fe 01       	movw	r30, r28
    1af0:	e5 58       	subi	r30, 0x85	; 133
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	60 81       	ld	r22, Z
    1af6:	71 81       	ldd	r23, Z+1	; 0x01
    1af8:	82 81       	ldd	r24, Z+2	; 0x02
    1afa:	93 81       	ldd	r25, Z+3	; 0x03
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	40 e2       	ldi	r20, 0x20	; 32
    1b02:	51 e4       	ldi	r21, 0x41	; 65
    1b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	8e 01       	movw	r16, r28
    1b0e:	0b 58       	subi	r16, 0x8B	; 139
    1b10:	1f 4f       	sbci	r17, 0xFF	; 255
    1b12:	bc 01       	movw	r22, r24
    1b14:	cd 01       	movw	r24, r26
    1b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	f8 01       	movw	r30, r16
    1b20:	91 83       	std	Z+1, r25	; 0x01
    1b22:	80 83       	st	Z, r24
    1b24:	1f c0       	rjmp	.+62     	; 0x1b64 <main+0x49a>
    1b26:	fe 01       	movw	r30, r28
    1b28:	ed 58       	subi	r30, 0x8D	; 141
    1b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2c:	88 ec       	ldi	r24, 0xC8	; 200
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	91 83       	std	Z+1, r25	; 0x01
    1b32:	80 83       	st	Z, r24
    1b34:	fe 01       	movw	r30, r28
    1b36:	ed 58       	subi	r30, 0x8D	; 141
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3a:	80 81       	ld	r24, Z
    1b3c:	91 81       	ldd	r25, Z+1	; 0x01
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	f1 f7       	brne	.-4      	; 0x1b3e <main+0x474>
    1b42:	fe 01       	movw	r30, r28
    1b44:	ed 58       	subi	r30, 0x8D	; 141
    1b46:	ff 4f       	sbci	r31, 0xFF	; 255
    1b48:	91 83       	std	Z+1, r25	; 0x01
    1b4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4c:	de 01       	movw	r26, r28
    1b4e:	ab 58       	subi	r26, 0x8B	; 139
    1b50:	bf 4f       	sbci	r27, 0xFF	; 255
    1b52:	fe 01       	movw	r30, r28
    1b54:	eb 58       	subi	r30, 0x8B	; 139
    1b56:	ff 4f       	sbci	r31, 0xFF	; 255
    1b58:	80 81       	ld	r24, Z
    1b5a:	91 81       	ldd	r25, Z+1	; 0x01
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	11 96       	adiw	r26, 0x01	; 1
    1b60:	9c 93       	st	X, r25
    1b62:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b64:	fe 01       	movw	r30, r28
    1b66:	eb 58       	subi	r30, 0x8B	; 139
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	80 81       	ld	r24, Z
    1b6c:	91 81       	ldd	r25, Z+1	; 0x01
    1b6e:	00 97       	sbiw	r24, 0x00	; 0
    1b70:	d1 f6       	brne	.-76     	; 0x1b26 <main+0x45c>
    1b72:	27 c0       	rjmp	.+78     	; 0x1bc2 <main+0x4f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b74:	8e 01       	movw	r16, r28
    1b76:	0b 58       	subi	r16, 0x8B	; 139
    1b78:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7a:	fe 01       	movw	r30, r28
    1b7c:	e9 58       	subi	r30, 0x89	; 137
    1b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b80:	60 81       	ld	r22, Z
    1b82:	71 81       	ldd	r23, Z+1	; 0x01
    1b84:	82 81       	ldd	r24, Z+2	; 0x02
    1b86:	93 81       	ldd	r25, Z+3	; 0x03
    1b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	f8 01       	movw	r30, r16
    1b92:	91 83       	std	Z+1, r25	; 0x01
    1b94:	80 83       	st	Z, r24
    1b96:	de 01       	movw	r26, r28
    1b98:	af 58       	subi	r26, 0x8F	; 143
    1b9a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	eb 58       	subi	r30, 0x8B	; 139
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	80 81       	ld	r24, Z
    1ba4:	91 81       	ldd	r25, Z+1	; 0x01
    1ba6:	8d 93       	st	X+, r24
    1ba8:	9c 93       	st	X, r25
    1baa:	fe 01       	movw	r30, r28
    1bac:	ef 58       	subi	r30, 0x8F	; 143
    1bae:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb0:	80 81       	ld	r24, Z
    1bb2:	91 81       	ldd	r25, Z+1	; 0x01
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	f1 f7       	brne	.-4      	; 0x1bb4 <main+0x4ea>
    1bb8:	fe 01       	movw	r30, r28
    1bba:	ef 58       	subi	r30, 0x8F	; 143
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	91 83       	std	Z+1, r25	; 0x01
    1bc0:	80 83       	st	Z, r24
			}
		}while(pass_match == MISMATCH);

		if(pass_match == MATCH)
		{
			for(counter = INITIAL_VALUE; counter< PASSWORD_WIDTH; counter++)
    1bc2:	de 01       	movw	r26, r28
    1bc4:	af 56       	subi	r26, 0x6F	; 111
    1bc6:	bf 4f       	sbci	r27, 0xFF	; 255
    1bc8:	fe 01       	movw	r30, r28
    1bca:	ef 56       	subi	r30, 0x6F	; 111
    1bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bce:	80 81       	ld	r24, Z
    1bd0:	8f 5f       	subi	r24, 0xFF	; 255
    1bd2:	8c 93       	st	X, r24
    1bd4:	fe 01       	movw	r30, r28
    1bd6:	ef 56       	subi	r30, 0x6F	; 111
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	80 81       	ld	r24, Z
    1bdc:	84 30       	cpi	r24, 0x04	; 4
    1bde:	08 f4       	brcc	.+2      	; 0x1be2 <main+0x518>
    1be0:	2d cf       	rjmp	.-422    	; 0x1a3c <main+0x372>
			{
				while(UART_recieveByte() != ECU_READY){}
				UART_sendByte(g_password1[counter]);
				_delay_ms(80);
			}
			LCD_clearScreen();
    1be2:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Password saved");
    1be6:	23 e7       	ldi	r18, 0x73	; 115
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	60 e0       	ldi	r22, 0x00	; 0
    1bee:	a9 01       	movw	r20, r18
    1bf0:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	e3 59       	subi	r30, 0x93	; 147
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	aa e7       	ldi	r26, 0x7A	; 122
    1c00:	b4 e4       	ldi	r27, 0x44	; 68
    1c02:	80 83       	st	Z, r24
    1c04:	91 83       	std	Z+1, r25	; 0x01
    1c06:	a2 83       	std	Z+2, r26	; 0x02
    1c08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c0a:	8e 01       	movw	r16, r28
    1c0c:	07 59       	subi	r16, 0x97	; 151
    1c0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c10:	fe 01       	movw	r30, r28
    1c12:	e3 59       	subi	r30, 0x93	; 147
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	60 81       	ld	r22, Z
    1c18:	71 81       	ldd	r23, Z+1	; 0x01
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	93 81       	ldd	r25, Z+3	; 0x03
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	4a ef       	ldi	r20, 0xFA	; 250
    1c24:	54 e4       	ldi	r21, 0x44	; 68
    1c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	f8 01       	movw	r30, r16
    1c30:	80 83       	st	Z, r24
    1c32:	91 83       	std	Z+1, r25	; 0x01
    1c34:	a2 83       	std	Z+2, r26	; 0x02
    1c36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c38:	fe 01       	movw	r30, r28
    1c3a:	e7 59       	subi	r30, 0x97	; 151
    1c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3e:	60 81       	ld	r22, Z
    1c40:	71 81       	ldd	r23, Z+1	; 0x01
    1c42:	82 81       	ldd	r24, Z+2	; 0x02
    1c44:	93 81       	ldd	r25, Z+3	; 0x03
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	40 e8       	ldi	r20, 0x80	; 128
    1c4c:	5f e3       	ldi	r21, 0x3F	; 63
    1c4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c52:	88 23       	and	r24, r24
    1c54:	44 f4       	brge	.+16     	; 0x1c66 <main+0x59c>
		__ticks = 1;
    1c56:	fe 01       	movw	r30, r28
    1c58:	e9 59       	subi	r30, 0x99	; 153
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	91 83       	std	Z+1, r25	; 0x01
    1c62:	80 83       	st	Z, r24
    1c64:	64 c0       	rjmp	.+200    	; 0x1d2e <main+0x664>
	else if (__tmp > 65535)
    1c66:	fe 01       	movw	r30, r28
    1c68:	e7 59       	subi	r30, 0x97	; 151
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	60 81       	ld	r22, Z
    1c6e:	71 81       	ldd	r23, Z+1	; 0x01
    1c70:	82 81       	ldd	r24, Z+2	; 0x02
    1c72:	93 81       	ldd	r25, Z+3	; 0x03
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	3f ef       	ldi	r19, 0xFF	; 255
    1c78:	4f e7       	ldi	r20, 0x7F	; 127
    1c7a:	57 e4       	ldi	r21, 0x47	; 71
    1c7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c80:	18 16       	cp	r1, r24
    1c82:	0c f0       	brlt	.+2      	; 0x1c86 <main+0x5bc>
    1c84:	43 c0       	rjmp	.+134    	; 0x1d0c <main+0x642>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c86:	fe 01       	movw	r30, r28
    1c88:	e3 59       	subi	r30, 0x93	; 147
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	60 81       	ld	r22, Z
    1c8e:	71 81       	ldd	r23, Z+1	; 0x01
    1c90:	82 81       	ldd	r24, Z+2	; 0x02
    1c92:	93 81       	ldd	r25, Z+3	; 0x03
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	40 e2       	ldi	r20, 0x20	; 32
    1c9a:	51 e4       	ldi	r21, 0x41	; 65
    1c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	8e 01       	movw	r16, r28
    1ca6:	09 59       	subi	r16, 0x99	; 153
    1ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    1caa:	bc 01       	movw	r22, r24
    1cac:	cd 01       	movw	r24, r26
    1cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	f8 01       	movw	r30, r16
    1cb8:	91 83       	std	Z+1, r25	; 0x01
    1cba:	80 83       	st	Z, r24
    1cbc:	1f c0       	rjmp	.+62     	; 0x1cfc <main+0x632>
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	eb 59       	subi	r30, 0x9B	; 155
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	88 ec       	ldi	r24, 0xC8	; 200
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	91 83       	std	Z+1, r25	; 0x01
    1cca:	80 83       	st	Z, r24
    1ccc:	fe 01       	movw	r30, r28
    1cce:	eb 59       	subi	r30, 0x9B	; 155
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	80 81       	ld	r24, Z
    1cd4:	91 81       	ldd	r25, Z+1	; 0x01
    1cd6:	01 97       	sbiw	r24, 0x01	; 1
    1cd8:	f1 f7       	brne	.-4      	; 0x1cd6 <main+0x60c>
    1cda:	fe 01       	movw	r30, r28
    1cdc:	eb 59       	subi	r30, 0x9B	; 155
    1cde:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce0:	91 83       	std	Z+1, r25	; 0x01
    1ce2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce4:	de 01       	movw	r26, r28
    1ce6:	a9 59       	subi	r26, 0x99	; 153
    1ce8:	bf 4f       	sbci	r27, 0xFF	; 255
    1cea:	fe 01       	movw	r30, r28
    1cec:	e9 59       	subi	r30, 0x99	; 153
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	80 81       	ld	r24, Z
    1cf2:	91 81       	ldd	r25, Z+1	; 0x01
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	11 96       	adiw	r26, 0x01	; 1
    1cf8:	9c 93       	st	X, r25
    1cfa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	e9 59       	subi	r30, 0x99	; 153
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	80 81       	ld	r24, Z
    1d04:	91 81       	ldd	r25, Z+1	; 0x01
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	d1 f6       	brne	.-76     	; 0x1cbe <main+0x5f4>
    1d0a:	27 c0       	rjmp	.+78     	; 0x1d5a <main+0x690>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0c:	8e 01       	movw	r16, r28
    1d0e:	09 59       	subi	r16, 0x99	; 153
    1d10:	1f 4f       	sbci	r17, 0xFF	; 255
    1d12:	fe 01       	movw	r30, r28
    1d14:	e7 59       	subi	r30, 0x97	; 151
    1d16:	ff 4f       	sbci	r31, 0xFF	; 255
    1d18:	60 81       	ld	r22, Z
    1d1a:	71 81       	ldd	r23, Z+1	; 0x01
    1d1c:	82 81       	ldd	r24, Z+2	; 0x02
    1d1e:	93 81       	ldd	r25, Z+3	; 0x03
    1d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	f8 01       	movw	r30, r16
    1d2a:	91 83       	std	Z+1, r25	; 0x01
    1d2c:	80 83       	st	Z, r24
    1d2e:	de 01       	movw	r26, r28
    1d30:	ad 59       	subi	r26, 0x9D	; 157
    1d32:	bf 4f       	sbci	r27, 0xFF	; 255
    1d34:	fe 01       	movw	r30, r28
    1d36:	e9 59       	subi	r30, 0x99	; 153
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	80 81       	ld	r24, Z
    1d3c:	91 81       	ldd	r25, Z+1	; 0x01
    1d3e:	8d 93       	st	X+, r24
    1d40:	9c 93       	st	X, r25
    1d42:	fe 01       	movw	r30, r28
    1d44:	ed 59       	subi	r30, 0x9D	; 157
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	80 81       	ld	r24, Z
    1d4a:	91 81       	ldd	r25, Z+1	; 0x01
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	f1 f7       	brne	.-4      	; 0x1d4c <main+0x682>
    1d50:	fe 01       	movw	r30, r28
    1d52:	ed 59       	subi	r30, 0x9D	; 157
    1d54:	ff 4f       	sbci	r31, 0xFF	; 255
    1d56:	91 83       	std	Z+1, r25	; 0x01
    1d58:	80 83       	st	Z, r24
			_delay_ms(1000);
			LCD_clearScreen();
    1d5a:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
	}

	/* For every other logins */
	while(1)
	{
		decision = mainOptions();
    1d5e:	0e 94 fd 13 	call	0x27fa	; 0x27fa <mainOptions>
    1d62:	fe 01       	movw	r30, r28
    1d64:	e1 57       	subi	r30, 0x71	; 113
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	80 83       	st	Z, r24

		if(decision == CHOICE_1)
    1d6a:	fe 01       	movw	r30, r28
    1d6c:	e1 57       	subi	r30, 0x71	; 113
    1d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d70:	80 81       	ld	r24, Z
    1d72:	81 30       	cpi	r24, 0x01	; 1
    1d74:	09 f0       	breq	.+2      	; 0x1d78 <main+0x6ae>
    1d76:	b6 c3       	rjmp	.+1900   	; 0x24e4 <main+0xe1a>
		{
			while(UART_recieveByte() != ECU_READY){}
    1d78:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <UART_recieveByte>
    1d7c:	80 31       	cpi	r24, 0x10	; 16
    1d7e:	e1 f7       	brne	.-8      	; 0x1d78 <main+0x6ae>
			UART_sendByte(decision);
    1d80:	fe 01       	movw	r30, r28
    1d82:	e1 57       	subi	r30, 0x71	; 113
    1d84:	ff 4f       	sbci	r31, 0xFF	; 255
    1d86:	80 81       	ld	r24, Z
    1d88:	0e 94 57 1b 	call	0x36ae	; 0x36ae <UART_sendByte>
			do
			{
				storePass(g_password2);
    1d8c:	81 e6       	ldi	r24, 0x61	; 97
    1d8e:	91 e0       	ldi	r25, 0x01	; 1
    1d90:	0e 94 dd 14 	call	0x29ba	; 0x29ba <storePass>
				for(counter = INITIAL_VALUE; counter < PASSWORD_WIDTH; counter++)
    1d94:	fe 01       	movw	r30, r28
    1d96:	ef 56       	subi	r30, 0x6F	; 111
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	10 82       	st	Z, r1
    1d9c:	cc c0       	rjmp	.+408    	; 0x1f36 <main+0x86c>
				{
					while(UART_recieveByte() != ECU_READY){}
    1d9e:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <UART_recieveByte>
    1da2:	80 31       	cpi	r24, 0x10	; 16
    1da4:	e1 f7       	brne	.-8      	; 0x1d9e <main+0x6d4>
					UART_sendByte(g_password2[counter]);
    1da6:	fe 01       	movw	r30, r28
    1da8:	ef 56       	subi	r30, 0x6F	; 111
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	80 81       	ld	r24, Z
    1dae:	88 2f       	mov	r24, r24
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	fc 01       	movw	r30, r24
    1db4:	ef 59       	subi	r30, 0x9F	; 159
    1db6:	fe 4f       	sbci	r31, 0xFE	; 254
    1db8:	80 81       	ld	r24, Z
    1dba:	0e 94 57 1b 	call	0x36ae	; 0x36ae <UART_sendByte>
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	e1 5a       	subi	r30, 0xA1	; 161
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	a0 ea       	ldi	r26, 0xA0	; 160
    1dca:	b2 e4       	ldi	r27, 0x42	; 66
    1dcc:	80 83       	st	Z, r24
    1dce:	91 83       	std	Z+1, r25	; 0x01
    1dd0:	a2 83       	std	Z+2, r26	; 0x02
    1dd2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd4:	8e 01       	movw	r16, r28
    1dd6:	05 5a       	subi	r16, 0xA5	; 165
    1dd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dda:	fe 01       	movw	r30, r28
    1ddc:	e1 5a       	subi	r30, 0xA1	; 161
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	60 81       	ld	r22, Z
    1de2:	71 81       	ldd	r23, Z+1	; 0x01
    1de4:	82 81       	ldd	r24, Z+2	; 0x02
    1de6:	93 81       	ldd	r25, Z+3	; 0x03
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	4a ef       	ldi	r20, 0xFA	; 250
    1dee:	54 e4       	ldi	r21, 0x44	; 68
    1df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	f8 01       	movw	r30, r16
    1dfa:	80 83       	st	Z, r24
    1dfc:	91 83       	std	Z+1, r25	; 0x01
    1dfe:	a2 83       	std	Z+2, r26	; 0x02
    1e00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e02:	fe 01       	movw	r30, r28
    1e04:	e5 5a       	subi	r30, 0xA5	; 165
    1e06:	ff 4f       	sbci	r31, 0xFF	; 255
    1e08:	60 81       	ld	r22, Z
    1e0a:	71 81       	ldd	r23, Z+1	; 0x01
    1e0c:	82 81       	ldd	r24, Z+2	; 0x02
    1e0e:	93 81       	ldd	r25, Z+3	; 0x03
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e8       	ldi	r20, 0x80	; 128
    1e16:	5f e3       	ldi	r21, 0x3F	; 63
    1e18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e1c:	88 23       	and	r24, r24
    1e1e:	44 f4       	brge	.+16     	; 0x1e30 <main+0x766>
		__ticks = 1;
    1e20:	fe 01       	movw	r30, r28
    1e22:	e7 5a       	subi	r30, 0xA7	; 167
    1e24:	ff 4f       	sbci	r31, 0xFF	; 255
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	91 83       	std	Z+1, r25	; 0x01
    1e2c:	80 83       	st	Z, r24
    1e2e:	64 c0       	rjmp	.+200    	; 0x1ef8 <main+0x82e>
	else if (__tmp > 65535)
    1e30:	fe 01       	movw	r30, r28
    1e32:	e5 5a       	subi	r30, 0xA5	; 165
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	60 81       	ld	r22, Z
    1e38:	71 81       	ldd	r23, Z+1	; 0x01
    1e3a:	82 81       	ldd	r24, Z+2	; 0x02
    1e3c:	93 81       	ldd	r25, Z+3	; 0x03
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	3f ef       	ldi	r19, 0xFF	; 255
    1e42:	4f e7       	ldi	r20, 0x7F	; 127
    1e44:	57 e4       	ldi	r21, 0x47	; 71
    1e46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e4a:	18 16       	cp	r1, r24
    1e4c:	0c f0       	brlt	.+2      	; 0x1e50 <main+0x786>
    1e4e:	43 c0       	rjmp	.+134    	; 0x1ed6 <main+0x80c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e50:	fe 01       	movw	r30, r28
    1e52:	e1 5a       	subi	r30, 0xA1	; 161
    1e54:	ff 4f       	sbci	r31, 0xFF	; 255
    1e56:	60 81       	ld	r22, Z
    1e58:	71 81       	ldd	r23, Z+1	; 0x01
    1e5a:	82 81       	ldd	r24, Z+2	; 0x02
    1e5c:	93 81       	ldd	r25, Z+3	; 0x03
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	40 e2       	ldi	r20, 0x20	; 32
    1e64:	51 e4       	ldi	r21, 0x41	; 65
    1e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	8e 01       	movw	r16, r28
    1e70:	07 5a       	subi	r16, 0xA7	; 167
    1e72:	1f 4f       	sbci	r17, 0xFF	; 255
    1e74:	bc 01       	movw	r22, r24
    1e76:	cd 01       	movw	r24, r26
    1e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	f8 01       	movw	r30, r16
    1e82:	91 83       	std	Z+1, r25	; 0x01
    1e84:	80 83       	st	Z, r24
    1e86:	1f c0       	rjmp	.+62     	; 0x1ec6 <main+0x7fc>
    1e88:	fe 01       	movw	r30, r28
    1e8a:	e9 5a       	subi	r30, 0xA9	; 169
    1e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8e:	88 ec       	ldi	r24, 0xC8	; 200
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	91 83       	std	Z+1, r25	; 0x01
    1e94:	80 83       	st	Z, r24
    1e96:	fe 01       	movw	r30, r28
    1e98:	e9 5a       	subi	r30, 0xA9	; 169
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	80 81       	ld	r24, Z
    1e9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	f1 f7       	brne	.-4      	; 0x1ea0 <main+0x7d6>
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	e9 5a       	subi	r30, 0xA9	; 169
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	91 83       	std	Z+1, r25	; 0x01
    1eac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eae:	de 01       	movw	r26, r28
    1eb0:	a7 5a       	subi	r26, 0xA7	; 167
    1eb2:	bf 4f       	sbci	r27, 0xFF	; 255
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	e7 5a       	subi	r30, 0xA7	; 167
    1eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eba:	80 81       	ld	r24, Z
    1ebc:	91 81       	ldd	r25, Z+1	; 0x01
    1ebe:	01 97       	sbiw	r24, 0x01	; 1
    1ec0:	11 96       	adiw	r26, 0x01	; 1
    1ec2:	9c 93       	st	X, r25
    1ec4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	e7 5a       	subi	r30, 0xA7	; 167
    1eca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ecc:	80 81       	ld	r24, Z
    1ece:	91 81       	ldd	r25, Z+1	; 0x01
    1ed0:	00 97       	sbiw	r24, 0x00	; 0
    1ed2:	d1 f6       	brne	.-76     	; 0x1e88 <main+0x7be>
    1ed4:	27 c0       	rjmp	.+78     	; 0x1f24 <main+0x85a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed6:	8e 01       	movw	r16, r28
    1ed8:	07 5a       	subi	r16, 0xA7	; 167
    1eda:	1f 4f       	sbci	r17, 0xFF	; 255
    1edc:	fe 01       	movw	r30, r28
    1ede:	e5 5a       	subi	r30, 0xA5	; 165
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	60 81       	ld	r22, Z
    1ee4:	71 81       	ldd	r23, Z+1	; 0x01
    1ee6:	82 81       	ldd	r24, Z+2	; 0x02
    1ee8:	93 81       	ldd	r25, Z+3	; 0x03
    1eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	f8 01       	movw	r30, r16
    1ef4:	91 83       	std	Z+1, r25	; 0x01
    1ef6:	80 83       	st	Z, r24
    1ef8:	de 01       	movw	r26, r28
    1efa:	ab 5a       	subi	r26, 0xAB	; 171
    1efc:	bf 4f       	sbci	r27, 0xFF	; 255
    1efe:	fe 01       	movw	r30, r28
    1f00:	e7 5a       	subi	r30, 0xA7	; 167
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	80 81       	ld	r24, Z
    1f06:	91 81       	ldd	r25, Z+1	; 0x01
    1f08:	8d 93       	st	X+, r24
    1f0a:	9c 93       	st	X, r25
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	eb 5a       	subi	r30, 0xAB	; 171
    1f10:	ff 4f       	sbci	r31, 0xFF	; 255
    1f12:	80 81       	ld	r24, Z
    1f14:	91 81       	ldd	r25, Z+1	; 0x01
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	f1 f7       	brne	.-4      	; 0x1f16 <main+0x84c>
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	eb 5a       	subi	r30, 0xAB	; 171
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	91 83       	std	Z+1, r25	; 0x01
    1f22:	80 83       	st	Z, r24
			while(UART_recieveByte() != ECU_READY){}
			UART_sendByte(decision);
			do
			{
				storePass(g_password2);
				for(counter = INITIAL_VALUE; counter < PASSWORD_WIDTH; counter++)
    1f24:	de 01       	movw	r26, r28
    1f26:	af 56       	subi	r26, 0x6F	; 111
    1f28:	bf 4f       	sbci	r27, 0xFF	; 255
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	ef 56       	subi	r30, 0x6F	; 111
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	80 81       	ld	r24, Z
    1f32:	8f 5f       	subi	r24, 0xFF	; 255
    1f34:	8c 93       	st	X, r24
    1f36:	fe 01       	movw	r30, r28
    1f38:	ef 56       	subi	r30, 0x6F	; 111
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	80 81       	ld	r24, Z
    1f3e:	84 30       	cpi	r24, 0x04	; 4
    1f40:	08 f4       	brcc	.+2      	; 0x1f44 <main+0x87a>
    1f42:	2d cf       	rjmp	.-422    	; 0x1d9e <main+0x6d4>
					while(UART_recieveByte() != ECU_READY){}
					UART_sendByte(g_password2[counter]);
					_delay_ms(80);
				}

				UART_sendByte(ECU_READY);
    1f44:	80 e1       	ldi	r24, 0x10	; 16
    1f46:	0e 94 57 1b 	call	0x36ae	; 0x36ae <UART_sendByte>

				check_EEPROM = UART_recieveByte();
    1f4a:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <UART_recieveByte>
    1f4e:	fe 01       	movw	r30, r28
    1f50:	e0 57       	subi	r30, 0x70	; 112
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	80 83       	st	Z, r24

				if(check_EEPROM == MISMATCH)
    1f56:	fe 01       	movw	r30, r28
    1f58:	e0 57       	subi	r30, 0x70	; 112
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	80 81       	ld	r24, Z
    1f5e:	81 30       	cpi	r24, 0x01	; 1
    1f60:	09 f0       	breq	.+2      	; 0x1f64 <main+0x89a>
    1f62:	e3 c0       	rjmp	.+454    	; 0x212a <main+0xa60>
				{
					LCD_clearScreen();
    1f64:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"Incorrect ");
    1f68:	22 e8       	ldi	r18, 0x82	; 130
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	60 e0       	ldi	r22, 0x00	; 0
    1f70:	a9 01       	movw	r20, r18
    1f72:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>
    1f76:	fe 01       	movw	r30, r28
    1f78:	ef 5a       	subi	r30, 0xAF	; 175
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	aa e7       	ldi	r26, 0x7A	; 122
    1f82:	b4 e4       	ldi	r27, 0x44	; 68
    1f84:	80 83       	st	Z, r24
    1f86:	91 83       	std	Z+1, r25	; 0x01
    1f88:	a2 83       	std	Z+2, r26	; 0x02
    1f8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f8c:	8e 01       	movw	r16, r28
    1f8e:	03 5b       	subi	r16, 0xB3	; 179
    1f90:	1f 4f       	sbci	r17, 0xFF	; 255
    1f92:	fe 01       	movw	r30, r28
    1f94:	ef 5a       	subi	r30, 0xAF	; 175
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	60 81       	ld	r22, Z
    1f9a:	71 81       	ldd	r23, Z+1	; 0x01
    1f9c:	82 81       	ldd	r24, Z+2	; 0x02
    1f9e:	93 81       	ldd	r25, Z+3	; 0x03
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	4a ef       	ldi	r20, 0xFA	; 250
    1fa6:	54 e4       	ldi	r21, 0x44	; 68
    1fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	f8 01       	movw	r30, r16
    1fb2:	80 83       	st	Z, r24
    1fb4:	91 83       	std	Z+1, r25	; 0x01
    1fb6:	a2 83       	std	Z+2, r26	; 0x02
    1fb8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fba:	fe 01       	movw	r30, r28
    1fbc:	e3 5b       	subi	r30, 0xB3	; 179
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	60 81       	ld	r22, Z
    1fc2:	71 81       	ldd	r23, Z+1	; 0x01
    1fc4:	82 81       	ldd	r24, Z+2	; 0x02
    1fc6:	93 81       	ldd	r25, Z+3	; 0x03
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	40 e8       	ldi	r20, 0x80	; 128
    1fce:	5f e3       	ldi	r21, 0x3F	; 63
    1fd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fd4:	88 23       	and	r24, r24
    1fd6:	44 f4       	brge	.+16     	; 0x1fe8 <main+0x91e>
		__ticks = 1;
    1fd8:	fe 01       	movw	r30, r28
    1fda:	e5 5b       	subi	r30, 0xB5	; 181
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	91 83       	std	Z+1, r25	; 0x01
    1fe4:	80 83       	st	Z, r24
    1fe6:	64 c0       	rjmp	.+200    	; 0x20b0 <main+0x9e6>
	else if (__tmp > 65535)
    1fe8:	fe 01       	movw	r30, r28
    1fea:	e3 5b       	subi	r30, 0xB3	; 179
    1fec:	ff 4f       	sbci	r31, 0xFF	; 255
    1fee:	60 81       	ld	r22, Z
    1ff0:	71 81       	ldd	r23, Z+1	; 0x01
    1ff2:	82 81       	ldd	r24, Z+2	; 0x02
    1ff4:	93 81       	ldd	r25, Z+3	; 0x03
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	3f ef       	ldi	r19, 0xFF	; 255
    1ffa:	4f e7       	ldi	r20, 0x7F	; 127
    1ffc:	57 e4       	ldi	r21, 0x47	; 71
    1ffe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2002:	18 16       	cp	r1, r24
    2004:	0c f0       	brlt	.+2      	; 0x2008 <main+0x93e>
    2006:	43 c0       	rjmp	.+134    	; 0x208e <main+0x9c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2008:	fe 01       	movw	r30, r28
    200a:	ef 5a       	subi	r30, 0xAF	; 175
    200c:	ff 4f       	sbci	r31, 0xFF	; 255
    200e:	60 81       	ld	r22, Z
    2010:	71 81       	ldd	r23, Z+1	; 0x01
    2012:	82 81       	ldd	r24, Z+2	; 0x02
    2014:	93 81       	ldd	r25, Z+3	; 0x03
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e2       	ldi	r20, 0x20	; 32
    201c:	51 e4       	ldi	r21, 0x41	; 65
    201e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	8e 01       	movw	r16, r28
    2028:	05 5b       	subi	r16, 0xB5	; 181
    202a:	1f 4f       	sbci	r17, 0xFF	; 255
    202c:	bc 01       	movw	r22, r24
    202e:	cd 01       	movw	r24, r26
    2030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	f8 01       	movw	r30, r16
    203a:	91 83       	std	Z+1, r25	; 0x01
    203c:	80 83       	st	Z, r24
    203e:	1f c0       	rjmp	.+62     	; 0x207e <main+0x9b4>
    2040:	fe 01       	movw	r30, r28
    2042:	e7 5b       	subi	r30, 0xB7	; 183
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	88 ec       	ldi	r24, 0xC8	; 200
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	91 83       	std	Z+1, r25	; 0x01
    204c:	80 83       	st	Z, r24
    204e:	fe 01       	movw	r30, r28
    2050:	e7 5b       	subi	r30, 0xB7	; 183
    2052:	ff 4f       	sbci	r31, 0xFF	; 255
    2054:	80 81       	ld	r24, Z
    2056:	91 81       	ldd	r25, Z+1	; 0x01
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	f1 f7       	brne	.-4      	; 0x2058 <main+0x98e>
    205c:	fe 01       	movw	r30, r28
    205e:	e7 5b       	subi	r30, 0xB7	; 183
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	91 83       	std	Z+1, r25	; 0x01
    2064:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2066:	de 01       	movw	r26, r28
    2068:	a5 5b       	subi	r26, 0xB5	; 181
    206a:	bf 4f       	sbci	r27, 0xFF	; 255
    206c:	fe 01       	movw	r30, r28
    206e:	e5 5b       	subi	r30, 0xB5	; 181
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	80 81       	ld	r24, Z
    2074:	91 81       	ldd	r25, Z+1	; 0x01
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	11 96       	adiw	r26, 0x01	; 1
    207a:	9c 93       	st	X, r25
    207c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207e:	fe 01       	movw	r30, r28
    2080:	e5 5b       	subi	r30, 0xB5	; 181
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	80 81       	ld	r24, Z
    2086:	91 81       	ldd	r25, Z+1	; 0x01
    2088:	00 97       	sbiw	r24, 0x00	; 0
    208a:	d1 f6       	brne	.-76     	; 0x2040 <main+0x976>
    208c:	27 c0       	rjmp	.+78     	; 0x20dc <main+0xa12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    208e:	8e 01       	movw	r16, r28
    2090:	05 5b       	subi	r16, 0xB5	; 181
    2092:	1f 4f       	sbci	r17, 0xFF	; 255
    2094:	fe 01       	movw	r30, r28
    2096:	e3 5b       	subi	r30, 0xB3	; 179
    2098:	ff 4f       	sbci	r31, 0xFF	; 255
    209a:	60 81       	ld	r22, Z
    209c:	71 81       	ldd	r23, Z+1	; 0x01
    209e:	82 81       	ldd	r24, Z+2	; 0x02
    20a0:	93 81       	ldd	r25, Z+3	; 0x03
    20a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	f8 01       	movw	r30, r16
    20ac:	91 83       	std	Z+1, r25	; 0x01
    20ae:	80 83       	st	Z, r24
    20b0:	de 01       	movw	r26, r28
    20b2:	a9 5b       	subi	r26, 0xB9	; 185
    20b4:	bf 4f       	sbci	r27, 0xFF	; 255
    20b6:	fe 01       	movw	r30, r28
    20b8:	e5 5b       	subi	r30, 0xB5	; 181
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	80 81       	ld	r24, Z
    20be:	91 81       	ldd	r25, Z+1	; 0x01
    20c0:	8d 93       	st	X+, r24
    20c2:	9c 93       	st	X, r25
    20c4:	fe 01       	movw	r30, r28
    20c6:	e9 5b       	subi	r30, 0xB9	; 185
    20c8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ca:	80 81       	ld	r24, Z
    20cc:	91 81       	ldd	r25, Z+1	; 0x01
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	f1 f7       	brne	.-4      	; 0x20ce <main+0xa04>
    20d2:	fe 01       	movw	r30, r28
    20d4:	e9 5b       	subi	r30, 0xB9	; 185
    20d6:	ff 4f       	sbci	r31, 0xFF	; 255
    20d8:	91 83       	std	Z+1, r25	; 0x01
    20da:	80 83       	st	Z, r24
					_delay_ms(1000);
					danger_error++;
    20dc:	de 01       	movw	r26, r28
    20de:	a2 57       	subi	r26, 0x72	; 114
    20e0:	bf 4f       	sbci	r27, 0xFF	; 255
    20e2:	fe 01       	movw	r30, r28
    20e4:	e2 57       	subi	r30, 0x72	; 114
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	80 81       	ld	r24, Z
    20ea:	8f 5f       	subi	r24, 0xFF	; 255
    20ec:	8c 93       	st	X, r24

					if(danger_error == ALLOWED_TRIES_TO_ENTER_PASSWORD)
    20ee:	fe 01       	movw	r30, r28
    20f0:	e2 57       	subi	r30, 0x72	; 114
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	80 81       	ld	r24, Z
    20f6:	83 30       	cpi	r24, 0x03	; 3
    20f8:	c1 f4       	brne	.+48     	; 0x212a <main+0xa60>
					{
						Timer_setCallBack(Timer_Buzz, Timer1);
    20fa:	8f e9       	ldi	r24, 0x9F	; 159
    20fc:	97 e1       	ldi	r25, 0x17	; 23
    20fe:	61 e0       	ldi	r22, 0x01	; 1
    2100:	0e 94 2a 1a 	call	0x3454	; 0x3454 <Timer_setCallBack>
						LCD_clearScreen();
    2104:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
						Timer_init(&timer);
    2108:	ce 01       	movw	r24, r28
    210a:	8c 56       	subi	r24, 0x6C	; 108
    210c:	9f 4f       	sbci	r25, 0xFF	; 255
    210e:	0e 94 90 18 	call	0x3120	; 0x3120 <Timer_init>
						while(g_holdSystem != RESUME_SYSTEM){}
    2112:	80 91 48 01 	lds	r24, 0x0148
    2116:	88 23       	and	r24, r24
    2118:	e1 f7       	brne	.-8      	; 0x2112 <main+0xa48>
						g_holdSystem = HOLD_SYSTEM;
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	80 93 48 01 	sts	0x0148, r24
						restart_mainProgram = TRUE;
    2120:	fe 01       	movw	r30, r28
    2122:	e3 57       	subi	r30, 0x73	; 115
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	80 83       	st	Z, r24
					}
				}
			}while( (check_EEPROM ==  MISMATCH) && (restart_mainProgram == FALSE) );
    212a:	fe 01       	movw	r30, r28
    212c:	e0 57       	subi	r30, 0x70	; 112
    212e:	ff 4f       	sbci	r31, 0xFF	; 255
    2130:	80 81       	ld	r24, Z
    2132:	81 30       	cpi	r24, 0x01	; 1
    2134:	39 f4       	brne	.+14     	; 0x2144 <main+0xa7a>
    2136:	fe 01       	movw	r30, r28
    2138:	e3 57       	subi	r30, 0x73	; 115
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	80 81       	ld	r24, Z
    213e:	88 23       	and	r24, r24
    2140:	09 f4       	brne	.+2      	; 0x2144 <main+0xa7a>
    2142:	24 ce       	rjmp	.-952    	; 0x1d8c <main+0x6c2>

			if (check_EEPROM == MATCH)
    2144:	fe 01       	movw	r30, r28
    2146:	e0 57       	subi	r30, 0x70	; 112
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	80 81       	ld	r24, Z
    214c:	88 23       	and	r24, r24
    214e:	09 f0       	breq	.+2      	; 0x2152 <main+0xa88>
    2150:	c4 c1       	rjmp	.+904    	; 0x24da <main+0xe10>
			{
				do
				{
					start_System();
    2152:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <start_System>
					pass_match = checkPass(g_password1, g_password2);
    2156:	8d e5       	ldi	r24, 0x5D	; 93
    2158:	91 e0       	ldi	r25, 0x01	; 1
    215a:	21 e6       	ldi	r18, 0x61	; 97
    215c:	31 e0       	ldi	r19, 0x01	; 1
    215e:	b9 01       	movw	r22, r18
    2160:	0e 94 a7 14 	call	0x294e	; 0x294e <checkPass>
    2164:	fe 01       	movw	r30, r28
    2166:	ee 56       	subi	r30, 0x6E	; 110
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	80 83       	st	Z, r24
					if(pass_match == MISMATCH)
    216c:	fe 01       	movw	r30, r28
    216e:	ee 56       	subi	r30, 0x6E	; 110
    2170:	ff 4f       	sbci	r31, 0xFF	; 255
    2172:	80 81       	ld	r24, Z
    2174:	81 30       	cpi	r24, 0x01	; 1
    2176:	09 f0       	breq	.+2      	; 0x217a <main+0xab0>
    2178:	8e c0       	rjmp	.+284    	; 0x2296 <main+0xbcc>
					{
						LCD_clearScreen();
    217a:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
						LCD_displayStringRowColumn(0,0,"Mismatch passwords");
    217e:	20 e6       	ldi	r18, 0x60	; 96
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	60 e0       	ldi	r22, 0x00	; 0
    2186:	a9 01       	movw	r20, r18
    2188:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>
    218c:	fe 01       	movw	r30, r28
    218e:	ed 5b       	subi	r30, 0xBD	; 189
    2190:	ff 4f       	sbci	r31, 0xFF	; 255
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	aa e7       	ldi	r26, 0x7A	; 122
    2198:	b4 e4       	ldi	r27, 0x44	; 68
    219a:	80 83       	st	Z, r24
    219c:	91 83       	std	Z+1, r25	; 0x01
    219e:	a2 83       	std	Z+2, r26	; 0x02
    21a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a2:	8e 01       	movw	r16, r28
    21a4:	01 5c       	subi	r16, 0xC1	; 193
    21a6:	1f 4f       	sbci	r17, 0xFF	; 255
    21a8:	fe 01       	movw	r30, r28
    21aa:	ed 5b       	subi	r30, 0xBD	; 189
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	60 81       	ld	r22, Z
    21b0:	71 81       	ldd	r23, Z+1	; 0x01
    21b2:	82 81       	ldd	r24, Z+2	; 0x02
    21b4:	93 81       	ldd	r25, Z+3	; 0x03
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	4a ef       	ldi	r20, 0xFA	; 250
    21bc:	54 e4       	ldi	r21, 0x44	; 68
    21be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	f8 01       	movw	r30, r16
    21c8:	80 83       	st	Z, r24
    21ca:	91 83       	std	Z+1, r25	; 0x01
    21cc:	a2 83       	std	Z+2, r26	; 0x02
    21ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21d0:	fe 01       	movw	r30, r28
    21d2:	ff 96       	adiw	r30, 0x3f	; 63
    21d4:	60 81       	ld	r22, Z
    21d6:	71 81       	ldd	r23, Z+1	; 0x01
    21d8:	82 81       	ldd	r24, Z+2	; 0x02
    21da:	93 81       	ldd	r25, Z+3	; 0x03
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	40 e8       	ldi	r20, 0x80	; 128
    21e2:	5f e3       	ldi	r21, 0x3F	; 63
    21e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21e8:	88 23       	and	r24, r24
    21ea:	2c f4       	brge	.+10     	; 0x21f6 <main+0xb2c>
		__ticks = 1;
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	9e af       	std	Y+62, r25	; 0x3e
    21f2:	8d af       	std	Y+61, r24	; 0x3d
    21f4:	46 c0       	rjmp	.+140    	; 0x2282 <main+0xbb8>
	else if (__tmp > 65535)
    21f6:	fe 01       	movw	r30, r28
    21f8:	ff 96       	adiw	r30, 0x3f	; 63
    21fa:	60 81       	ld	r22, Z
    21fc:	71 81       	ldd	r23, Z+1	; 0x01
    21fe:	82 81       	ldd	r24, Z+2	; 0x02
    2200:	93 81       	ldd	r25, Z+3	; 0x03
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	3f ef       	ldi	r19, 0xFF	; 255
    2206:	4f e7       	ldi	r20, 0x7F	; 127
    2208:	57 e4       	ldi	r21, 0x47	; 71
    220a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    220e:	18 16       	cp	r1, r24
    2210:	64 f5       	brge	.+88     	; 0x226a <main+0xba0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2212:	fe 01       	movw	r30, r28
    2214:	ed 5b       	subi	r30, 0xBD	; 189
    2216:	ff 4f       	sbci	r31, 0xFF	; 255
    2218:	60 81       	ld	r22, Z
    221a:	71 81       	ldd	r23, Z+1	; 0x01
    221c:	82 81       	ldd	r24, Z+2	; 0x02
    221e:	93 81       	ldd	r25, Z+3	; 0x03
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	40 e2       	ldi	r20, 0x20	; 32
    2226:	51 e4       	ldi	r21, 0x41	; 65
    2228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	bc 01       	movw	r22, r24
    2232:	cd 01       	movw	r24, r26
    2234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	9e af       	std	Y+62, r25	; 0x3e
    223e:	8d af       	std	Y+61, r24	; 0x3d
    2240:	0f c0       	rjmp	.+30     	; 0x2260 <main+0xb96>
    2242:	88 ec       	ldi	r24, 0xC8	; 200
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	9c af       	std	Y+60, r25	; 0x3c
    2248:	8b af       	std	Y+59, r24	; 0x3b
    224a:	8b ad       	ldd	r24, Y+59	; 0x3b
    224c:	9c ad       	ldd	r25, Y+60	; 0x3c
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	f1 f7       	brne	.-4      	; 0x224e <main+0xb84>
    2252:	9c af       	std	Y+60, r25	; 0x3c
    2254:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2256:	8d ad       	ldd	r24, Y+61	; 0x3d
    2258:	9e ad       	ldd	r25, Y+62	; 0x3e
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	9e af       	std	Y+62, r25	; 0x3e
    225e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2260:	8d ad       	ldd	r24, Y+61	; 0x3d
    2262:	9e ad       	ldd	r25, Y+62	; 0x3e
    2264:	00 97       	sbiw	r24, 0x00	; 0
    2266:	69 f7       	brne	.-38     	; 0x2242 <main+0xb78>
    2268:	16 c0       	rjmp	.+44     	; 0x2296 <main+0xbcc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    226a:	fe 01       	movw	r30, r28
    226c:	ff 96       	adiw	r30, 0x3f	; 63
    226e:	60 81       	ld	r22, Z
    2270:	71 81       	ldd	r23, Z+1	; 0x01
    2272:	82 81       	ldd	r24, Z+2	; 0x02
    2274:	93 81       	ldd	r25, Z+3	; 0x03
    2276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	9e af       	std	Y+62, r25	; 0x3e
    2280:	8d af       	std	Y+61, r24	; 0x3d
    2282:	8d ad       	ldd	r24, Y+61	; 0x3d
    2284:	9e ad       	ldd	r25, Y+62	; 0x3e
    2286:	9a af       	std	Y+58, r25	; 0x3a
    2288:	89 af       	std	Y+57, r24	; 0x39
    228a:	89 ad       	ldd	r24, Y+57	; 0x39
    228c:	9a ad       	ldd	r25, Y+58	; 0x3a
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	f1 f7       	brne	.-4      	; 0x228e <main+0xbc4>
    2292:	9a af       	std	Y+58, r25	; 0x3a
    2294:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(1000);
					}
				}while(pass_match == MISMATCH);
    2296:	fe 01       	movw	r30, r28
    2298:	ee 56       	subi	r30, 0x6E	; 110
    229a:	ff 4f       	sbci	r31, 0xFF	; 255
    229c:	80 81       	ld	r24, Z
    229e:	81 30       	cpi	r24, 0x01	; 1
    22a0:	09 f4       	brne	.+2      	; 0x22a4 <main+0xbda>
    22a2:	57 cf       	rjmp	.-338    	; 0x2152 <main+0xa88>

				if(pass_match == MATCH)
    22a4:	fe 01       	movw	r30, r28
    22a6:	ee 56       	subi	r30, 0x6E	; 110
    22a8:	ff 4f       	sbci	r31, 0xFF	; 255
    22aa:	80 81       	ld	r24, Z
    22ac:	88 23       	and	r24, r24
    22ae:	09 f0       	breq	.+2      	; 0x22b2 <main+0xbe8>
    22b0:	14 c1       	rjmp	.+552    	; 0x24da <main+0xe10>
				{
					for(counter = INITIAL_VALUE; counter< PASSWORD_WIDTH; counter++)
    22b2:	fe 01       	movw	r30, r28
    22b4:	ef 56       	subi	r30, 0x6F	; 111
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	10 82       	st	Z, r1
    22ba:	8b c0       	rjmp	.+278    	; 0x23d2 <main+0xd08>
					{
						while(UART_recieveByte() != ECU_READY){}
    22bc:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <UART_recieveByte>
    22c0:	80 31       	cpi	r24, 0x10	; 16
    22c2:	e1 f7       	brne	.-8      	; 0x22bc <main+0xbf2>
						UART_sendByte(g_password1[counter]);
    22c4:	fe 01       	movw	r30, r28
    22c6:	ef 56       	subi	r30, 0x6F	; 111
    22c8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ca:	80 81       	ld	r24, Z
    22cc:	88 2f       	mov	r24, r24
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	fc 01       	movw	r30, r24
    22d2:	e3 5a       	subi	r30, 0xA3	; 163
    22d4:	fe 4f       	sbci	r31, 0xFE	; 254
    22d6:	80 81       	ld	r24, Z
    22d8:	0e 94 57 1b 	call	0x36ae	; 0x36ae <UART_sendByte>
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	a0 ea       	ldi	r26, 0xA0	; 160
    22e2:	b2 e4       	ldi	r27, 0x42	; 66
    22e4:	8d ab       	std	Y+53, r24	; 0x35
    22e6:	9e ab       	std	Y+54, r25	; 0x36
    22e8:	af ab       	std	Y+55, r26	; 0x37
    22ea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ec:	6d a9       	ldd	r22, Y+53	; 0x35
    22ee:	7e a9       	ldd	r23, Y+54	; 0x36
    22f0:	8f a9       	ldd	r24, Y+55	; 0x37
    22f2:	98 ad       	ldd	r25, Y+56	; 0x38
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	4a ef       	ldi	r20, 0xFA	; 250
    22fa:	54 e4       	ldi	r21, 0x44	; 68
    22fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	89 ab       	std	Y+49, r24	; 0x31
    2306:	9a ab       	std	Y+50, r25	; 0x32
    2308:	ab ab       	std	Y+51, r26	; 0x33
    230a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    230c:	69 a9       	ldd	r22, Y+49	; 0x31
    230e:	7a a9       	ldd	r23, Y+50	; 0x32
    2310:	8b a9       	ldd	r24, Y+51	; 0x33
    2312:	9c a9       	ldd	r25, Y+52	; 0x34
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	40 e8       	ldi	r20, 0x80	; 128
    231a:	5f e3       	ldi	r21, 0x3F	; 63
    231c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2320:	88 23       	and	r24, r24
    2322:	2c f4       	brge	.+10     	; 0x232e <main+0xc64>
		__ticks = 1;
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	98 ab       	std	Y+48, r25	; 0x30
    232a:	8f a7       	std	Y+47, r24	; 0x2f
    232c:	3f c0       	rjmp	.+126    	; 0x23ac <main+0xce2>
	else if (__tmp > 65535)
    232e:	69 a9       	ldd	r22, Y+49	; 0x31
    2330:	7a a9       	ldd	r23, Y+50	; 0x32
    2332:	8b a9       	ldd	r24, Y+51	; 0x33
    2334:	9c a9       	ldd	r25, Y+52	; 0x34
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	3f ef       	ldi	r19, 0xFF	; 255
    233a:	4f e7       	ldi	r20, 0x7F	; 127
    233c:	57 e4       	ldi	r21, 0x47	; 71
    233e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2342:	18 16       	cp	r1, r24
    2344:	4c f5       	brge	.+82     	; 0x2398 <main+0xcce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2346:	6d a9       	ldd	r22, Y+53	; 0x35
    2348:	7e a9       	ldd	r23, Y+54	; 0x36
    234a:	8f a9       	ldd	r24, Y+55	; 0x37
    234c:	98 ad       	ldd	r25, Y+56	; 0x38
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	40 e2       	ldi	r20, 0x20	; 32
    2354:	51 e4       	ldi	r21, 0x41	; 65
    2356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	bc 01       	movw	r22, r24
    2360:	cd 01       	movw	r24, r26
    2362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	98 ab       	std	Y+48, r25	; 0x30
    236c:	8f a7       	std	Y+47, r24	; 0x2f
    236e:	0f c0       	rjmp	.+30     	; 0x238e <main+0xcc4>
    2370:	88 ec       	ldi	r24, 0xC8	; 200
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	9e a7       	std	Y+46, r25	; 0x2e
    2376:	8d a7       	std	Y+45, r24	; 0x2d
    2378:	8d a5       	ldd	r24, Y+45	; 0x2d
    237a:	9e a5       	ldd	r25, Y+46	; 0x2e
    237c:	01 97       	sbiw	r24, 0x01	; 1
    237e:	f1 f7       	brne	.-4      	; 0x237c <main+0xcb2>
    2380:	9e a7       	std	Y+46, r25	; 0x2e
    2382:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2384:	8f a5       	ldd	r24, Y+47	; 0x2f
    2386:	98 a9       	ldd	r25, Y+48	; 0x30
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	98 ab       	std	Y+48, r25	; 0x30
    238c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    238e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2390:	98 a9       	ldd	r25, Y+48	; 0x30
    2392:	00 97       	sbiw	r24, 0x00	; 0
    2394:	69 f7       	brne	.-38     	; 0x2370 <main+0xca6>
    2396:	14 c0       	rjmp	.+40     	; 0x23c0 <main+0xcf6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2398:	69 a9       	ldd	r22, Y+49	; 0x31
    239a:	7a a9       	ldd	r23, Y+50	; 0x32
    239c:	8b a9       	ldd	r24, Y+51	; 0x33
    239e:	9c a9       	ldd	r25, Y+52	; 0x34
    23a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	98 ab       	std	Y+48, r25	; 0x30
    23aa:	8f a7       	std	Y+47, r24	; 0x2f
    23ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    23ae:	98 a9       	ldd	r25, Y+48	; 0x30
    23b0:	9c a7       	std	Y+44, r25	; 0x2c
    23b2:	8b a7       	std	Y+43, r24	; 0x2b
    23b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    23b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	f1 f7       	brne	.-4      	; 0x23b8 <main+0xcee>
    23bc:	9c a7       	std	Y+44, r25	; 0x2c
    23be:	8b a7       	std	Y+43, r24	; 0x2b
					}
				}while(pass_match == MISMATCH);

				if(pass_match == MATCH)
				{
					for(counter = INITIAL_VALUE; counter< PASSWORD_WIDTH; counter++)
    23c0:	de 01       	movw	r26, r28
    23c2:	af 56       	subi	r26, 0x6F	; 111
    23c4:	bf 4f       	sbci	r27, 0xFF	; 255
    23c6:	fe 01       	movw	r30, r28
    23c8:	ef 56       	subi	r30, 0x6F	; 111
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	80 81       	ld	r24, Z
    23ce:	8f 5f       	subi	r24, 0xFF	; 255
    23d0:	8c 93       	st	X, r24
    23d2:	fe 01       	movw	r30, r28
    23d4:	ef 56       	subi	r30, 0x6F	; 111
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	80 81       	ld	r24, Z
    23da:	84 30       	cpi	r24, 0x04	; 4
    23dc:	08 f4       	brcc	.+2      	; 0x23e0 <main+0xd16>
    23de:	6e cf       	rjmp	.-292    	; 0x22bc <main+0xbf2>
					{
						while(UART_recieveByte() != ECU_READY){}
						UART_sendByte(g_password1[counter]);
						_delay_ms(80);
					}
					LCD_clearScreen();
    23e0:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"Password changed");
    23e4:	2d e8       	ldi	r18, 0x8D	; 141
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	60 e0       	ldi	r22, 0x00	; 0
    23ec:	a9 01       	movw	r20, r18
    23ee:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	aa ef       	ldi	r26, 0xFA	; 250
    23f8:	b4 e4       	ldi	r27, 0x44	; 68
    23fa:	8f a3       	std	Y+39, r24	; 0x27
    23fc:	98 a7       	std	Y+40, r25	; 0x28
    23fe:	a9 a7       	std	Y+41, r26	; 0x29
    2400:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2402:	6f a1       	ldd	r22, Y+39	; 0x27
    2404:	78 a5       	ldd	r23, Y+40	; 0x28
    2406:	89 a5       	ldd	r24, Y+41	; 0x29
    2408:	9a a5       	ldd	r25, Y+42	; 0x2a
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	4a ef       	ldi	r20, 0xFA	; 250
    2410:	54 e4       	ldi	r21, 0x44	; 68
    2412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	8b a3       	std	Y+35, r24	; 0x23
    241c:	9c a3       	std	Y+36, r25	; 0x24
    241e:	ad a3       	std	Y+37, r26	; 0x25
    2420:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2422:	6b a1       	ldd	r22, Y+35	; 0x23
    2424:	7c a1       	ldd	r23, Y+36	; 0x24
    2426:	8d a1       	ldd	r24, Y+37	; 0x25
    2428:	9e a1       	ldd	r25, Y+38	; 0x26
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e8       	ldi	r20, 0x80	; 128
    2430:	5f e3       	ldi	r21, 0x3F	; 63
    2432:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2436:	88 23       	and	r24, r24
    2438:	2c f4       	brge	.+10     	; 0x2444 <main+0xd7a>
		__ticks = 1;
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	9a a3       	std	Y+34, r25	; 0x22
    2440:	89 a3       	std	Y+33, r24	; 0x21
    2442:	3f c0       	rjmp	.+126    	; 0x24c2 <main+0xdf8>
	else if (__tmp > 65535)
    2444:	6b a1       	ldd	r22, Y+35	; 0x23
    2446:	7c a1       	ldd	r23, Y+36	; 0x24
    2448:	8d a1       	ldd	r24, Y+37	; 0x25
    244a:	9e a1       	ldd	r25, Y+38	; 0x26
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	3f ef       	ldi	r19, 0xFF	; 255
    2450:	4f e7       	ldi	r20, 0x7F	; 127
    2452:	57 e4       	ldi	r21, 0x47	; 71
    2454:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2458:	18 16       	cp	r1, r24
    245a:	4c f5       	brge	.+82     	; 0x24ae <main+0xde4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    245c:	6f a1       	ldd	r22, Y+39	; 0x27
    245e:	78 a5       	ldd	r23, Y+40	; 0x28
    2460:	89 a5       	ldd	r24, Y+41	; 0x29
    2462:	9a a5       	ldd	r25, Y+42	; 0x2a
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	40 e2       	ldi	r20, 0x20	; 32
    246a:	51 e4       	ldi	r21, 0x41	; 65
    246c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	bc 01       	movw	r22, r24
    2476:	cd 01       	movw	r24, r26
    2478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	9a a3       	std	Y+34, r25	; 0x22
    2482:	89 a3       	std	Y+33, r24	; 0x21
    2484:	0f c0       	rjmp	.+30     	; 0x24a4 <main+0xdda>
    2486:	88 ec       	ldi	r24, 0xC8	; 200
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	98 a3       	std	Y+32, r25	; 0x20
    248c:	8f 8f       	std	Y+31, r24	; 0x1f
    248e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2490:	98 a1       	ldd	r25, Y+32	; 0x20
    2492:	01 97       	sbiw	r24, 0x01	; 1
    2494:	f1 f7       	brne	.-4      	; 0x2492 <main+0xdc8>
    2496:	98 a3       	std	Y+32, r25	; 0x20
    2498:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249a:	89 a1       	ldd	r24, Y+33	; 0x21
    249c:	9a a1       	ldd	r25, Y+34	; 0x22
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	9a a3       	std	Y+34, r25	; 0x22
    24a2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a4:	89 a1       	ldd	r24, Y+33	; 0x21
    24a6:	9a a1       	ldd	r25, Y+34	; 0x22
    24a8:	00 97       	sbiw	r24, 0x00	; 0
    24aa:	69 f7       	brne	.-38     	; 0x2486 <main+0xdbc>
    24ac:	14 c0       	rjmp	.+40     	; 0x24d6 <main+0xe0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ae:	6b a1       	ldd	r22, Y+35	; 0x23
    24b0:	7c a1       	ldd	r23, Y+36	; 0x24
    24b2:	8d a1       	ldd	r24, Y+37	; 0x25
    24b4:	9e a1       	ldd	r25, Y+38	; 0x26
    24b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	9a a3       	std	Y+34, r25	; 0x22
    24c0:	89 a3       	std	Y+33, r24	; 0x21
    24c2:	89 a1       	ldd	r24, Y+33	; 0x21
    24c4:	9a a1       	ldd	r25, Y+34	; 0x22
    24c6:	9e 8f       	std	Y+30, r25	; 0x1e
    24c8:	8d 8f       	std	Y+29, r24	; 0x1d
    24ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	f1 f7       	brne	.-4      	; 0x24ce <main+0xe04>
    24d2:	9e 8f       	std	Y+30, r25	; 0x1e
    24d4:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(2000);
					LCD_clearScreen();
    24d6:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
				}
			}
			danger_error = NO_DANGER;
    24da:	fe 01       	movw	r30, r28
    24dc:	e2 57       	subi	r30, 0x72	; 114
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	10 82       	st	Z, r1
    24e2:	86 c1       	rjmp	.+780    	; 0x27f0 <main+0x1126>
		}

		else if(decision == CHOICE_2)
    24e4:	fe 01       	movw	r30, r28
    24e6:	e1 57       	subi	r30, 0x71	; 113
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	80 81       	ld	r24, Z
    24ec:	82 30       	cpi	r24, 0x02	; 2
    24ee:	09 f0       	breq	.+2      	; 0x24f2 <main+0xe28>
    24f0:	7f c1       	rjmp	.+766    	; 0x27f0 <main+0x1126>
		{
			while(UART_recieveByte() != ECU_READY){}
    24f2:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <UART_recieveByte>
    24f6:	80 31       	cpi	r24, 0x10	; 16
    24f8:	e1 f7       	brne	.-8      	; 0x24f2 <main+0xe28>
			UART_sendByte(decision);
    24fa:	fe 01       	movw	r30, r28
    24fc:	e1 57       	subi	r30, 0x71	; 113
    24fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2500:	80 81       	ld	r24, Z
    2502:	0e 94 57 1b 	call	0x36ae	; 0x36ae <UART_sendByte>
			do
			{
				storePass(g_password2);
    2506:	81 e6       	ldi	r24, 0x61	; 97
    2508:	91 e0       	ldi	r25, 0x01	; 1
    250a:	0e 94 dd 14 	call	0x29ba	; 0x29ba <storePass>
				for(counter = INITIAL_VALUE; counter < PASSWORD_WIDTH; counter++)
    250e:	fe 01       	movw	r30, r28
    2510:	ef 56       	subi	r30, 0x6F	; 111
    2512:	ff 4f       	sbci	r31, 0xFF	; 255
    2514:	10 82       	st	Z, r1
    2516:	8b c0       	rjmp	.+278    	; 0x262e <main+0xf64>
				{
					while(UART_recieveByte() != ECU_READY){}
    2518:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <UART_recieveByte>
    251c:	80 31       	cpi	r24, 0x10	; 16
    251e:	e1 f7       	brne	.-8      	; 0x2518 <main+0xe4e>
					UART_sendByte(g_password2[counter]);
    2520:	fe 01       	movw	r30, r28
    2522:	ef 56       	subi	r30, 0x6F	; 111
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	80 81       	ld	r24, Z
    2528:	88 2f       	mov	r24, r24
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	fc 01       	movw	r30, r24
    252e:	ef 59       	subi	r30, 0x9F	; 159
    2530:	fe 4f       	sbci	r31, 0xFE	; 254
    2532:	80 81       	ld	r24, Z
    2534:	0e 94 57 1b 	call	0x36ae	; 0x36ae <UART_sendByte>
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	a0 ea       	ldi	r26, 0xA0	; 160
    253e:	b2 e4       	ldi	r27, 0x42	; 66
    2540:	89 8f       	std	Y+25, r24	; 0x19
    2542:	9a 8f       	std	Y+26, r25	; 0x1a
    2544:	ab 8f       	std	Y+27, r26	; 0x1b
    2546:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2548:	69 8d       	ldd	r22, Y+25	; 0x19
    254a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    254c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    254e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	4a ef       	ldi	r20, 0xFA	; 250
    2556:	54 e4       	ldi	r21, 0x44	; 68
    2558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	8d 8b       	std	Y+21, r24	; 0x15
    2562:	9e 8b       	std	Y+22, r25	; 0x16
    2564:	af 8b       	std	Y+23, r26	; 0x17
    2566:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2568:	6d 89       	ldd	r22, Y+21	; 0x15
    256a:	7e 89       	ldd	r23, Y+22	; 0x16
    256c:	8f 89       	ldd	r24, Y+23	; 0x17
    256e:	98 8d       	ldd	r25, Y+24	; 0x18
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	40 e8       	ldi	r20, 0x80	; 128
    2576:	5f e3       	ldi	r21, 0x3F	; 63
    2578:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    257c:	88 23       	and	r24, r24
    257e:	2c f4       	brge	.+10     	; 0x258a <main+0xec0>
		__ticks = 1;
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	9c 8b       	std	Y+20, r25	; 0x14
    2586:	8b 8b       	std	Y+19, r24	; 0x13
    2588:	3f c0       	rjmp	.+126    	; 0x2608 <main+0xf3e>
	else if (__tmp > 65535)
    258a:	6d 89       	ldd	r22, Y+21	; 0x15
    258c:	7e 89       	ldd	r23, Y+22	; 0x16
    258e:	8f 89       	ldd	r24, Y+23	; 0x17
    2590:	98 8d       	ldd	r25, Y+24	; 0x18
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	3f ef       	ldi	r19, 0xFF	; 255
    2596:	4f e7       	ldi	r20, 0x7F	; 127
    2598:	57 e4       	ldi	r21, 0x47	; 71
    259a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    259e:	18 16       	cp	r1, r24
    25a0:	4c f5       	brge	.+82     	; 0x25f4 <main+0xf2a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a2:	69 8d       	ldd	r22, Y+25	; 0x19
    25a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	40 e2       	ldi	r20, 0x20	; 32
    25b0:	51 e4       	ldi	r21, 0x41	; 65
    25b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	bc 01       	movw	r22, r24
    25bc:	cd 01       	movw	r24, r26
    25be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	9c 8b       	std	Y+20, r25	; 0x14
    25c8:	8b 8b       	std	Y+19, r24	; 0x13
    25ca:	0f c0       	rjmp	.+30     	; 0x25ea <main+0xf20>
    25cc:	88 ec       	ldi	r24, 0xC8	; 200
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	9a 8b       	std	Y+18, r25	; 0x12
    25d2:	89 8b       	std	Y+17, r24	; 0x11
    25d4:	89 89       	ldd	r24, Y+17	; 0x11
    25d6:	9a 89       	ldd	r25, Y+18	; 0x12
    25d8:	01 97       	sbiw	r24, 0x01	; 1
    25da:	f1 f7       	brne	.-4      	; 0x25d8 <main+0xf0e>
    25dc:	9a 8b       	std	Y+18, r25	; 0x12
    25de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e0:	8b 89       	ldd	r24, Y+19	; 0x13
    25e2:	9c 89       	ldd	r25, Y+20	; 0x14
    25e4:	01 97       	sbiw	r24, 0x01	; 1
    25e6:	9c 8b       	std	Y+20, r25	; 0x14
    25e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ea:	8b 89       	ldd	r24, Y+19	; 0x13
    25ec:	9c 89       	ldd	r25, Y+20	; 0x14
    25ee:	00 97       	sbiw	r24, 0x00	; 0
    25f0:	69 f7       	brne	.-38     	; 0x25cc <main+0xf02>
    25f2:	14 c0       	rjmp	.+40     	; 0x261c <main+0xf52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f4:	6d 89       	ldd	r22, Y+21	; 0x15
    25f6:	7e 89       	ldd	r23, Y+22	; 0x16
    25f8:	8f 89       	ldd	r24, Y+23	; 0x17
    25fa:	98 8d       	ldd	r25, Y+24	; 0x18
    25fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	9c 8b       	std	Y+20, r25	; 0x14
    2606:	8b 8b       	std	Y+19, r24	; 0x13
    2608:	8b 89       	ldd	r24, Y+19	; 0x13
    260a:	9c 89       	ldd	r25, Y+20	; 0x14
    260c:	98 8b       	std	Y+16, r25	; 0x10
    260e:	8f 87       	std	Y+15, r24	; 0x0f
    2610:	8f 85       	ldd	r24, Y+15	; 0x0f
    2612:	98 89       	ldd	r25, Y+16	; 0x10
    2614:	01 97       	sbiw	r24, 0x01	; 1
    2616:	f1 f7       	brne	.-4      	; 0x2614 <main+0xf4a>
    2618:	98 8b       	std	Y+16, r25	; 0x10
    261a:	8f 87       	std	Y+15, r24	; 0x0f
			while(UART_recieveByte() != ECU_READY){}
			UART_sendByte(decision);
			do
			{
				storePass(g_password2);
				for(counter = INITIAL_VALUE; counter < PASSWORD_WIDTH; counter++)
    261c:	de 01       	movw	r26, r28
    261e:	af 56       	subi	r26, 0x6F	; 111
    2620:	bf 4f       	sbci	r27, 0xFF	; 255
    2622:	fe 01       	movw	r30, r28
    2624:	ef 56       	subi	r30, 0x6F	; 111
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	80 81       	ld	r24, Z
    262a:	8f 5f       	subi	r24, 0xFF	; 255
    262c:	8c 93       	st	X, r24
    262e:	fe 01       	movw	r30, r28
    2630:	ef 56       	subi	r30, 0x6F	; 111
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	80 81       	ld	r24, Z
    2636:	84 30       	cpi	r24, 0x04	; 4
    2638:	08 f4       	brcc	.+2      	; 0x263c <main+0xf72>
    263a:	6e cf       	rjmp	.-292    	; 0x2518 <main+0xe4e>
					while(UART_recieveByte() != ECU_READY){}
					UART_sendByte(g_password2[counter]);
					_delay_ms(80);
				}

				UART_sendByte(ECU_READY);
    263c:	80 e1       	ldi	r24, 0x10	; 16
    263e:	0e 94 57 1b 	call	0x36ae	; 0x36ae <UART_sendByte>
				check_EEPROM = UART_recieveByte();
    2642:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <UART_recieveByte>
    2646:	fe 01       	movw	r30, r28
    2648:	e0 57       	subi	r30, 0x70	; 112
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	80 83       	st	Z, r24

				if(check_EEPROM == MISMATCH)
    264e:	fe 01       	movw	r30, r28
    2650:	e0 57       	subi	r30, 0x70	; 112
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	80 81       	ld	r24, Z
    2656:	81 30       	cpi	r24, 0x01	; 1
    2658:	09 f0       	breq	.+2      	; 0x265c <main+0xf92>
    265a:	a2 c0       	rjmp	.+324    	; 0x27a0 <main+0x10d6>
				{
					LCD_clearScreen();
    265c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"Invalid Pass");
    2660:	2e e9       	ldi	r18, 0x9E	; 158
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	60 e0       	ldi	r22, 0x00	; 0
    2668:	a9 01       	movw	r20, r18
    266a:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	aa e7       	ldi	r26, 0x7A	; 122
    2674:	b4 e4       	ldi	r27, 0x44	; 68
    2676:	8b 87       	std	Y+11, r24	; 0x0b
    2678:	9c 87       	std	Y+12, r25	; 0x0c
    267a:	ad 87       	std	Y+13, r26	; 0x0d
    267c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2680:	7c 85       	ldd	r23, Y+12	; 0x0c
    2682:	8d 85       	ldd	r24, Y+13	; 0x0d
    2684:	9e 85       	ldd	r25, Y+14	; 0x0e
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	4a ef       	ldi	r20, 0xFA	; 250
    268c:	54 e4       	ldi	r21, 0x44	; 68
    268e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	8f 83       	std	Y+7, r24	; 0x07
    2698:	98 87       	std	Y+8, r25	; 0x08
    269a:	a9 87       	std	Y+9, r26	; 0x09
    269c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    269e:	6f 81       	ldd	r22, Y+7	; 0x07
    26a0:	78 85       	ldd	r23, Y+8	; 0x08
    26a2:	89 85       	ldd	r24, Y+9	; 0x09
    26a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	40 e8       	ldi	r20, 0x80	; 128
    26ac:	5f e3       	ldi	r21, 0x3F	; 63
    26ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26b2:	88 23       	and	r24, r24
    26b4:	2c f4       	brge	.+10     	; 0x26c0 <main+0xff6>
		__ticks = 1;
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	9e 83       	std	Y+6, r25	; 0x06
    26bc:	8d 83       	std	Y+5, r24	; 0x05
    26be:	3f c0       	rjmp	.+126    	; 0x273e <main+0x1074>
	else if (__tmp > 65535)
    26c0:	6f 81       	ldd	r22, Y+7	; 0x07
    26c2:	78 85       	ldd	r23, Y+8	; 0x08
    26c4:	89 85       	ldd	r24, Y+9	; 0x09
    26c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	3f ef       	ldi	r19, 0xFF	; 255
    26cc:	4f e7       	ldi	r20, 0x7F	; 127
    26ce:	57 e4       	ldi	r21, 0x47	; 71
    26d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26d4:	18 16       	cp	r1, r24
    26d6:	4c f5       	brge	.+82     	; 0x272a <main+0x1060>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    26da:	7c 85       	ldd	r23, Y+12	; 0x0c
    26dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    26de:	9e 85       	ldd	r25, Y+14	; 0x0e
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e2       	ldi	r20, 0x20	; 32
    26e6:	51 e4       	ldi	r21, 0x41	; 65
    26e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	bc 01       	movw	r22, r24
    26f2:	cd 01       	movw	r24, r26
    26f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	9e 83       	std	Y+6, r25	; 0x06
    26fe:	8d 83       	std	Y+5, r24	; 0x05
    2700:	0f c0       	rjmp	.+30     	; 0x2720 <main+0x1056>
    2702:	88 ec       	ldi	r24, 0xC8	; 200
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	9c 83       	std	Y+4, r25	; 0x04
    2708:	8b 83       	std	Y+3, r24	; 0x03
    270a:	8b 81       	ldd	r24, Y+3	; 0x03
    270c:	9c 81       	ldd	r25, Y+4	; 0x04
    270e:	01 97       	sbiw	r24, 0x01	; 1
    2710:	f1 f7       	brne	.-4      	; 0x270e <main+0x1044>
    2712:	9c 83       	std	Y+4, r25	; 0x04
    2714:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2716:	8d 81       	ldd	r24, Y+5	; 0x05
    2718:	9e 81       	ldd	r25, Y+6	; 0x06
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	9e 83       	std	Y+6, r25	; 0x06
    271e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2720:	8d 81       	ldd	r24, Y+5	; 0x05
    2722:	9e 81       	ldd	r25, Y+6	; 0x06
    2724:	00 97       	sbiw	r24, 0x00	; 0
    2726:	69 f7       	brne	.-38     	; 0x2702 <main+0x1038>
    2728:	14 c0       	rjmp	.+40     	; 0x2752 <main+0x1088>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    272a:	6f 81       	ldd	r22, Y+7	; 0x07
    272c:	78 85       	ldd	r23, Y+8	; 0x08
    272e:	89 85       	ldd	r24, Y+9	; 0x09
    2730:	9a 85       	ldd	r25, Y+10	; 0x0a
    2732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	9e 83       	std	Y+6, r25	; 0x06
    273c:	8d 83       	std	Y+5, r24	; 0x05
    273e:	8d 81       	ldd	r24, Y+5	; 0x05
    2740:	9e 81       	ldd	r25, Y+6	; 0x06
    2742:	9a 83       	std	Y+2, r25	; 0x02
    2744:	89 83       	std	Y+1, r24	; 0x01
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	9a 81       	ldd	r25, Y+2	; 0x02
    274a:	01 97       	sbiw	r24, 0x01	; 1
    274c:	f1 f7       	brne	.-4      	; 0x274a <main+0x1080>
    274e:	9a 83       	std	Y+2, r25	; 0x02
    2750:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(1000);
					danger_error++;
    2752:	de 01       	movw	r26, r28
    2754:	a2 57       	subi	r26, 0x72	; 114
    2756:	bf 4f       	sbci	r27, 0xFF	; 255
    2758:	fe 01       	movw	r30, r28
    275a:	e2 57       	subi	r30, 0x72	; 114
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	80 81       	ld	r24, Z
    2760:	8f 5f       	subi	r24, 0xFF	; 255
    2762:	8c 93       	st	X, r24
					if(danger_error == ALLOWED_TRIES_TO_ENTER_PASSWORD)
    2764:	fe 01       	movw	r30, r28
    2766:	e2 57       	subi	r30, 0x72	; 114
    2768:	ff 4f       	sbci	r31, 0xFF	; 255
    276a:	80 81       	ld	r24, Z
    276c:	83 30       	cpi	r24, 0x03	; 3
    276e:	c1 f4       	brne	.+48     	; 0x27a0 <main+0x10d6>
					{
						Timer_setCallBack(Timer_Buzz, Timer1);
    2770:	8f e9       	ldi	r24, 0x9F	; 159
    2772:	97 e1       	ldi	r25, 0x17	; 23
    2774:	61 e0       	ldi	r22, 0x01	; 1
    2776:	0e 94 2a 1a 	call	0x3454	; 0x3454 <Timer_setCallBack>
						LCD_clearScreen();
    277a:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
						Timer_init(&timer);
    277e:	ce 01       	movw	r24, r28
    2780:	8c 56       	subi	r24, 0x6C	; 108
    2782:	9f 4f       	sbci	r25, 0xFF	; 255
    2784:	0e 94 90 18 	call	0x3120	; 0x3120 <Timer_init>
						while(g_holdSystem != RESUME_SYSTEM){}
    2788:	80 91 48 01 	lds	r24, 0x0148
    278c:	88 23       	and	r24, r24
    278e:	e1 f7       	brne	.-8      	; 0x2788 <main+0x10be>
						g_holdSystem = HOLD_SYSTEM;
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	80 93 48 01 	sts	0x0148, r24
						restart_mainProgram = TRUE;
    2796:	fe 01       	movw	r30, r28
    2798:	e3 57       	subi	r30, 0x73	; 115
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	80 83       	st	Z, r24
					}
				}
			}while( (check_EEPROM ==  MISMATCH) && (restart_mainProgram == FALSE) );
    27a0:	fe 01       	movw	r30, r28
    27a2:	e0 57       	subi	r30, 0x70	; 112
    27a4:	ff 4f       	sbci	r31, 0xFF	; 255
    27a6:	80 81       	ld	r24, Z
    27a8:	81 30       	cpi	r24, 0x01	; 1
    27aa:	39 f4       	brne	.+14     	; 0x27ba <main+0x10f0>
    27ac:	fe 01       	movw	r30, r28
    27ae:	e3 57       	subi	r30, 0x73	; 115
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	80 81       	ld	r24, Z
    27b4:	88 23       	and	r24, r24
    27b6:	09 f4       	brne	.+2      	; 0x27ba <main+0x10f0>
    27b8:	a6 ce       	rjmp	.-692    	; 0x2506 <main+0xe3c>

			if (check_EEPROM == MATCH)
    27ba:	fe 01       	movw	r30, r28
    27bc:	e0 57       	subi	r30, 0x70	; 112
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	80 81       	ld	r24, Z
    27c2:	88 23       	and	r24, r24
    27c4:	89 f4       	brne	.+34     	; 0x27e8 <main+0x111e>
			{
				Timer_setCallBack(Timer_CW, Timer1);
    27c6:	8a e7       	ldi	r24, 0x7A	; 122
    27c8:	97 e1       	ldi	r25, 0x17	; 23
    27ca:	61 e0       	ldi	r22, 0x01	; 1
    27cc:	0e 94 2a 1a 	call	0x3454	; 0x3454 <Timer_setCallBack>
				Timer_init(&timer);
    27d0:	ce 01       	movw	r24, r28
    27d2:	8c 56       	subi	r24, 0x6C	; 108
    27d4:	9f 4f       	sbci	r25, 0xFF	; 255
    27d6:	0e 94 90 18 	call	0x3120	; 0x3120 <Timer_init>
				while(g_holdSystem != RESUME_SYSTEM){}
    27da:	80 91 48 01 	lds	r24, 0x0148
    27de:	88 23       	and	r24, r24
    27e0:	e1 f7       	brne	.-8      	; 0x27da <main+0x1110>
				g_holdSystem = HOLD_SYSTEM;
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	80 93 48 01 	sts	0x0148, r24
			}
			danger_error = NO_DANGER;
    27e8:	fe 01       	movw	r30, r28
    27ea:	e2 57       	subi	r30, 0x72	; 114
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	10 82       	st	Z, r1
		}
		restart_mainProgram = FALSE;
    27f0:	fe 01       	movw	r30, r28
    27f2:	e3 57       	subi	r30, 0x73	; 115
    27f4:	ff 4f       	sbci	r31, 0xFF	; 255
    27f6:	10 82       	st	Z, r1
    27f8:	b2 ca       	rjmp	.-2716   	; 0x1d5e <main+0x694>

000027fa <mainOptions>:
/*
 * Takes void and returns the option chosen
 * Description: Main Options Function
 */
uint8 mainOptions (void)
{
    27fa:	df 93       	push	r29
    27fc:	cf 93       	push	r28
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	2f 97       	sbiw	r28, 0x0f	; 15
    2804:	0f b6       	in	r0, 0x3f	; 63
    2806:	f8 94       	cli
    2808:	de bf       	out	0x3e, r29	; 62
    280a:	0f be       	out	0x3f, r0	; 63
    280c:	cd bf       	out	0x3d, r28	; 61
	uint8 option;

	LCD_clearScreen();
    280e:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"1: Change pass");
    2812:	2b ea       	ldi	r18, 0xAB	; 171
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	60 e0       	ldi	r22, 0x00	; 0
    281a:	a9 01       	movw	r20, r18
    281c:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"2: Open door");
    2820:	2a eb       	ldi	r18, 0xBA	; 186
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	60 e0       	ldi	r22, 0x00	; 0
    2828:	a9 01       	movw	r20, r18
    282a:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>

	do
	{
	option = KeyPad_getPressedKey();
    282e:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    2832:	8f 87       	std	Y+15, r24	; 0x0f
	}while ( (option != CHOICE_1) && (option != CHOICE_2) );
    2834:	8f 85       	ldd	r24, Y+15	; 0x0f
    2836:	81 30       	cpi	r24, 0x01	; 1
    2838:	19 f0       	breq	.+6      	; 0x2840 <mainOptions+0x46>
    283a:	8f 85       	ldd	r24, Y+15	; 0x0f
    283c:	82 30       	cpi	r24, 0x02	; 2
    283e:	b9 f7       	brne	.-18     	; 0x282e <mainOptions+0x34>
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	aa ef       	ldi	r26, 0xFA	; 250
    2846:	b3 e4       	ldi	r27, 0x43	; 67
    2848:	8b 87       	std	Y+11, r24	; 0x0b
    284a:	9c 87       	std	Y+12, r25	; 0x0c
    284c:	ad 87       	std	Y+13, r26	; 0x0d
    284e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2850:	6b 85       	ldd	r22, Y+11	; 0x0b
    2852:	7c 85       	ldd	r23, Y+12	; 0x0c
    2854:	8d 85       	ldd	r24, Y+13	; 0x0d
    2856:	9e 85       	ldd	r25, Y+14	; 0x0e
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	4a ef       	ldi	r20, 0xFA	; 250
    285e:	54 e4       	ldi	r21, 0x44	; 68
    2860:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	8f 83       	std	Y+7, r24	; 0x07
    286a:	98 87       	std	Y+8, r25	; 0x08
    286c:	a9 87       	std	Y+9, r26	; 0x09
    286e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2870:	6f 81       	ldd	r22, Y+7	; 0x07
    2872:	78 85       	ldd	r23, Y+8	; 0x08
    2874:	89 85       	ldd	r24, Y+9	; 0x09
    2876:	9a 85       	ldd	r25, Y+10	; 0x0a
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	40 e8       	ldi	r20, 0x80	; 128
    287e:	5f e3       	ldi	r21, 0x3F	; 63
    2880:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2884:	88 23       	and	r24, r24
    2886:	2c f4       	brge	.+10     	; 0x2892 <mainOptions+0x98>
		__ticks = 1;
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	9e 83       	std	Y+6, r25	; 0x06
    288e:	8d 83       	std	Y+5, r24	; 0x05
    2890:	3f c0       	rjmp	.+126    	; 0x2910 <mainOptions+0x116>
	else if (__tmp > 65535)
    2892:	6f 81       	ldd	r22, Y+7	; 0x07
    2894:	78 85       	ldd	r23, Y+8	; 0x08
    2896:	89 85       	ldd	r24, Y+9	; 0x09
    2898:	9a 85       	ldd	r25, Y+10	; 0x0a
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	3f ef       	ldi	r19, 0xFF	; 255
    289e:	4f e7       	ldi	r20, 0x7F	; 127
    28a0:	57 e4       	ldi	r21, 0x47	; 71
    28a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28a6:	18 16       	cp	r1, r24
    28a8:	4c f5       	brge	.+82     	; 0x28fc <mainOptions+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    28b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	40 e2       	ldi	r20, 0x20	; 32
    28b8:	51 e4       	ldi	r21, 0x41	; 65
    28ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	bc 01       	movw	r22, r24
    28c4:	cd 01       	movw	r24, r26
    28c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	9e 83       	std	Y+6, r25	; 0x06
    28d0:	8d 83       	std	Y+5, r24	; 0x05
    28d2:	0f c0       	rjmp	.+30     	; 0x28f2 <mainOptions+0xf8>
    28d4:	88 ec       	ldi	r24, 0xC8	; 200
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	9c 83       	std	Y+4, r25	; 0x04
    28da:	8b 83       	std	Y+3, r24	; 0x03
    28dc:	8b 81       	ldd	r24, Y+3	; 0x03
    28de:	9c 81       	ldd	r25, Y+4	; 0x04
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	f1 f7       	brne	.-4      	; 0x28e0 <mainOptions+0xe6>
    28e4:	9c 83       	std	Y+4, r25	; 0x04
    28e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ea:	9e 81       	ldd	r25, Y+6	; 0x06
    28ec:	01 97       	sbiw	r24, 0x01	; 1
    28ee:	9e 83       	std	Y+6, r25	; 0x06
    28f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f2:	8d 81       	ldd	r24, Y+5	; 0x05
    28f4:	9e 81       	ldd	r25, Y+6	; 0x06
    28f6:	00 97       	sbiw	r24, 0x00	; 0
    28f8:	69 f7       	brne	.-38     	; 0x28d4 <mainOptions+0xda>
    28fa:	14 c0       	rjmp	.+40     	; 0x2924 <mainOptions+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28fc:	6f 81       	ldd	r22, Y+7	; 0x07
    28fe:	78 85       	ldd	r23, Y+8	; 0x08
    2900:	89 85       	ldd	r24, Y+9	; 0x09
    2902:	9a 85       	ldd	r25, Y+10	; 0x0a
    2904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	9e 83       	std	Y+6, r25	; 0x06
    290e:	8d 83       	std	Y+5, r24	; 0x05
    2910:	8d 81       	ldd	r24, Y+5	; 0x05
    2912:	9e 81       	ldd	r25, Y+6	; 0x06
    2914:	9a 83       	std	Y+2, r25	; 0x02
    2916:	89 83       	std	Y+1, r24	; 0x01
    2918:	89 81       	ldd	r24, Y+1	; 0x01
    291a:	9a 81       	ldd	r25, Y+2	; 0x02
    291c:	01 97       	sbiw	r24, 0x01	; 1
    291e:	f1 f7       	brne	.-4      	; 0x291c <mainOptions+0x122>
    2920:	9a 83       	std	Y+2, r25	; 0x02
    2922:	89 83       	std	Y+1, r24	; 0x01

	 _delay_ms(500);

	if (option == CHOICE_1)
    2924:	8f 85       	ldd	r24, Y+15	; 0x0f
    2926:	81 30       	cpi	r24, 0x01	; 1
    2928:	19 f4       	brne	.+6      	; 0x2930 <mainOptions+0x136>
	{
		option = CHOICE_1;
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	8f 87       	std	Y+15, r24	; 0x0f
    292e:	05 c0       	rjmp	.+10     	; 0x293a <mainOptions+0x140>
	}
	else if (option == CHOICE_2)
    2930:	8f 85       	ldd	r24, Y+15	; 0x0f
    2932:	82 30       	cpi	r24, 0x02	; 2
    2934:	11 f4       	brne	.+4      	; 0x293a <mainOptions+0x140>
	{
		option = CHOICE_2;
    2936:	82 e0       	ldi	r24, 0x02	; 2
    2938:	8f 87       	std	Y+15, r24	; 0x0f
	}
	return option;
    293a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    293c:	2f 96       	adiw	r28, 0x0f	; 15
    293e:	0f b6       	in	r0, 0x3f	; 63
    2940:	f8 94       	cli
    2942:	de bf       	out	0x3e, r29	; 62
    2944:	0f be       	out	0x3f, r0	; 63
    2946:	cd bf       	out	0x3d, r28	; 61
    2948:	cf 91       	pop	r28
    294a:	df 91       	pop	r29
    294c:	08 95       	ret

0000294e <checkPass>:
/*
 * Takes the Addresses of Two Passwords to Compare and return the status of mismatching
 * Description: Function to check the Password
 */
uint8 checkPass(uint8* pass1, uint8* pass2)
{
    294e:	df 93       	push	r29
    2950:	cf 93       	push	r28
    2952:	00 d0       	rcall	.+0      	; 0x2954 <checkPass+0x6>
    2954:	00 d0       	rcall	.+0      	; 0x2956 <checkPass+0x8>
    2956:	00 d0       	rcall	.+0      	; 0x2958 <checkPass+0xa>
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
    295c:	9c 83       	std	Y+4, r25	; 0x04
    295e:	8b 83       	std	Y+3, r24	; 0x03
    2960:	7e 83       	std	Y+6, r23	; 0x06
    2962:	6d 83       	std	Y+5, r22	; 0x05
	uint8 count;
	uint8 mismatch=0;
    2964:	19 82       	std	Y+1, r1	; 0x01
	for(count=INITIAL_VALUE; count<PASSWORD_WIDTH; count++)
    2966:	1a 82       	std	Y+2, r1	; 0x02
    2968:	1b c0       	rjmp	.+54     	; 0x29a0 <checkPass+0x52>
	{
		if( pass1[count] != pass2[count] )
    296a:	8a 81       	ldd	r24, Y+2	; 0x02
    296c:	28 2f       	mov	r18, r24
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	8b 81       	ldd	r24, Y+3	; 0x03
    2972:	9c 81       	ldd	r25, Y+4	; 0x04
    2974:	fc 01       	movw	r30, r24
    2976:	e2 0f       	add	r30, r18
    2978:	f3 1f       	adc	r31, r19
    297a:	40 81       	ld	r20, Z
    297c:	8a 81       	ldd	r24, Y+2	; 0x02
    297e:	28 2f       	mov	r18, r24
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	8d 81       	ldd	r24, Y+5	; 0x05
    2984:	9e 81       	ldd	r25, Y+6	; 0x06
    2986:	fc 01       	movw	r30, r24
    2988:	e2 0f       	add	r30, r18
    298a:	f3 1f       	adc	r31, r19
    298c:	80 81       	ld	r24, Z
    298e:	48 17       	cp	r20, r24
    2990:	21 f0       	breq	.+8      	; 0x299a <checkPass+0x4c>
		{
			mismatch = MISMATCH_OCCUR;
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	89 83       	std	Y+1, r24	; 0x01
			count= PASSWORD_WIDTH;
    2996:	84 e0       	ldi	r24, 0x04	; 4
    2998:	8a 83       	std	Y+2, r24	; 0x02
 */
uint8 checkPass(uint8* pass1, uint8* pass2)
{
	uint8 count;
	uint8 mismatch=0;
	for(count=INITIAL_VALUE; count<PASSWORD_WIDTH; count++)
    299a:	8a 81       	ldd	r24, Y+2	; 0x02
    299c:	8f 5f       	subi	r24, 0xFF	; 255
    299e:	8a 83       	std	Y+2, r24	; 0x02
    29a0:	8a 81       	ldd	r24, Y+2	; 0x02
    29a2:	84 30       	cpi	r24, 0x04	; 4
    29a4:	10 f3       	brcs	.-60     	; 0x296a <checkPass+0x1c>
		{
			mismatch = MISMATCH_OCCUR;
			count= PASSWORD_WIDTH;
		}
	}
	return mismatch;
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    29a8:	26 96       	adiw	r28, 0x06	; 6
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	f8 94       	cli
    29ae:	de bf       	out	0x3e, r29	; 62
    29b0:	0f be       	out	0x3f, r0	; 63
    29b2:	cd bf       	out	0x3d, r28	; 61
    29b4:	cf 91       	pop	r28
    29b6:	df 91       	pop	r29
    29b8:	08 95       	ret

000029ba <storePass>:
/*
 * Takes the Address of the password
 * Description: Function to store the Password
 */
void storePass(uint8 *pass)
{
    29ba:	0f 93       	push	r16
    29bc:	1f 93       	push	r17
    29be:	df 93       	push	r29
    29c0:	cf 93       	push	r28
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
    29c6:	61 97       	sbiw	r28, 0x11	; 17
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	f8 94       	cli
    29cc:	de bf       	out	0x3e, r29	; 62
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	cd bf       	out	0x3d, r28	; 61
    29d2:	99 8b       	std	Y+17, r25	; 0x11
    29d4:	88 8b       	std	Y+16, r24	; 0x10
	uint8 count;
	LCD_clearScreen();
    29d6:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter Password:");
    29da:	27 ec       	ldi	r18, 0xC7	; 199
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	80 e0       	ldi	r24, 0x00	; 0
    29e0:	60 e0       	ldi	r22, 0x00	; 0
    29e2:	a9 01       	movw	r20, r18
    29e4:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>

	for(count= INITIAL_VALUE ; count< PASSWORD_WIDTH; count++)
    29e8:	1f 86       	std	Y+15, r1	; 0x0f
    29ea:	8c c0       	rjmp	.+280    	; 0x2b04 <storePass+0x14a>
	{
		LCD_moveCursor(1,count);
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	6f 85       	ldd	r22, Y+15	; 0x0f
    29f0:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_moveCursor>
		pass[count] = KeyPad_getPressedKey();
    29f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    29f6:	28 2f       	mov	r18, r24
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	88 89       	ldd	r24, Y+16	; 0x10
    29fc:	99 89       	ldd	r25, Y+17	; 0x11
    29fe:	8c 01       	movw	r16, r24
    2a00:	02 0f       	add	r16, r18
    2a02:	13 1f       	adc	r17, r19
    2a04:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    2a08:	f8 01       	movw	r30, r16
    2a0a:	80 83       	st	Z, r24
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	aa ef       	ldi	r26, 0xFA	; 250
    2a12:	b3 e4       	ldi	r27, 0x43	; 67
    2a14:	8b 87       	std	Y+11, r24	; 0x0b
    2a16:	9c 87       	std	Y+12, r25	; 0x0c
    2a18:	ad 87       	std	Y+13, r26	; 0x0d
    2a1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	4a ef       	ldi	r20, 0xFA	; 250
    2a2a:	54 e4       	ldi	r21, 0x44	; 68
    2a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	8f 83       	std	Y+7, r24	; 0x07
    2a36:	98 87       	std	Y+8, r25	; 0x08
    2a38:	a9 87       	std	Y+9, r26	; 0x09
    2a3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a3e:	78 85       	ldd	r23, Y+8	; 0x08
    2a40:	89 85       	ldd	r24, Y+9	; 0x09
    2a42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	40 e8       	ldi	r20, 0x80	; 128
    2a4a:	5f e3       	ldi	r21, 0x3F	; 63
    2a4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a50:	88 23       	and	r24, r24
    2a52:	2c f4       	brge	.+10     	; 0x2a5e <storePass+0xa4>
		__ticks = 1;
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	9e 83       	std	Y+6, r25	; 0x06
    2a5a:	8d 83       	std	Y+5, r24	; 0x05
    2a5c:	3f c0       	rjmp	.+126    	; 0x2adc <storePass+0x122>
	else if (__tmp > 65535)
    2a5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a60:	78 85       	ldd	r23, Y+8	; 0x08
    2a62:	89 85       	ldd	r24, Y+9	; 0x09
    2a64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	3f ef       	ldi	r19, 0xFF	; 255
    2a6a:	4f e7       	ldi	r20, 0x7F	; 127
    2a6c:	57 e4       	ldi	r21, 0x47	; 71
    2a6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a72:	18 16       	cp	r1, r24
    2a74:	4c f5       	brge	.+82     	; 0x2ac8 <storePass+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	40 e2       	ldi	r20, 0x20	; 32
    2a84:	51 e4       	ldi	r21, 0x41	; 65
    2a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	bc 01       	movw	r22, r24
    2a90:	cd 01       	movw	r24, r26
    2a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	9e 83       	std	Y+6, r25	; 0x06
    2a9c:	8d 83       	std	Y+5, r24	; 0x05
    2a9e:	0f c0       	rjmp	.+30     	; 0x2abe <storePass+0x104>
    2aa0:	88 ec       	ldi	r24, 0xC8	; 200
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	9c 83       	std	Y+4, r25	; 0x04
    2aa6:	8b 83       	std	Y+3, r24	; 0x03
    2aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    2aac:	01 97       	sbiw	r24, 0x01	; 1
    2aae:	f1 f7       	brne	.-4      	; 0x2aac <storePass+0xf2>
    2ab0:	9c 83       	std	Y+4, r25	; 0x04
    2ab2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab8:	01 97       	sbiw	r24, 0x01	; 1
    2aba:	9e 83       	std	Y+6, r25	; 0x06
    2abc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2abe:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac2:	00 97       	sbiw	r24, 0x00	; 0
    2ac4:	69 f7       	brne	.-38     	; 0x2aa0 <storePass+0xe6>
    2ac6:	14 c0       	rjmp	.+40     	; 0x2af0 <storePass+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aca:	78 85       	ldd	r23, Y+8	; 0x08
    2acc:	89 85       	ldd	r24, Y+9	; 0x09
    2ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	9e 83       	std	Y+6, r25	; 0x06
    2ada:	8d 83       	std	Y+5, r24	; 0x05
    2adc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ade:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae0:	9a 83       	std	Y+2, r25	; 0x02
    2ae2:	89 83       	std	Y+1, r24	; 0x01
    2ae4:	89 81       	ldd	r24, Y+1	; 0x01
    2ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae8:	01 97       	sbiw	r24, 0x01	; 1
    2aea:	f1 f7       	brne	.-4      	; 0x2ae8 <storePass+0x12e>
    2aec:	9a 83       	std	Y+2, r25	; 0x02
    2aee:	89 83       	std	Y+1, r24	; 0x01
		else
		{
			LCD_displayCharacter(pass[count]);
		}*/
		_delay_ms(500);
		LCD_moveCursor(1,count);
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	6f 85       	ldd	r22, Y+15	; 0x0f
    2af4:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_moveCursor>
		LCD_displayCharacter('*');
    2af8:	8a e2       	ldi	r24, 0x2A	; 42
    2afa:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCD_displayCharacter>
{
	uint8 count;
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Enter Password:");

	for(count= INITIAL_VALUE ; count< PASSWORD_WIDTH; count++)
    2afe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b00:	8f 5f       	subi	r24, 0xFF	; 255
    2b02:	8f 87       	std	Y+15, r24	; 0x0f
    2b04:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b06:	84 30       	cpi	r24, 0x04	; 4
    2b08:	08 f4       	brcc	.+2      	; 0x2b0c <storePass+0x152>
    2b0a:	70 cf       	rjmp	.-288    	; 0x29ec <storePass+0x32>
		}*/
		_delay_ms(500);
		LCD_moveCursor(1,count);
		LCD_displayCharacter('*');
	}
	while( ( KeyPad_getPressedKey() )!= '='){}
    2b0c:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    2b10:	8d 33       	cpi	r24, 0x3D	; 61
    2b12:	e1 f7       	brne	.-8      	; 0x2b0c <storePass+0x152>
	LCD_clearScreen();
    2b14:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
}
    2b18:	61 96       	adiw	r28, 0x11	; 17
    2b1a:	0f b6       	in	r0, 0x3f	; 63
    2b1c:	f8 94       	cli
    2b1e:	de bf       	out	0x3e, r29	; 62
    2b20:	0f be       	out	0x3f, r0	; 63
    2b22:	cd bf       	out	0x3d, r28	; 61
    2b24:	cf 91       	pop	r28
    2b26:	df 91       	pop	r29
    2b28:	1f 91       	pop	r17
    2b2a:	0f 91       	pop	r16
    2b2c:	08 95       	ret

00002b2e <start_System>:
/*
 * Takes void returns void
 * Description: Start Function and Entering 2 Passwords
 */
void start_System(void)
{
    2b2e:	df 93       	push	r29
    2b30:	cf 93       	push	r28
    2b32:	cd b7       	in	r28, 0x3d	; 61
    2b34:	de b7       	in	r29, 0x3e	; 62
    2b36:	6c 97       	sbiw	r28, 0x1c	; 28
    2b38:	0f b6       	in	r0, 0x3f	; 63
    2b3a:	f8 94       	cli
    2b3c:	de bf       	out	0x3e, r29	; 62
    2b3e:	0f be       	out	0x3f, r0	; 63
    2b40:	cd bf       	out	0x3d, r28	; 61

	LCD_displayStringRowColumn(0,0,"Good Morning :)");
    2b42:	27 ed       	ldi	r18, 0xD7	; 215
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	60 e0       	ldi	r22, 0x00	; 0
    2b4a:	a9 01       	movw	r20, r18
    2b4c:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	a8 e4       	ldi	r26, 0x48	; 72
    2b56:	b4 e4       	ldi	r27, 0x44	; 68
    2b58:	89 8f       	std	Y+25, r24	; 0x19
    2b5a:	9a 8f       	std	Y+26, r25	; 0x1a
    2b5c:	ab 8f       	std	Y+27, r26	; 0x1b
    2b5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b60:	69 8d       	ldd	r22, Y+25	; 0x19
    2b62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	4a ef       	ldi	r20, 0xFA	; 250
    2b6e:	54 e4       	ldi	r21, 0x44	; 68
    2b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	8d 8b       	std	Y+21, r24	; 0x15
    2b7a:	9e 8b       	std	Y+22, r25	; 0x16
    2b7c:	af 8b       	std	Y+23, r26	; 0x17
    2b7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b80:	6d 89       	ldd	r22, Y+21	; 0x15
    2b82:	7e 89       	ldd	r23, Y+22	; 0x16
    2b84:	8f 89       	ldd	r24, Y+23	; 0x17
    2b86:	98 8d       	ldd	r25, Y+24	; 0x18
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	40 e8       	ldi	r20, 0x80	; 128
    2b8e:	5f e3       	ldi	r21, 0x3F	; 63
    2b90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b94:	88 23       	and	r24, r24
    2b96:	2c f4       	brge	.+10     	; 0x2ba2 <start_System+0x74>
		__ticks = 1;
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	9c 8b       	std	Y+20, r25	; 0x14
    2b9e:	8b 8b       	std	Y+19, r24	; 0x13
    2ba0:	3f c0       	rjmp	.+126    	; 0x2c20 <start_System+0xf2>
	else if (__tmp > 65535)
    2ba2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ba4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ba6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ba8:	98 8d       	ldd	r25, Y+24	; 0x18
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	3f ef       	ldi	r19, 0xFF	; 255
    2bae:	4f e7       	ldi	r20, 0x7F	; 127
    2bb0:	57 e4       	ldi	r21, 0x47	; 71
    2bb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bb6:	18 16       	cp	r1, r24
    2bb8:	4c f5       	brge	.+82     	; 0x2c0c <start_System+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bba:	69 8d       	ldd	r22, Y+25	; 0x19
    2bbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	40 e2       	ldi	r20, 0x20	; 32
    2bc8:	51 e4       	ldi	r21, 0x41	; 65
    2bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	bc 01       	movw	r22, r24
    2bd4:	cd 01       	movw	r24, r26
    2bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	9c 8b       	std	Y+20, r25	; 0x14
    2be0:	8b 8b       	std	Y+19, r24	; 0x13
    2be2:	0f c0       	rjmp	.+30     	; 0x2c02 <start_System+0xd4>
    2be4:	88 ec       	ldi	r24, 0xC8	; 200
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	9a 8b       	std	Y+18, r25	; 0x12
    2bea:	89 8b       	std	Y+17, r24	; 0x11
    2bec:	89 89       	ldd	r24, Y+17	; 0x11
    2bee:	9a 89       	ldd	r25, Y+18	; 0x12
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	f1 f7       	brne	.-4      	; 0x2bf0 <start_System+0xc2>
    2bf4:	9a 8b       	std	Y+18, r25	; 0x12
    2bf6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf8:	8b 89       	ldd	r24, Y+19	; 0x13
    2bfa:	9c 89       	ldd	r25, Y+20	; 0x14
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	9c 8b       	std	Y+20, r25	; 0x14
    2c00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c02:	8b 89       	ldd	r24, Y+19	; 0x13
    2c04:	9c 89       	ldd	r25, Y+20	; 0x14
    2c06:	00 97       	sbiw	r24, 0x00	; 0
    2c08:	69 f7       	brne	.-38     	; 0x2be4 <start_System+0xb6>
    2c0a:	14 c0       	rjmp	.+40     	; 0x2c34 <start_System+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c10:	8f 89       	ldd	r24, Y+23	; 0x17
    2c12:	98 8d       	ldd	r25, Y+24	; 0x18
    2c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c18:	dc 01       	movw	r26, r24
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	9c 8b       	std	Y+20, r25	; 0x14
    2c1e:	8b 8b       	std	Y+19, r24	; 0x13
    2c20:	8b 89       	ldd	r24, Y+19	; 0x13
    2c22:	9c 89       	ldd	r25, Y+20	; 0x14
    2c24:	98 8b       	std	Y+16, r25	; 0x10
    2c26:	8f 87       	std	Y+15, r24	; 0x0f
    2c28:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c2a:	98 89       	ldd	r25, Y+16	; 0x10
    2c2c:	01 97       	sbiw	r24, 0x01	; 1
    2c2e:	f1 f7       	brne	.-4      	; 0x2c2c <start_System+0xfe>
    2c30:	98 8b       	std	Y+16, r25	; 0x10
    2c32:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(800);

	storePass(g_password1);
    2c34:	8d e5       	ldi	r24, 0x5D	; 93
    2c36:	91 e0       	ldi	r25, 0x01	; 1
    2c38:	0e 94 dd 14 	call	0x29ba	; 0x29ba <storePass>

	LCD_displayStringRowColumn(0,0,"Re-Enter pass");
    2c3c:	27 ee       	ldi	r18, 0xE7	; 231
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	60 e0       	ldi	r22, 0x00	; 0
    2c44:	a9 01       	movw	r20, r18
    2c46:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	a8 e4       	ldi	r26, 0x48	; 72
    2c50:	b4 e4       	ldi	r27, 0x44	; 68
    2c52:	8b 87       	std	Y+11, r24	; 0x0b
    2c54:	9c 87       	std	Y+12, r25	; 0x0c
    2c56:	ad 87       	std	Y+13, r26	; 0x0d
    2c58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	4a ef       	ldi	r20, 0xFA	; 250
    2c68:	54 e4       	ldi	r21, 0x44	; 68
    2c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	8f 83       	std	Y+7, r24	; 0x07
    2c74:	98 87       	std	Y+8, r25	; 0x08
    2c76:	a9 87       	std	Y+9, r26	; 0x09
    2c78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7c:	78 85       	ldd	r23, Y+8	; 0x08
    2c7e:	89 85       	ldd	r24, Y+9	; 0x09
    2c80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	40 e8       	ldi	r20, 0x80	; 128
    2c88:	5f e3       	ldi	r21, 0x3F	; 63
    2c8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c8e:	88 23       	and	r24, r24
    2c90:	2c f4       	brge	.+10     	; 0x2c9c <start_System+0x16e>
		__ticks = 1;
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	9e 83       	std	Y+6, r25	; 0x06
    2c98:	8d 83       	std	Y+5, r24	; 0x05
    2c9a:	3f c0       	rjmp	.+126    	; 0x2d1a <start_System+0x1ec>
	else if (__tmp > 65535)
    2c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c9e:	78 85       	ldd	r23, Y+8	; 0x08
    2ca0:	89 85       	ldd	r24, Y+9	; 0x09
    2ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	3f ef       	ldi	r19, 0xFF	; 255
    2ca8:	4f e7       	ldi	r20, 0x7F	; 127
    2caa:	57 e4       	ldi	r21, 0x47	; 71
    2cac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cb0:	18 16       	cp	r1, r24
    2cb2:	4c f5       	brge	.+82     	; 0x2d06 <start_System+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	40 e2       	ldi	r20, 0x20	; 32
    2cc2:	51 e4       	ldi	r21, 0x41	; 65
    2cc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc8:	dc 01       	movw	r26, r24
    2cca:	cb 01       	movw	r24, r22
    2ccc:	bc 01       	movw	r22, r24
    2cce:	cd 01       	movw	r24, r26
    2cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	cb 01       	movw	r24, r22
    2cd8:	9e 83       	std	Y+6, r25	; 0x06
    2cda:	8d 83       	std	Y+5, r24	; 0x05
    2cdc:	0f c0       	rjmp	.+30     	; 0x2cfc <start_System+0x1ce>
    2cde:	88 ec       	ldi	r24, 0xC8	; 200
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	9c 83       	std	Y+4, r25	; 0x04
    2ce4:	8b 83       	std	Y+3, r24	; 0x03
    2ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cea:	01 97       	sbiw	r24, 0x01	; 1
    2cec:	f1 f7       	brne	.-4      	; 0x2cea <start_System+0x1bc>
    2cee:	9c 83       	std	Y+4, r25	; 0x04
    2cf0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf6:	01 97       	sbiw	r24, 0x01	; 1
    2cf8:	9e 83       	std	Y+6, r25	; 0x06
    2cfa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2d00:	00 97       	sbiw	r24, 0x00	; 0
    2d02:	69 f7       	brne	.-38     	; 0x2cde <start_System+0x1b0>
    2d04:	14 c0       	rjmp	.+40     	; 0x2d2e <start_System+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d06:	6f 81       	ldd	r22, Y+7	; 0x07
    2d08:	78 85       	ldd	r23, Y+8	; 0x08
    2d0a:	89 85       	ldd	r24, Y+9	; 0x09
    2d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d12:	dc 01       	movw	r26, r24
    2d14:	cb 01       	movw	r24, r22
    2d16:	9e 83       	std	Y+6, r25	; 0x06
    2d18:	8d 83       	std	Y+5, r24	; 0x05
    2d1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d1e:	9a 83       	std	Y+2, r25	; 0x02
    2d20:	89 83       	std	Y+1, r24	; 0x01
    2d22:	89 81       	ldd	r24, Y+1	; 0x01
    2d24:	9a 81       	ldd	r25, Y+2	; 0x02
    2d26:	01 97       	sbiw	r24, 0x01	; 1
    2d28:	f1 f7       	brne	.-4      	; 0x2d26 <start_System+0x1f8>
    2d2a:	9a 83       	std	Y+2, r25	; 0x02
    2d2c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(800);
	LCD_clearScreen();
    2d2e:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>

	storePass(g_password2);
    2d32:	81 e6       	ldi	r24, 0x61	; 97
    2d34:	91 e0       	ldi	r25, 0x01	; 1
    2d36:	0e 94 dd 14 	call	0x29ba	; 0x29ba <storePass>
}
    2d3a:	6c 96       	adiw	r28, 0x1c	; 28
    2d3c:	0f b6       	in	r0, 0x3f	; 63
    2d3e:	f8 94       	cli
    2d40:	de bf       	out	0x3e, r29	; 62
    2d42:	0f be       	out	0x3f, r0	; 63
    2d44:	cd bf       	out	0x3d, r28	; 61
    2d46:	cf 91       	pop	r28
    2d48:	df 91       	pop	r29
    2d4a:	08 95       	ret

00002d4c <Timer_CCW>:
/*
 * Takes void returns void
 * Description: Function to send to CU that door is opening in CCW Direction
 */
void Timer_CCW(void)
{
    2d4c:	df 93       	push	r29
    2d4e:	cf 93       	push	r28
    2d50:	cd b7       	in	r28, 0x3d	; 61
    2d52:	de b7       	in	r29, 0x3e	; 62
    2d54:	2e 97       	sbiw	r28, 0x0e	; 14
    2d56:	0f b6       	in	r0, 0x3f	; 63
    2d58:	f8 94       	cli
    2d5a:	de bf       	out	0x3e, r29	; 62
    2d5c:	0f be       	out	0x3f, r0	; 63
    2d5e:	cd bf       	out	0x3d, r28	; 61
	g_tickFlag++;
    2d60:	80 91 58 01 	lds	r24, 0x0158
    2d64:	8f 5f       	subi	r24, 0xFF	; 255
    2d66:	80 93 58 01 	sts	0x0158, r24
	if( g_tickFlag < MAXIMUM_SECONDS_ANTI_CLOCKWISE)
    2d6a:	80 91 58 01 	lds	r24, 0x0158
    2d6e:	8f 30       	cpi	r24, 0x0F	; 15
    2d70:	40 f4       	brcc	.+16     	; 0x2d82 <Timer_CCW+0x36>
	{
		LCD_displayStringRowColumn(0,0,"Door is Closing");
    2d72:	25 ef       	ldi	r18, 0xF5	; 245
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	80 e0       	ldi	r24, 0x00	; 0
    2d78:	60 e0       	ldi	r22, 0x00	; 0
    2d7a:	a9 01       	movw	r20, r18
    2d7c:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>
    2d80:	8b c0       	rjmp	.+278    	; 0x2e98 <Timer_CCW+0x14c>
	}

	else if(g_tickFlag == MAXIMUM_SECONDS_ANTI_CLOCKWISE)
    2d82:	80 91 58 01 	lds	r24, 0x0158
    2d86:	8f 30       	cpi	r24, 0x0F	; 15
    2d88:	09 f0       	breq	.+2      	; 0x2d8c <Timer_CCW+0x40>
    2d8a:	86 c0       	rjmp	.+268    	; 0x2e98 <Timer_CCW+0x14c>
	{
		LCD_clearScreen();
    2d8c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Door is Closed");
    2d90:	25 e0       	ldi	r18, 0x05	; 5
    2d92:	31 e0       	ldi	r19, 0x01	; 1
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	60 e0       	ldi	r22, 0x00	; 0
    2d98:	a9 01       	movw	r20, r18
    2d9a:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>
    2d9e:	80 e0       	ldi	r24, 0x00	; 0
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	aa e7       	ldi	r26, 0x7A	; 122
    2da4:	b4 e4       	ldi	r27, 0x44	; 68
    2da6:	8b 87       	std	Y+11, r24	; 0x0b
    2da8:	9c 87       	std	Y+12, r25	; 0x0c
    2daa:	ad 87       	std	Y+13, r26	; 0x0d
    2dac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2db0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2db2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2db4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	4a ef       	ldi	r20, 0xFA	; 250
    2dbc:	54 e4       	ldi	r21, 0x44	; 68
    2dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	cb 01       	movw	r24, r22
    2dc6:	8f 83       	std	Y+7, r24	; 0x07
    2dc8:	98 87       	std	Y+8, r25	; 0x08
    2dca:	a9 87       	std	Y+9, r26	; 0x09
    2dcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dce:	6f 81       	ldd	r22, Y+7	; 0x07
    2dd0:	78 85       	ldd	r23, Y+8	; 0x08
    2dd2:	89 85       	ldd	r24, Y+9	; 0x09
    2dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	40 e8       	ldi	r20, 0x80	; 128
    2ddc:	5f e3       	ldi	r21, 0x3F	; 63
    2dde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2de2:	88 23       	and	r24, r24
    2de4:	2c f4       	brge	.+10     	; 0x2df0 <Timer_CCW+0xa4>
		__ticks = 1;
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	9e 83       	std	Y+6, r25	; 0x06
    2dec:	8d 83       	std	Y+5, r24	; 0x05
    2dee:	3f c0       	rjmp	.+126    	; 0x2e6e <Timer_CCW+0x122>
	else if (__tmp > 65535)
    2df0:	6f 81       	ldd	r22, Y+7	; 0x07
    2df2:	78 85       	ldd	r23, Y+8	; 0x08
    2df4:	89 85       	ldd	r24, Y+9	; 0x09
    2df6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df8:	20 e0       	ldi	r18, 0x00	; 0
    2dfa:	3f ef       	ldi	r19, 0xFF	; 255
    2dfc:	4f e7       	ldi	r20, 0x7F	; 127
    2dfe:	57 e4       	ldi	r21, 0x47	; 71
    2e00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e04:	18 16       	cp	r1, r24
    2e06:	4c f5       	brge	.+82     	; 0x2e5a <Timer_CCW+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e08:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	40 e2       	ldi	r20, 0x20	; 32
    2e16:	51 e4       	ldi	r21, 0x41	; 65
    2e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	bc 01       	movw	r22, r24
    2e22:	cd 01       	movw	r24, r26
    2e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	9e 83       	std	Y+6, r25	; 0x06
    2e2e:	8d 83       	std	Y+5, r24	; 0x05
    2e30:	0f c0       	rjmp	.+30     	; 0x2e50 <Timer_CCW+0x104>
    2e32:	88 ec       	ldi	r24, 0xC8	; 200
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	9c 83       	std	Y+4, r25	; 0x04
    2e38:	8b 83       	std	Y+3, r24	; 0x03
    2e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e3e:	01 97       	sbiw	r24, 0x01	; 1
    2e40:	f1 f7       	brne	.-4      	; 0x2e3e <Timer_CCW+0xf2>
    2e42:	9c 83       	std	Y+4, r25	; 0x04
    2e44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e46:	8d 81       	ldd	r24, Y+5	; 0x05
    2e48:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4a:	01 97       	sbiw	r24, 0x01	; 1
    2e4c:	9e 83       	std	Y+6, r25	; 0x06
    2e4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e50:	8d 81       	ldd	r24, Y+5	; 0x05
    2e52:	9e 81       	ldd	r25, Y+6	; 0x06
    2e54:	00 97       	sbiw	r24, 0x00	; 0
    2e56:	69 f7       	brne	.-38     	; 0x2e32 <Timer_CCW+0xe6>
    2e58:	14 c0       	rjmp	.+40     	; 0x2e82 <Timer_CCW+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e5c:	78 85       	ldd	r23, Y+8	; 0x08
    2e5e:	89 85       	ldd	r24, Y+9	; 0x09
    2e60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	9e 83       	std	Y+6, r25	; 0x06
    2e6c:	8d 83       	std	Y+5, r24	; 0x05
    2e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e70:	9e 81       	ldd	r25, Y+6	; 0x06
    2e72:	9a 83       	std	Y+2, r25	; 0x02
    2e74:	89 83       	std	Y+1, r24	; 0x01
    2e76:	89 81       	ldd	r24, Y+1	; 0x01
    2e78:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7a:	01 97       	sbiw	r24, 0x01	; 1
    2e7c:	f1 f7       	brne	.-4      	; 0x2e7a <Timer_CCW+0x12e>
    2e7e:	9a 83       	std	Y+2, r25	; 0x02
    2e80:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_clearScreen();
    2e82:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
		Timer_DeInit(Timer1);
    2e86:	81 e0       	ldi	r24, 0x01	; 1
    2e88:	0e 94 83 1a 	call	0x3506	; 0x3506 <Timer_DeInit>
		g_tickFlag= 0;
    2e8c:	10 92 58 01 	sts	0x0158, r1
		g_holdSystem = RESUME_SYSTEM;
    2e90:	10 92 48 01 	sts	0x0148, r1
		LCD_clearScreen();
    2e94:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
	}
}
    2e98:	2e 96       	adiw	r28, 0x0e	; 14
    2e9a:	0f b6       	in	r0, 0x3f	; 63
    2e9c:	f8 94       	cli
    2e9e:	de bf       	out	0x3e, r29	; 62
    2ea0:	0f be       	out	0x3f, r0	; 63
    2ea2:	cd bf       	out	0x3d, r28	; 61
    2ea4:	cf 91       	pop	r28
    2ea6:	df 91       	pop	r29
    2ea8:	08 95       	ret

00002eaa <Timer_Stop>:
/*
 * Takes void returns void
 * Description: Function to send to CU that door is to stop
 */
void Timer_Stop(void)
{
    2eaa:	df 93       	push	r29
    2eac:	cf 93       	push	r28
    2eae:	cd b7       	in	r28, 0x3d	; 61
    2eb0:	de b7       	in	r29, 0x3e	; 62
	g_tickFlag++;
    2eb2:	80 91 58 01 	lds	r24, 0x0158
    2eb6:	8f 5f       	subi	r24, 0xFF	; 255
    2eb8:	80 93 58 01 	sts	0x0158, r24
	if( g_tickFlag < MAXIMUM_SECONDS_STOPPING)
    2ebc:	80 91 58 01 	lds	r24, 0x0158
    2ec0:	83 30       	cpi	r24, 0x03	; 3
    2ec2:	40 f4       	brcc	.+16     	; 0x2ed4 <Timer_Stop+0x2a>
	{
		LCD_displayStringRowColumn(0,0,"Door is Open");
    2ec4:	24 e1       	ldi	r18, 0x14	; 20
    2ec6:	31 e0       	ldi	r19, 0x01	; 1
    2ec8:	80 e0       	ldi	r24, 0x00	; 0
    2eca:	60 e0       	ldi	r22, 0x00	; 0
    2ecc:	a9 01       	movw	r20, r18
    2ece:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>
    2ed2:	0d c0       	rjmp	.+26     	; 0x2eee <Timer_Stop+0x44>
	}
	else if(g_tickFlag == MAXIMUM_SECONDS_STOPPING)
    2ed4:	80 91 58 01 	lds	r24, 0x0158
    2ed8:	83 30       	cpi	r24, 0x03	; 3
    2eda:	49 f4       	brne	.+18     	; 0x2eee <Timer_Stop+0x44>
	{
		g_tickFlag=0;
    2edc:	10 92 58 01 	sts	0x0158, r1
		Timer_setCallBack(Timer_CCW, Timer1);
    2ee0:	86 ea       	ldi	r24, 0xA6	; 166
    2ee2:	96 e1       	ldi	r25, 0x16	; 22
    2ee4:	61 e0       	ldi	r22, 0x01	; 1
    2ee6:	0e 94 2a 1a 	call	0x3454	; 0x3454 <Timer_setCallBack>
		LCD_clearScreen();
    2eea:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
	}
}
    2eee:	cf 91       	pop	r28
    2ef0:	df 91       	pop	r29
    2ef2:	08 95       	ret

00002ef4 <Timer_CW>:
/*
 * Takes void returns void
 * Description: Function to send to CU that door is opening in CW Direction
 */
void Timer_CW(void)
{
    2ef4:	df 93       	push	r29
    2ef6:	cf 93       	push	r28
    2ef8:	cd b7       	in	r28, 0x3d	; 61
    2efa:	de b7       	in	r29, 0x3e	; 62
	g_tickFlag++;
    2efc:	80 91 58 01 	lds	r24, 0x0158
    2f00:	8f 5f       	subi	r24, 0xFF	; 255
    2f02:	80 93 58 01 	sts	0x0158, r24
	if( g_tickFlag < MAXIMUM_SECONDS_CLOCKWISE)
    2f06:	80 91 58 01 	lds	r24, 0x0158
    2f0a:	8f 30       	cpi	r24, 0x0F	; 15
    2f0c:	40 f4       	brcc	.+16     	; 0x2f1e <Timer_CW+0x2a>
	{
		LCD_displayStringRowColumn(0,0,"Door is Opening");
    2f0e:	21 e2       	ldi	r18, 0x21	; 33
    2f10:	31 e0       	ldi	r19, 0x01	; 1
    2f12:	80 e0       	ldi	r24, 0x00	; 0
    2f14:	60 e0       	ldi	r22, 0x00	; 0
    2f16:	a9 01       	movw	r20, r18
    2f18:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>
    2f1c:	0d c0       	rjmp	.+26     	; 0x2f38 <Timer_CW+0x44>
	}
	else if(g_tickFlag == MAXIMUM_SECONDS_CLOCKWISE)
    2f1e:	80 91 58 01 	lds	r24, 0x0158
    2f22:	8f 30       	cpi	r24, 0x0F	; 15
    2f24:	49 f4       	brne	.+18     	; 0x2f38 <Timer_CW+0x44>
	{
		g_tickFlag=0;
    2f26:	10 92 58 01 	sts	0x0158, r1
		Timer_setCallBack(Timer_Stop, Timer1);
    2f2a:	85 e5       	ldi	r24, 0x55	; 85
    2f2c:	97 e1       	ldi	r25, 0x17	; 23
    2f2e:	61 e0       	ldi	r22, 0x01	; 1
    2f30:	0e 94 2a 1a 	call	0x3454	; 0x3454 <Timer_setCallBack>
		LCD_clearScreen();
    2f34:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
	}
}
    2f38:	cf 91       	pop	r28
    2f3a:	df 91       	pop	r29
    2f3c:	08 95       	ret

00002f3e <Timer_Buzz>:
/*
 * Takes void returns void
 * Description: Function to send to CU that buzzer should be activated
 */
void Timer_Buzz(void)
{
    2f3e:	df 93       	push	r29
    2f40:	cf 93       	push	r28
    2f42:	cd b7       	in	r28, 0x3d	; 61
    2f44:	de b7       	in	r29, 0x3e	; 62
	g_tickFlag++;
    2f46:	80 91 58 01 	lds	r24, 0x0158
    2f4a:	8f 5f       	subi	r24, 0xFF	; 255
    2f4c:	80 93 58 01 	sts	0x0158, r24
	if( g_tickFlag < MAXIMUM_SECONDS_BUZZER)
    2f50:	80 91 58 01 	lds	r24, 0x0158
    2f54:	8c 33       	cpi	r24, 0x3C	; 60
    2f56:	40 f4       	brcc	.+16     	; 0x2f68 <Timer_Buzz+0x2a>
	{
		LCD_displayStringRowColumn(0,0,"3 WRONG TRIES!");
    2f58:	21 e3       	ldi	r18, 0x31	; 49
    2f5a:	31 e0       	ldi	r19, 0x01	; 1
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	60 e0       	ldi	r22, 0x00	; 0
    2f60:	a9 01       	movw	r20, r18
    2f62:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>
    2f66:	0d c0       	rjmp	.+26     	; 0x2f82 <Timer_Buzz+0x44>
	}
	else if(g_tickFlag == MAXIMUM_SECONDS_BUZZER )
    2f68:	80 91 58 01 	lds	r24, 0x0158
    2f6c:	8c 33       	cpi	r24, 0x3C	; 60
    2f6e:	49 f4       	brne	.+18     	; 0x2f82 <Timer_Buzz+0x44>
	{
		Timer_DeInit(Timer1);
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	0e 94 83 1a 	call	0x3506	; 0x3506 <Timer_DeInit>
		g_tickFlag=0;
    2f76:	10 92 58 01 	sts	0x0158, r1
		g_holdSystem= RESUME_SYSTEM;
    2f7a:	10 92 48 01 	sts	0x0148, r1
		LCD_clearScreen();
    2f7e:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
	}
}
    2f82:	cf 91       	pop	r28
    2f84:	df 91       	pop	r29
    2f86:	08 95       	ret

00002f88 <__vector_9>:
static volatile void (*g_Timer1_callBackPtr)(void) = NULL_PTR;
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect)
{
    2f88:	1f 92       	push	r1
    2f8a:	0f 92       	push	r0
    2f8c:	0f b6       	in	r0, 0x3f	; 63
    2f8e:	0f 92       	push	r0
    2f90:	11 24       	eor	r1, r1
    2f92:	2f 93       	push	r18
    2f94:	3f 93       	push	r19
    2f96:	4f 93       	push	r20
    2f98:	5f 93       	push	r21
    2f9a:	6f 93       	push	r22
    2f9c:	7f 93       	push	r23
    2f9e:	8f 93       	push	r24
    2fa0:	9f 93       	push	r25
    2fa2:	af 93       	push	r26
    2fa4:	bf 93       	push	r27
    2fa6:	ef 93       	push	r30
    2fa8:	ff 93       	push	r31
    2faa:	df 93       	push	r29
    2fac:	cf 93       	push	r28
    2fae:	cd b7       	in	r28, 0x3d	; 61
    2fb0:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    2fb2:	80 91 59 01 	lds	r24, 0x0159
    2fb6:	90 91 5a 01 	lds	r25, 0x015A
    2fba:	00 97       	sbiw	r24, 0x00	; 0
    2fbc:	29 f0       	breq	.+10     	; 0x2fc8 <__vector_9+0x40>
	{
		(*g_Timer0_callBackPtr)();
    2fbe:	e0 91 59 01 	lds	r30, 0x0159
    2fc2:	f0 91 5a 01 	lds	r31, 0x015A
    2fc6:	09 95       	icall
	}
}
    2fc8:	cf 91       	pop	r28
    2fca:	df 91       	pop	r29
    2fcc:	ff 91       	pop	r31
    2fce:	ef 91       	pop	r30
    2fd0:	bf 91       	pop	r27
    2fd2:	af 91       	pop	r26
    2fd4:	9f 91       	pop	r25
    2fd6:	8f 91       	pop	r24
    2fd8:	7f 91       	pop	r23
    2fda:	6f 91       	pop	r22
    2fdc:	5f 91       	pop	r21
    2fde:	4f 91       	pop	r20
    2fe0:	3f 91       	pop	r19
    2fe2:	2f 91       	pop	r18
    2fe4:	0f 90       	pop	r0
    2fe6:	0f be       	out	0x3f, r0	; 63
    2fe8:	0f 90       	pop	r0
    2fea:	1f 90       	pop	r1
    2fec:	18 95       	reti

00002fee <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    2fee:	1f 92       	push	r1
    2ff0:	0f 92       	push	r0
    2ff2:	0f b6       	in	r0, 0x3f	; 63
    2ff4:	0f 92       	push	r0
    2ff6:	11 24       	eor	r1, r1
    2ff8:	2f 93       	push	r18
    2ffa:	3f 93       	push	r19
    2ffc:	4f 93       	push	r20
    2ffe:	5f 93       	push	r21
    3000:	6f 93       	push	r22
    3002:	7f 93       	push	r23
    3004:	8f 93       	push	r24
    3006:	9f 93       	push	r25
    3008:	af 93       	push	r26
    300a:	bf 93       	push	r27
    300c:	ef 93       	push	r30
    300e:	ff 93       	push	r31
    3010:	df 93       	push	r29
    3012:	cf 93       	push	r28
    3014:	cd b7       	in	r28, 0x3d	; 61
    3016:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    3018:	80 91 59 01 	lds	r24, 0x0159
    301c:	90 91 5a 01 	lds	r25, 0x015A
    3020:	00 97       	sbiw	r24, 0x00	; 0
    3022:	29 f0       	breq	.+10     	; 0x302e <__vector_19+0x40>
	{
		(*g_Timer0_callBackPtr)();
    3024:	e0 91 59 01 	lds	r30, 0x0159
    3028:	f0 91 5a 01 	lds	r31, 0x015A
    302c:	09 95       	icall
	}
}
    302e:	cf 91       	pop	r28
    3030:	df 91       	pop	r29
    3032:	ff 91       	pop	r31
    3034:	ef 91       	pop	r30
    3036:	bf 91       	pop	r27
    3038:	af 91       	pop	r26
    303a:	9f 91       	pop	r25
    303c:	8f 91       	pop	r24
    303e:	7f 91       	pop	r23
    3040:	6f 91       	pop	r22
    3042:	5f 91       	pop	r21
    3044:	4f 91       	pop	r20
    3046:	3f 91       	pop	r19
    3048:	2f 91       	pop	r18
    304a:	0f 90       	pop	r0
    304c:	0f be       	out	0x3f, r0	; 63
    304e:	0f 90       	pop	r0
    3050:	1f 90       	pop	r1
    3052:	18 95       	reti

00003054 <__vector_8>:

ISR(TIMER1_OVF_vect)
{
    3054:	1f 92       	push	r1
    3056:	0f 92       	push	r0
    3058:	0f b6       	in	r0, 0x3f	; 63
    305a:	0f 92       	push	r0
    305c:	11 24       	eor	r1, r1
    305e:	2f 93       	push	r18
    3060:	3f 93       	push	r19
    3062:	4f 93       	push	r20
    3064:	5f 93       	push	r21
    3066:	6f 93       	push	r22
    3068:	7f 93       	push	r23
    306a:	8f 93       	push	r24
    306c:	9f 93       	push	r25
    306e:	af 93       	push	r26
    3070:	bf 93       	push	r27
    3072:	ef 93       	push	r30
    3074:	ff 93       	push	r31
    3076:	df 93       	push	r29
    3078:	cf 93       	push	r28
    307a:	cd b7       	in	r28, 0x3d	; 61
    307c:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtr != NULL_PTR)
    307e:	80 91 5b 01 	lds	r24, 0x015B
    3082:	90 91 5c 01 	lds	r25, 0x015C
    3086:	00 97       	sbiw	r24, 0x00	; 0
    3088:	29 f0       	breq	.+10     	; 0x3094 <__vector_8+0x40>
	{
		(*g_Timer1_callBackPtr)();
    308a:	e0 91 5b 01 	lds	r30, 0x015B
    308e:	f0 91 5c 01 	lds	r31, 0x015C
    3092:	09 95       	icall
	}
}
    3094:	cf 91       	pop	r28
    3096:	df 91       	pop	r29
    3098:	ff 91       	pop	r31
    309a:	ef 91       	pop	r30
    309c:	bf 91       	pop	r27
    309e:	af 91       	pop	r26
    30a0:	9f 91       	pop	r25
    30a2:	8f 91       	pop	r24
    30a4:	7f 91       	pop	r23
    30a6:	6f 91       	pop	r22
    30a8:	5f 91       	pop	r21
    30aa:	4f 91       	pop	r20
    30ac:	3f 91       	pop	r19
    30ae:	2f 91       	pop	r18
    30b0:	0f 90       	pop	r0
    30b2:	0f be       	out	0x3f, r0	; 63
    30b4:	0f 90       	pop	r0
    30b6:	1f 90       	pop	r1
    30b8:	18 95       	reti

000030ba <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    30ba:	1f 92       	push	r1
    30bc:	0f 92       	push	r0
    30be:	0f b6       	in	r0, 0x3f	; 63
    30c0:	0f 92       	push	r0
    30c2:	11 24       	eor	r1, r1
    30c4:	2f 93       	push	r18
    30c6:	3f 93       	push	r19
    30c8:	4f 93       	push	r20
    30ca:	5f 93       	push	r21
    30cc:	6f 93       	push	r22
    30ce:	7f 93       	push	r23
    30d0:	8f 93       	push	r24
    30d2:	9f 93       	push	r25
    30d4:	af 93       	push	r26
    30d6:	bf 93       	push	r27
    30d8:	ef 93       	push	r30
    30da:	ff 93       	push	r31
    30dc:	df 93       	push	r29
    30de:	cf 93       	push	r28
    30e0:	cd b7       	in	r28, 0x3d	; 61
    30e2:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtr != NULL_PTR)
    30e4:	80 91 5b 01 	lds	r24, 0x015B
    30e8:	90 91 5c 01 	lds	r25, 0x015C
    30ec:	00 97       	sbiw	r24, 0x00	; 0
    30ee:	29 f0       	breq	.+10     	; 0x30fa <__vector_6+0x40>
	{
		(*g_Timer1_callBackPtr)();
    30f0:	e0 91 5b 01 	lds	r30, 0x015B
    30f4:	f0 91 5c 01 	lds	r31, 0x015C
    30f8:	09 95       	icall
	}
}
    30fa:	cf 91       	pop	r28
    30fc:	df 91       	pop	r29
    30fe:	ff 91       	pop	r31
    3100:	ef 91       	pop	r30
    3102:	bf 91       	pop	r27
    3104:	af 91       	pop	r26
    3106:	9f 91       	pop	r25
    3108:	8f 91       	pop	r24
    310a:	7f 91       	pop	r23
    310c:	6f 91       	pop	r22
    310e:	5f 91       	pop	r21
    3110:	4f 91       	pop	r20
    3112:	3f 91       	pop	r19
    3114:	2f 91       	pop	r18
    3116:	0f 90       	pop	r0
    3118:	0f be       	out	0x3f, r0	; 63
    311a:	0f 90       	pop	r0
    311c:	1f 90       	pop	r1
    311e:	18 95       	reti

00003120 <Timer_init>:
 *******************************************************************************/
/*
 * Description:  Function to Initialize Timer Driver
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    3120:	df 93       	push	r29
    3122:	cf 93       	push	r28
    3124:	cd b7       	in	r28, 0x3d	; 61
    3126:	de b7       	in	r29, 0x3e	; 62
    3128:	2c 97       	sbiw	r28, 0x0c	; 12
    312a:	0f b6       	in	r0, 0x3f	; 63
    312c:	f8 94       	cli
    312e:	de bf       	out	0x3e, r29	; 62
    3130:	0f be       	out	0x3f, r0	; 63
    3132:	cd bf       	out	0x3d, r28	; 61
    3134:	9a 83       	std	Y+2, r25	; 0x02
    3136:	89 83       	std	Y+1, r24	; 0x01

	switch(Config_Ptr->timer_ID)
    3138:	e9 81       	ldd	r30, Y+1	; 0x01
    313a:	fa 81       	ldd	r31, Y+2	; 0x02
    313c:	80 85       	ldd	r24, Z+8	; 0x08
    313e:	28 2f       	mov	r18, r24
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	3c 87       	std	Y+12, r19	; 0x0c
    3144:	2b 87       	std	Y+11, r18	; 0x0b
    3146:	8b 85       	ldd	r24, Y+11	; 0x0b
    3148:	9c 85       	ldd	r25, Y+12	; 0x0c
    314a:	00 97       	sbiw	r24, 0x00	; 0
    314c:	39 f0       	breq	.+14     	; 0x315c <Timer_init+0x3c>
    314e:	eb 85       	ldd	r30, Y+11	; 0x0b
    3150:	fc 85       	ldd	r31, Y+12	; 0x0c
    3152:	e1 30       	cpi	r30, 0x01	; 1
    3154:	f1 05       	cpc	r31, r1
    3156:	09 f4       	brne	.+2      	; 0x315a <Timer_init+0x3a>
    3158:	c4 c0       	rjmp	.+392    	; 0x32e2 <Timer_init+0x1c2>
    315a:	73 c1       	rjmp	.+742    	; 0x3442 <Timer_init+0x322>
	{

	case Timer0:
		TCCR0 &= 0X00;
    315c:	e3 e5       	ldi	r30, 0x53	; 83
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	20 81       	ld	r18, Z
    3162:	e3 e5       	ldi	r30, 0x53	; 83
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	10 82       	st	Z, r1
		TCNT0 &= 0X00;
    3168:	e2 e5       	ldi	r30, 0x52	; 82
    316a:	f0 e0       	ldi	r31, 0x00	; 0
    316c:	30 81       	ld	r19, Z
    316e:	e2 e5       	ldi	r30, 0x52	; 82
    3170:	f0 e0       	ldi	r31, 0x00	; 0
    3172:	10 82       	st	Z, r1
		OCR0 &= 0X00;
    3174:	ec e5       	ldi	r30, 0x5C	; 92
    3176:	f0 e0       	ldi	r31, 0x00	; 0
    3178:	80 81       	ld	r24, Z
    317a:	ec e5       	ldi	r30, 0x5C	; 92
    317c:	f0 e0       	ldi	r31, 0x00	; 0
    317e:	10 82       	st	Z, r1
		TIMSK &= 0X00;
    3180:	e9 e5       	ldi	r30, 0x59	; 89
    3182:	f0 e0       	ldi	r31, 0x00	; 0
    3184:	90 81       	ld	r25, Z
    3186:	e9 e5       	ldi	r30, 0x59	; 89
    3188:	f0 e0       	ldi	r31, 0x00	; 0
    318a:	10 82       	st	Z, r1
		TCCR0 = ( (Config_Ptr->timer_InitialValue) ) & 0XFF;
    318c:	23 e5       	ldi	r18, 0x53	; 83
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	e9 81       	ldd	r30, Y+1	; 0x01
    3192:	fa 81       	ldd	r31, Y+2	; 0x02
    3194:	80 81       	ld	r24, Z
    3196:	91 81       	ldd	r25, Z+1	; 0x01
    3198:	a2 81       	ldd	r26, Z+2	; 0x02
    319a:	b3 81       	ldd	r27, Z+3	; 0x03
    319c:	f9 01       	movw	r30, r18
    319e:	80 83       	st	Z, r24
		TCCR0 = (TCCR0  & 0XF8) | (Config_Ptr->timer_clock);
    31a0:	a3 e5       	ldi	r26, 0x53	; 83
    31a2:	b0 e0       	ldi	r27, 0x00	; 0
    31a4:	e3 e5       	ldi	r30, 0x53	; 83
    31a6:	f0 e0       	ldi	r31, 0x00	; 0
    31a8:	80 81       	ld	r24, Z
    31aa:	98 2f       	mov	r25, r24
    31ac:	98 7f       	andi	r25, 0xF8	; 248
    31ae:	e9 81       	ldd	r30, Y+1	; 0x01
    31b0:	fa 81       	ldd	r31, Y+2	; 0x02
    31b2:	81 85       	ldd	r24, Z+9	; 0x09
    31b4:	89 2b       	or	r24, r25
    31b6:	8c 93       	st	X, r24
		TCCR0  = CLEAR_BIT(TCCR0 , COM00);
    31b8:	23 e5       	ldi	r18, 0x53	; 83
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	a3 e5       	ldi	r26, 0x53	; 83
    31be:	b0 e0       	ldi	r27, 0x00	; 0
    31c0:	e3 e5       	ldi	r30, 0x53	; 83
    31c2:	f0 e0       	ldi	r31, 0x00	; 0
    31c4:	80 81       	ld	r24, Z
    31c6:	8f 7e       	andi	r24, 0xEF	; 239
    31c8:	8c 93       	st	X, r24
    31ca:	8c 91       	ld	r24, X
    31cc:	f9 01       	movw	r30, r18
    31ce:	80 83       	st	Z, r24
		TCCR0  = CLEAR_BIT(TCCR0 , COM01);
    31d0:	23 e5       	ldi	r18, 0x53	; 83
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	a3 e5       	ldi	r26, 0x53	; 83
    31d6:	b0 e0       	ldi	r27, 0x00	; 0
    31d8:	e3 e5       	ldi	r30, 0x53	; 83
    31da:	f0 e0       	ldi	r31, 0x00	; 0
    31dc:	80 81       	ld	r24, Z
    31de:	8f 7d       	andi	r24, 0xDF	; 223
    31e0:	8c 93       	st	X, r24
    31e2:	8c 91       	ld	r24, X
    31e4:	f9 01       	movw	r30, r18
    31e6:	80 83       	st	Z, r24

		switch(Config_Ptr->timer_mode)
    31e8:	e9 81       	ldd	r30, Y+1	; 0x01
    31ea:	fa 81       	ldd	r31, Y+2	; 0x02
    31ec:	82 85       	ldd	r24, Z+10	; 0x0a
    31ee:	28 2f       	mov	r18, r24
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	3e 83       	std	Y+6, r19	; 0x06
    31f4:	2d 83       	std	Y+5, r18	; 0x05
    31f6:	8d 81       	ldd	r24, Y+5	; 0x05
    31f8:	9e 81       	ldd	r25, Y+6	; 0x06
    31fa:	00 97       	sbiw	r24, 0x00	; 0
    31fc:	31 f0       	breq	.+12     	; 0x320a <Timer_init+0xea>
    31fe:	ed 81       	ldd	r30, Y+5	; 0x05
    3200:	fe 81       	ldd	r31, Y+6	; 0x06
    3202:	e1 30       	cpi	r30, 0x01	; 1
    3204:	f1 05       	cpc	r31, r1
    3206:	91 f1       	breq	.+100    	; 0x326c <Timer_init+0x14c>
    3208:	1c c1       	rjmp	.+568    	; 0x3442 <Timer_init+0x322>
		{
		case Overflow:

			TCCR0  = CLEAR_BIT(TCCR0 , WGM00);
    320a:	23 e5       	ldi	r18, 0x53	; 83
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	a3 e5       	ldi	r26, 0x53	; 83
    3210:	b0 e0       	ldi	r27, 0x00	; 0
    3212:	e3 e5       	ldi	r30, 0x53	; 83
    3214:	f0 e0       	ldi	r31, 0x00	; 0
    3216:	80 81       	ld	r24, Z
    3218:	8f 7b       	andi	r24, 0xBF	; 191
    321a:	8c 93       	st	X, r24
    321c:	8c 91       	ld	r24, X
    321e:	f9 01       	movw	r30, r18
    3220:	80 83       	st	Z, r24
			TCCR0  = CLEAR_BIT(TCCR0 , WGM01);
    3222:	23 e5       	ldi	r18, 0x53	; 83
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	a3 e5       	ldi	r26, 0x53	; 83
    3228:	b0 e0       	ldi	r27, 0x00	; 0
    322a:	e3 e5       	ldi	r30, 0x53	; 83
    322c:	f0 e0       	ldi	r31, 0x00	; 0
    322e:	80 81       	ld	r24, Z
    3230:	87 7f       	andi	r24, 0xF7	; 247
    3232:	8c 93       	st	X, r24
    3234:	8c 91       	ld	r24, X
    3236:	f9 01       	movw	r30, r18
    3238:	80 83       	st	Z, r24
			TCCR0 = SET_BIT(TCCR0,FOC0);
    323a:	23 e5       	ldi	r18, 0x53	; 83
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	a3 e5       	ldi	r26, 0x53	; 83
    3240:	b0 e0       	ldi	r27, 0x00	; 0
    3242:	e3 e5       	ldi	r30, 0x53	; 83
    3244:	f0 e0       	ldi	r31, 0x00	; 0
    3246:	80 81       	ld	r24, Z
    3248:	80 68       	ori	r24, 0x80	; 128
    324a:	8c 93       	st	X, r24
    324c:	8c 91       	ld	r24, X
    324e:	f9 01       	movw	r30, r18
    3250:	80 83       	st	Z, r24
			TIMSK = SET_BIT(TIMSK, TOIE0);
    3252:	29 e5       	ldi	r18, 0x59	; 89
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	a9 e5       	ldi	r26, 0x59	; 89
    3258:	b0 e0       	ldi	r27, 0x00	; 0
    325a:	e9 e5       	ldi	r30, 0x59	; 89
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	80 81       	ld	r24, Z
    3260:	81 60       	ori	r24, 0x01	; 1
    3262:	8c 93       	st	X, r24
    3264:	8c 91       	ld	r24, X
    3266:	f9 01       	movw	r30, r18
    3268:	80 83       	st	Z, r24
    326a:	eb c0       	rjmp	.+470    	; 0x3442 <Timer_init+0x322>
			break;

		case Compare:
			TCCR0 = CLEAR_BIT(TCCR0, WGM00);
    326c:	23 e5       	ldi	r18, 0x53	; 83
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	a3 e5       	ldi	r26, 0x53	; 83
    3272:	b0 e0       	ldi	r27, 0x00	; 0
    3274:	e3 e5       	ldi	r30, 0x53	; 83
    3276:	f0 e0       	ldi	r31, 0x00	; 0
    3278:	80 81       	ld	r24, Z
    327a:	8f 7b       	andi	r24, 0xBF	; 191
    327c:	8c 93       	st	X, r24
    327e:	8c 91       	ld	r24, X
    3280:	f9 01       	movw	r30, r18
    3282:	80 83       	st	Z, r24
			TCCR0 = SET_BIT(TCCR0, WGM01);
    3284:	23 e5       	ldi	r18, 0x53	; 83
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	a3 e5       	ldi	r26, 0x53	; 83
    328a:	b0 e0       	ldi	r27, 0x00	; 0
    328c:	e3 e5       	ldi	r30, 0x53	; 83
    328e:	f0 e0       	ldi	r31, 0x00	; 0
    3290:	80 81       	ld	r24, Z
    3292:	88 60       	ori	r24, 0x08	; 8
    3294:	8c 93       	st	X, r24
    3296:	8c 91       	ld	r24, X
    3298:	f9 01       	movw	r30, r18
    329a:	80 83       	st	Z, r24
			TCCR0 = SET_BIT(TCCR0, FOC0);
    329c:	23 e5       	ldi	r18, 0x53	; 83
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	a3 e5       	ldi	r26, 0x53	; 83
    32a2:	b0 e0       	ldi	r27, 0x00	; 0
    32a4:	e3 e5       	ldi	r30, 0x53	; 83
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	80 81       	ld	r24, Z
    32aa:	80 68       	ori	r24, 0x80	; 128
    32ac:	8c 93       	st	X, r24
    32ae:	8c 91       	ld	r24, X
    32b0:	f9 01       	movw	r30, r18
    32b2:	80 83       	st	Z, r24
			OCR0 = ((Config_Ptr->timer_compare_MatchValue)) & 0XFF;
    32b4:	2c e5       	ldi	r18, 0x5C	; 92
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	e9 81       	ldd	r30, Y+1	; 0x01
    32ba:	fa 81       	ldd	r31, Y+2	; 0x02
    32bc:	84 81       	ldd	r24, Z+4	; 0x04
    32be:	95 81       	ldd	r25, Z+5	; 0x05
    32c0:	a6 81       	ldd	r26, Z+6	; 0x06
    32c2:	b7 81       	ldd	r27, Z+7	; 0x07
    32c4:	f9 01       	movw	r30, r18
    32c6:	80 83       	st	Z, r24
			TIMSK = SET_BIT(TIMSK, OCIE0);
    32c8:	29 e5       	ldi	r18, 0x59	; 89
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	a9 e5       	ldi	r26, 0x59	; 89
    32ce:	b0 e0       	ldi	r27, 0x00	; 0
    32d0:	e9 e5       	ldi	r30, 0x59	; 89
    32d2:	f0 e0       	ldi	r31, 0x00	; 0
    32d4:	80 81       	ld	r24, Z
    32d6:	82 60       	ori	r24, 0x02	; 2
    32d8:	8c 93       	st	X, r24
    32da:	8c 91       	ld	r24, X
    32dc:	f9 01       	movw	r30, r18
    32de:	80 83       	st	Z, r24
    32e0:	b0 c0       	rjmp	.+352    	; 0x3442 <Timer_init+0x322>
			break;
		}
		break;
		case Timer1:
			TCNT1 = ( (Config_Ptr->timer_InitialValue) ) & 0XFFFF;
    32e2:	2c e4       	ldi	r18, 0x4C	; 76
    32e4:	30 e0       	ldi	r19, 0x00	; 0
    32e6:	e9 81       	ldd	r30, Y+1	; 0x01
    32e8:	fa 81       	ldd	r31, Y+2	; 0x02
    32ea:	80 81       	ld	r24, Z
    32ec:	91 81       	ldd	r25, Z+1	; 0x01
    32ee:	a2 81       	ldd	r26, Z+2	; 0x02
    32f0:	b3 81       	ldd	r27, Z+3	; 0x03
    32f2:	f9 01       	movw	r30, r18
    32f4:	91 83       	std	Z+1, r25	; 0x01
    32f6:	80 83       	st	Z, r24
			TCCR1B =  (TCCR1B & 0XF8) | (Config_Ptr->timer_clock);
    32f8:	ae e4       	ldi	r26, 0x4E	; 78
    32fa:	b0 e0       	ldi	r27, 0x00	; 0
    32fc:	ee e4       	ldi	r30, 0x4E	; 78
    32fe:	f0 e0       	ldi	r31, 0x00	; 0
    3300:	80 81       	ld	r24, Z
    3302:	98 2f       	mov	r25, r24
    3304:	98 7f       	andi	r25, 0xF8	; 248
    3306:	e9 81       	ldd	r30, Y+1	; 0x01
    3308:	fa 81       	ldd	r31, Y+2	; 0x02
    330a:	81 85       	ldd	r24, Z+9	; 0x09
    330c:	89 2b       	or	r24, r25
    330e:	8c 93       	st	X, r24
			TCCR1A = TCCR1A & 0X0F;
    3310:	af e4       	ldi	r26, 0x4F	; 79
    3312:	b0 e0       	ldi	r27, 0x00	; 0
    3314:	ef e4       	ldi	r30, 0x4F	; 79
    3316:	f0 e0       	ldi	r31, 0x00	; 0
    3318:	80 81       	ld	r24, Z
    331a:	8f 70       	andi	r24, 0x0F	; 15
    331c:	8c 93       	st	X, r24
			switch(Config_Ptr->timer_mode)
    331e:	e9 81       	ldd	r30, Y+1	; 0x01
    3320:	fa 81       	ldd	r31, Y+2	; 0x02
    3322:	82 85       	ldd	r24, Z+10	; 0x0a
    3324:	28 2f       	mov	r18, r24
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	3c 83       	std	Y+4, r19	; 0x04
    332a:	2b 83       	std	Y+3, r18	; 0x03
    332c:	8b 81       	ldd	r24, Y+3	; 0x03
    332e:	9c 81       	ldd	r25, Y+4	; 0x04
    3330:	00 97       	sbiw	r24, 0x00	; 0
    3332:	31 f0       	breq	.+12     	; 0x3340 <Timer_init+0x220>
    3334:	eb 81       	ldd	r30, Y+3	; 0x03
    3336:	fc 81       	ldd	r31, Y+4	; 0x04
    3338:	e1 30       	cpi	r30, 0x01	; 1
    333a:	f1 05       	cpc	r31, r1
    333c:	a1 f1       	breq	.+104    	; 0x33a6 <Timer_init+0x286>
    333e:	81 c0       	rjmp	.+258    	; 0x3442 <Timer_init+0x322>
			{
			case Overflow:
				TCCR1A = TCCR1A & 0XFC ;
    3340:	af e4       	ldi	r26, 0x4F	; 79
    3342:	b0 e0       	ldi	r27, 0x00	; 0
    3344:	ef e4       	ldi	r30, 0x4F	; 79
    3346:	f0 e0       	ldi	r31, 0x00	; 0
    3348:	80 81       	ld	r24, Z
    334a:	8c 7f       	andi	r24, 0xFC	; 252
    334c:	8c 93       	st	X, r24
				TCCR1B = TCCR1B & 0XE7 ;
    334e:	ae e4       	ldi	r26, 0x4E	; 78
    3350:	b0 e0       	ldi	r27, 0x00	; 0
    3352:	ee e4       	ldi	r30, 0x4E	; 78
    3354:	f0 e0       	ldi	r31, 0x00	; 0
    3356:	80 81       	ld	r24, Z
    3358:	87 7e       	andi	r24, 0xE7	; 231
    335a:	8c 93       	st	X, r24
				TCCR1A =  SET_BIT(TCCR1A,FOC1A);
    335c:	2f e4       	ldi	r18, 0x4F	; 79
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	af e4       	ldi	r26, 0x4F	; 79
    3362:	b0 e0       	ldi	r27, 0x00	; 0
    3364:	ef e4       	ldi	r30, 0x4F	; 79
    3366:	f0 e0       	ldi	r31, 0x00	; 0
    3368:	80 81       	ld	r24, Z
    336a:	88 60       	ori	r24, 0x08	; 8
    336c:	8c 93       	st	X, r24
    336e:	8c 91       	ld	r24, X
    3370:	f9 01       	movw	r30, r18
    3372:	80 83       	st	Z, r24
				TCCR1A =  SET_BIT(TCCR1A,FOC1B);
    3374:	2f e4       	ldi	r18, 0x4F	; 79
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	af e4       	ldi	r26, 0x4F	; 79
    337a:	b0 e0       	ldi	r27, 0x00	; 0
    337c:	ef e4       	ldi	r30, 0x4F	; 79
    337e:	f0 e0       	ldi	r31, 0x00	; 0
    3380:	80 81       	ld	r24, Z
    3382:	84 60       	ori	r24, 0x04	; 4
    3384:	8c 93       	st	X, r24
    3386:	8c 91       	ld	r24, X
    3388:	f9 01       	movw	r30, r18
    338a:	80 83       	st	Z, r24
				TIMSK = SET_BIT(TIMSK,TOIE1);
    338c:	29 e5       	ldi	r18, 0x59	; 89
    338e:	30 e0       	ldi	r19, 0x00	; 0
    3390:	a9 e5       	ldi	r26, 0x59	; 89
    3392:	b0 e0       	ldi	r27, 0x00	; 0
    3394:	e9 e5       	ldi	r30, 0x59	; 89
    3396:	f0 e0       	ldi	r31, 0x00	; 0
    3398:	80 81       	ld	r24, Z
    339a:	84 60       	ori	r24, 0x04	; 4
    339c:	8c 93       	st	X, r24
    339e:	8c 91       	ld	r24, X
    33a0:	f9 01       	movw	r30, r18
    33a2:	80 83       	st	Z, r24
    33a4:	4e c0       	rjmp	.+156    	; 0x3442 <Timer_init+0x322>
				break;
			case Compare:
				TCCR1A = TCCR1A & 0XFC ;
    33a6:	af e4       	ldi	r26, 0x4F	; 79
    33a8:	b0 e0       	ldi	r27, 0x00	; 0
    33aa:	ef e4       	ldi	r30, 0x4F	; 79
    33ac:	f0 e0       	ldi	r31, 0x00	; 0
    33ae:	80 81       	ld	r24, Z
    33b0:	8c 7f       	andi	r24, 0xFC	; 252
    33b2:	8c 93       	st	X, r24
				TCCR1B = SET_BIT(TCCR1B, WGM12);
    33b4:	2e e4       	ldi	r18, 0x4E	; 78
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	ae e4       	ldi	r26, 0x4E	; 78
    33ba:	b0 e0       	ldi	r27, 0x00	; 0
    33bc:	ee e4       	ldi	r30, 0x4E	; 78
    33be:	f0 e0       	ldi	r31, 0x00	; 0
    33c0:	80 81       	ld	r24, Z
    33c2:	88 60       	ori	r24, 0x08	; 8
    33c4:	8c 93       	st	X, r24
    33c6:	8c 91       	ld	r24, X
    33c8:	f9 01       	movw	r30, r18
    33ca:	80 83       	st	Z, r24
				TCCR1B = CLEAR_BIT(TCCR1B, WGM13);
    33cc:	2e e4       	ldi	r18, 0x4E	; 78
    33ce:	30 e0       	ldi	r19, 0x00	; 0
    33d0:	ae e4       	ldi	r26, 0x4E	; 78
    33d2:	b0 e0       	ldi	r27, 0x00	; 0
    33d4:	ee e4       	ldi	r30, 0x4E	; 78
    33d6:	f0 e0       	ldi	r31, 0x00	; 0
    33d8:	80 81       	ld	r24, Z
    33da:	8f 7e       	andi	r24, 0xEF	; 239
    33dc:	8c 93       	st	X, r24
    33de:	8c 91       	ld	r24, X
    33e0:	f9 01       	movw	r30, r18
    33e2:	80 83       	st	Z, r24
				TCCR1A =  SET_BIT(TCCR1A,FOC1A);
    33e4:	2f e4       	ldi	r18, 0x4F	; 79
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	af e4       	ldi	r26, 0x4F	; 79
    33ea:	b0 e0       	ldi	r27, 0x00	; 0
    33ec:	ef e4       	ldi	r30, 0x4F	; 79
    33ee:	f0 e0       	ldi	r31, 0x00	; 0
    33f0:	80 81       	ld	r24, Z
    33f2:	88 60       	ori	r24, 0x08	; 8
    33f4:	8c 93       	st	X, r24
    33f6:	8c 91       	ld	r24, X
    33f8:	f9 01       	movw	r30, r18
    33fa:	80 83       	st	Z, r24
				TCCR1A =  SET_BIT(TCCR1A,FOC1B);
    33fc:	2f e4       	ldi	r18, 0x4F	; 79
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	af e4       	ldi	r26, 0x4F	; 79
    3402:	b0 e0       	ldi	r27, 0x00	; 0
    3404:	ef e4       	ldi	r30, 0x4F	; 79
    3406:	f0 e0       	ldi	r31, 0x00	; 0
    3408:	80 81       	ld	r24, Z
    340a:	84 60       	ori	r24, 0x04	; 4
    340c:	8c 93       	st	X, r24
    340e:	8c 91       	ld	r24, X
    3410:	f9 01       	movw	r30, r18
    3412:	80 83       	st	Z, r24
				OCR1A = ((Config_Ptr->timer_compare_MatchValue)) & 0XFFFF;
    3414:	2a e4       	ldi	r18, 0x4A	; 74
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	e9 81       	ldd	r30, Y+1	; 0x01
    341a:	fa 81       	ldd	r31, Y+2	; 0x02
    341c:	84 81       	ldd	r24, Z+4	; 0x04
    341e:	95 81       	ldd	r25, Z+5	; 0x05
    3420:	a6 81       	ldd	r26, Z+6	; 0x06
    3422:	b7 81       	ldd	r27, Z+7	; 0x07
    3424:	f9 01       	movw	r30, r18
    3426:	91 83       	std	Z+1, r25	; 0x01
    3428:	80 83       	st	Z, r24
				TIMSK = SET_BIT(TIMSK,OCIE1A);
    342a:	29 e5       	ldi	r18, 0x59	; 89
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	a9 e5       	ldi	r26, 0x59	; 89
    3430:	b0 e0       	ldi	r27, 0x00	; 0
    3432:	e9 e5       	ldi	r30, 0x59	; 89
    3434:	f0 e0       	ldi	r31, 0x00	; 0
    3436:	80 81       	ld	r24, Z
    3438:	80 61       	ori	r24, 0x10	; 16
    343a:	8c 93       	st	X, r24
    343c:	8c 91       	ld	r24, X
    343e:	f9 01       	movw	r30, r18
    3440:	80 83       	st	Z, r24
				break;
			}
			break;
	}
}
    3442:	2c 96       	adiw	r28, 0x0c	; 12
    3444:	0f b6       	in	r0, 0x3f	; 63
    3446:	f8 94       	cli
    3448:	de bf       	out	0x3e, r29	; 62
    344a:	0f be       	out	0x3f, r0	; 63
    344c:	cd bf       	out	0x3d, r28	; 61
    344e:	cf 91       	pop	r28
    3450:	df 91       	pop	r29
    3452:	08 95       	ret

00003454 <Timer_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer_setCallBack(void(*a_ptr)(void), Timer_Type timer_type )
{
    3454:	df 93       	push	r29
    3456:	cf 93       	push	r28
    3458:	00 d0       	rcall	.+0      	; 0x345a <Timer_setCallBack+0x6>
    345a:	00 d0       	rcall	.+0      	; 0x345c <Timer_setCallBack+0x8>
    345c:	0f 92       	push	r0
    345e:	cd b7       	in	r28, 0x3d	; 61
    3460:	de b7       	in	r29, 0x3e	; 62
    3462:	9a 83       	std	Y+2, r25	; 0x02
    3464:	89 83       	std	Y+1, r24	; 0x01
    3466:	6b 83       	std	Y+3, r22	; 0x03
	switch(timer_type)
    3468:	8b 81       	ldd	r24, Y+3	; 0x03
    346a:	28 2f       	mov	r18, r24
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	3d 83       	std	Y+5, r19	; 0x05
    3470:	2c 83       	std	Y+4, r18	; 0x04
    3472:	8c 81       	ldd	r24, Y+4	; 0x04
    3474:	9d 81       	ldd	r25, Y+5	; 0x05
    3476:	00 97       	sbiw	r24, 0x00	; 0
    3478:	31 f0       	breq	.+12     	; 0x3486 <Timer_setCallBack+0x32>
    347a:	2c 81       	ldd	r18, Y+4	; 0x04
    347c:	3d 81       	ldd	r19, Y+5	; 0x05
    347e:	21 30       	cpi	r18, 0x01	; 1
    3480:	31 05       	cpc	r19, r1
    3482:	41 f0       	breq	.+16     	; 0x3494 <Timer_setCallBack+0x40>
    3484:	0d c0       	rjmp	.+26     	; 0x34a0 <Timer_setCallBack+0x4c>
	{
	case Timer0:
		g_Timer0_callBackPtr = a_ptr;
    3486:	89 81       	ldd	r24, Y+1	; 0x01
    3488:	9a 81       	ldd	r25, Y+2	; 0x02
    348a:	90 93 5a 01 	sts	0x015A, r25
    348e:	80 93 59 01 	sts	0x0159, r24
    3492:	06 c0       	rjmp	.+12     	; 0x34a0 <Timer_setCallBack+0x4c>
		break;

	case Timer1:
		g_Timer1_callBackPtr = a_ptr;
    3494:	89 81       	ldd	r24, Y+1	; 0x01
    3496:	9a 81       	ldd	r25, Y+2	; 0x02
    3498:	90 93 5c 01 	sts	0x015C, r25
    349c:	80 93 5b 01 	sts	0x015B, r24
		break;
	}
}
    34a0:	0f 90       	pop	r0
    34a2:	0f 90       	pop	r0
    34a4:	0f 90       	pop	r0
    34a6:	0f 90       	pop	r0
    34a8:	0f 90       	pop	r0
    34aa:	cf 91       	pop	r28
    34ac:	df 91       	pop	r29
    34ae:	08 95       	ret

000034b0 <Timer_stop>:

/*
 * Description: Function to stop the clock of the timer to stop incrementing.
 */
void Timer_stop(Timer_Type timer_type)
{
    34b0:	df 93       	push	r29
    34b2:	cf 93       	push	r28
    34b4:	00 d0       	rcall	.+0      	; 0x34b6 <Timer_stop+0x6>
    34b6:	0f 92       	push	r0
    34b8:	cd b7       	in	r28, 0x3d	; 61
    34ba:	de b7       	in	r29, 0x3e	; 62
    34bc:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    34be:	89 81       	ldd	r24, Y+1	; 0x01
    34c0:	28 2f       	mov	r18, r24
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	3b 83       	std	Y+3, r19	; 0x03
    34c6:	2a 83       	std	Y+2, r18	; 0x02
    34c8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ca:	9b 81       	ldd	r25, Y+3	; 0x03
    34cc:	00 97       	sbiw	r24, 0x00	; 0
    34ce:	31 f0       	breq	.+12     	; 0x34dc <Timer_stop+0x2c>
    34d0:	2a 81       	ldd	r18, Y+2	; 0x02
    34d2:	3b 81       	ldd	r19, Y+3	; 0x03
    34d4:	21 30       	cpi	r18, 0x01	; 1
    34d6:	31 05       	cpc	r19, r1
    34d8:	49 f0       	breq	.+18     	; 0x34ec <Timer_stop+0x3c>
    34da:	0f c0       	rjmp	.+30     	; 0x34fa <Timer_stop+0x4a>
	{
	case Timer0:
		TCCR0 = (TCCR0  & 0XF8) ;
    34dc:	a3 e5       	ldi	r26, 0x53	; 83
    34de:	b0 e0       	ldi	r27, 0x00	; 0
    34e0:	e3 e5       	ldi	r30, 0x53	; 83
    34e2:	f0 e0       	ldi	r31, 0x00	; 0
    34e4:	80 81       	ld	r24, Z
    34e6:	88 7f       	andi	r24, 0xF8	; 248
    34e8:	8c 93       	st	X, r24
    34ea:	07 c0       	rjmp	.+14     	; 0x34fa <Timer_stop+0x4a>
		break;

	case Timer1:
		TCCR1B  =  (TCCR1B  & 0XF8) ;
    34ec:	ae e4       	ldi	r26, 0x4E	; 78
    34ee:	b0 e0       	ldi	r27, 0x00	; 0
    34f0:	ee e4       	ldi	r30, 0x4E	; 78
    34f2:	f0 e0       	ldi	r31, 0x00	; 0
    34f4:	80 81       	ld	r24, Z
    34f6:	88 7f       	andi	r24, 0xF8	; 248
    34f8:	8c 93       	st	X, r24
		break;
	}
}
    34fa:	0f 90       	pop	r0
    34fc:	0f 90       	pop	r0
    34fe:	0f 90       	pop	r0
    3500:	cf 91       	pop	r28
    3502:	df 91       	pop	r29
    3504:	08 95       	ret

00003506 <Timer_DeInit>:

/*
 * Description: Function to DeInit the timer to start again from beginning
 */
void Timer_DeInit(Timer_Type timer_type)
{
    3506:	df 93       	push	r29
    3508:	cf 93       	push	r28
    350a:	cd b7       	in	r28, 0x3d	; 61
    350c:	de b7       	in	r29, 0x3e	; 62
    350e:	2e 97       	sbiw	r28, 0x0e	; 14
    3510:	0f b6       	in	r0, 0x3f	; 63
    3512:	f8 94       	cli
    3514:	de bf       	out	0x3e, r29	; 62
    3516:	0f be       	out	0x3f, r0	; 63
    3518:	cd bf       	out	0x3d, r28	; 61
    351a:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    351c:	89 81       	ldd	r24, Y+1	; 0x01
    351e:	28 2f       	mov	r18, r24
    3520:	30 e0       	ldi	r19, 0x00	; 0
    3522:	3e 87       	std	Y+14, r19	; 0x0e
    3524:	2d 87       	std	Y+13, r18	; 0x0d
    3526:	8d 85       	ldd	r24, Y+13	; 0x0d
    3528:	9e 85       	ldd	r25, Y+14	; 0x0e
    352a:	00 97       	sbiw	r24, 0x00	; 0
    352c:	31 f0       	breq	.+12     	; 0x353a <Timer_DeInit+0x34>
    352e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3530:	3e 85       	ldd	r19, Y+14	; 0x0e
    3532:	21 30       	cpi	r18, 0x01	; 1
    3534:	31 05       	cpc	r19, r1
    3536:	d1 f0       	breq	.+52     	; 0x356c <Timer_DeInit+0x66>
    3538:	3b c0       	rjmp	.+118    	; 0x35b0 <Timer_DeInit+0xaa>
	{
	case Timer0:
		TCCR0        	&= 0X00;
    353a:	e3 e5       	ldi	r30, 0x53	; 83
    353c:	f0 e0       	ldi	r31, 0x00	; 0
    353e:	30 81       	ld	r19, Z
    3540:	e3 e5       	ldi	r30, 0x53	; 83
    3542:	f0 e0       	ldi	r31, 0x00	; 0
    3544:	10 82       	st	Z, r1
		TCNT0   		&= 0X00;
    3546:	e2 e5       	ldi	r30, 0x52	; 82
    3548:	f0 e0       	ldi	r31, 0x00	; 0
    354a:	80 81       	ld	r24, Z
    354c:	e2 e5       	ldi	r30, 0x52	; 82
    354e:	f0 e0       	ldi	r31, 0x00	; 0
    3550:	10 82       	st	Z, r1
		OCR0  			&= 0X00;
    3552:	ec e5       	ldi	r30, 0x5C	; 92
    3554:	f0 e0       	ldi	r31, 0x00	; 0
    3556:	90 81       	ld	r25, Z
    3558:	ec e5       	ldi	r30, 0x5C	; 92
    355a:	f0 e0       	ldi	r31, 0x00	; 0
    355c:	10 82       	st	Z, r1
		TIMSK  			&= 0X00;
    355e:	e9 e5       	ldi	r30, 0x59	; 89
    3560:	f0 e0       	ldi	r31, 0x00	; 0
    3562:	20 81       	ld	r18, Z
    3564:	e9 e5       	ldi	r30, 0x59	; 89
    3566:	f0 e0       	ldi	r31, 0x00	; 0
    3568:	10 82       	st	Z, r1
    356a:	22 c0       	rjmp	.+68     	; 0x35b0 <Timer_DeInit+0xaa>
		break;

	case Timer1:
		TCCR1A         	&= 0X00;
    356c:	ef e4       	ldi	r30, 0x4F	; 79
    356e:	f0 e0       	ldi	r31, 0x00	; 0
    3570:	30 81       	ld	r19, Z
    3572:	ef e4       	ldi	r30, 0x4F	; 79
    3574:	f0 e0       	ldi	r31, 0x00	; 0
    3576:	10 82       	st	Z, r1
		TCCR1B         	&= 0X00;
    3578:	ee e4       	ldi	r30, 0x4E	; 78
    357a:	f0 e0       	ldi	r31, 0x00	; 0
    357c:	80 81       	ld	r24, Z
    357e:	ee e4       	ldi	r30, 0x4E	; 78
    3580:	f0 e0       	ldi	r31, 0x00	; 0
    3582:	10 82       	st	Z, r1
		TCNT1      		&= 0X00;
    3584:	ec e4       	ldi	r30, 0x4C	; 76
    3586:	f0 e0       	ldi	r31, 0x00	; 0
    3588:	20 81       	ld	r18, Z
    358a:	31 81       	ldd	r19, Z+1	; 0x01
    358c:	ec e4       	ldi	r30, 0x4C	; 76
    358e:	f0 e0       	ldi	r31, 0x00	; 0
    3590:	11 82       	std	Z+1, r1	; 0x01
    3592:	10 82       	st	Z, r1
		OCR1A   		&= 0X00;
    3594:	ea e4       	ldi	r30, 0x4A	; 74
    3596:	f0 e0       	ldi	r31, 0x00	; 0
    3598:	80 81       	ld	r24, Z
    359a:	91 81       	ldd	r25, Z+1	; 0x01
    359c:	ea e4       	ldi	r30, 0x4A	; 74
    359e:	f0 e0       	ldi	r31, 0x00	; 0
    35a0:	11 82       	std	Z+1, r1	; 0x01
    35a2:	10 82       	st	Z, r1
		TIMSK     		&= 0X00;
    35a4:	e9 e5       	ldi	r30, 0x59	; 89
    35a6:	f0 e0       	ldi	r31, 0x00	; 0
    35a8:	90 81       	ld	r25, Z
    35aa:	e9 e5       	ldi	r30, 0x59	; 89
    35ac:	f0 e0       	ldi	r31, 0x00	; 0
    35ae:	10 82       	st	Z, r1
		break;
	}
}
    35b0:	2e 96       	adiw	r28, 0x0e	; 14
    35b2:	0f b6       	in	r0, 0x3f	; 63
    35b4:	f8 94       	cli
    35b6:	de bf       	out	0x3e, r29	; 62
    35b8:	0f be       	out	0x3f, r0	; 63
    35ba:	cd bf       	out	0x3d, r28	; 61
    35bc:	cf 91       	pop	r28
    35be:	df 91       	pop	r29
    35c0:	08 95       	ret

000035c2 <UART_init>:

#include "UART_Driver.h"


void UART_init(const UART_config * cofig_Ptr)
{
    35c2:	df 93       	push	r29
    35c4:	cf 93       	push	r28
    35c6:	00 d0       	rcall	.+0      	; 0x35c8 <UART_init+0x6>
    35c8:	cd b7       	in	r28, 0x3d	; 61
    35ca:	de b7       	in	r29, 0x3e	; 62
    35cc:	9a 83       	std	Y+2, r25	; 0x02
    35ce:	89 83       	std	Y+1, r24	; 0x01
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB |= (1 << RXEN) | (1 << TXEN);
    35d0:	aa e2       	ldi	r26, 0x2A	; 42
    35d2:	b0 e0       	ldi	r27, 0x00	; 0
    35d4:	ea e2       	ldi	r30, 0x2A	; 42
    35d6:	f0 e0       	ldi	r31, 0x00	; 0
    35d8:	80 81       	ld	r24, Z
    35da:	88 61       	ori	r24, 0x18	; 24
    35dc:	8c 93       	st	X, r24

	UCSRB = (UCSRB & 0xFB) | (cofig_Ptr->data_bits & 0x04);
    35de:	aa e2       	ldi	r26, 0x2A	; 42
    35e0:	b0 e0       	ldi	r27, 0x00	; 0
    35e2:	ea e2       	ldi	r30, 0x2A	; 42
    35e4:	f0 e0       	ldi	r31, 0x00	; 0
    35e6:	80 81       	ld	r24, Z
    35e8:	98 2f       	mov	r25, r24
    35ea:	9b 7f       	andi	r25, 0xFB	; 251
    35ec:	e9 81       	ldd	r30, Y+1	; 0x01
    35ee:	fa 81       	ldd	r31, Y+2	; 0x02
    35f0:	80 81       	ld	r24, Z
    35f2:	84 70       	andi	r24, 0x04	; 4
    35f4:	89 2b       	or	r24, r25
    35f6:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC |= (1 << URSEL) ;
    35f8:	a0 e4       	ldi	r26, 0x40	; 64
    35fa:	b0 e0       	ldi	r27, 0x00	; 0
    35fc:	e0 e4       	ldi	r30, 0x40	; 64
    35fe:	f0 e0       	ldi	r31, 0x00	; 0
    3600:	80 81       	ld	r24, Z
    3602:	80 68       	ori	r24, 0x80	; 128
    3604:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xF9) | ((cofig_Ptr->data_bits & 0x03)<<1);
    3606:	a0 e4       	ldi	r26, 0x40	; 64
    3608:	b0 e0       	ldi	r27, 0x00	; 0
    360a:	e0 e4       	ldi	r30, 0x40	; 64
    360c:	f0 e0       	ldi	r31, 0x00	; 0
    360e:	80 81       	ld	r24, Z
    3610:	28 2f       	mov	r18, r24
    3612:	29 7f       	andi	r18, 0xF9	; 249
    3614:	e9 81       	ldd	r30, Y+1	; 0x01
    3616:	fa 81       	ldd	r31, Y+2	; 0x02
    3618:	80 81       	ld	r24, Z
    361a:	88 2f       	mov	r24, r24
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	83 70       	andi	r24, 0x03	; 3
    3620:	90 70       	andi	r25, 0x00	; 0
    3622:	88 0f       	add	r24, r24
    3624:	99 1f       	adc	r25, r25
    3626:	82 2b       	or	r24, r18
    3628:	8c 93       	st	X, r24

	/*parity*/
	UCSRC = (UCSRC & 0xCF) | (cofig_Ptr->parity << 4);
    362a:	a0 e4       	ldi	r26, 0x40	; 64
    362c:	b0 e0       	ldi	r27, 0x00	; 0
    362e:	e0 e4       	ldi	r30, 0x40	; 64
    3630:	f0 e0       	ldi	r31, 0x00	; 0
    3632:	80 81       	ld	r24, Z
    3634:	28 2f       	mov	r18, r24
    3636:	2f 7c       	andi	r18, 0xCF	; 207
    3638:	e9 81       	ldd	r30, Y+1	; 0x01
    363a:	fa 81       	ldd	r31, Y+2	; 0x02
    363c:	81 81       	ldd	r24, Z+1	; 0x01
    363e:	88 2f       	mov	r24, r24
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	82 95       	swap	r24
    3644:	92 95       	swap	r25
    3646:	90 7f       	andi	r25, 0xF0	; 240
    3648:	98 27       	eor	r25, r24
    364a:	80 7f       	andi	r24, 0xF0	; 240
    364c:	98 27       	eor	r25, r24
    364e:	82 2b       	or	r24, r18
    3650:	8c 93       	st	X, r24

	/* stop_bit*/
	UCSRC = (UCSRC & 0xF7) | (cofig_Ptr->stop_bit << 3);
    3652:	a0 e4       	ldi	r26, 0x40	; 64
    3654:	b0 e0       	ldi	r27, 0x00	; 0
    3656:	e0 e4       	ldi	r30, 0x40	; 64
    3658:	f0 e0       	ldi	r31, 0x00	; 0
    365a:	80 81       	ld	r24, Z
    365c:	28 2f       	mov	r18, r24
    365e:	27 7f       	andi	r18, 0xF7	; 247
    3660:	e9 81       	ldd	r30, Y+1	; 0x01
    3662:	fa 81       	ldd	r31, Y+2	; 0x02
    3664:	82 81       	ldd	r24, Z+2	; 0x02
    3666:	88 2f       	mov	r24, r24
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	88 0f       	add	r24, r24
    366c:	99 1f       	adc	r25, r25
    366e:	88 0f       	add	r24, r24
    3670:	99 1f       	adc	r25, r25
    3672:	88 0f       	add	r24, r24
    3674:	99 1f       	adc	r25, r25
    3676:	82 2b       	or	r24, r18
    3678:	8c 93       	st	X, r24

	/*mode*/
	UCSRC = (UCSRC & 0xBF) | (mode_bit << 6);
    367a:	a0 e4       	ldi	r26, 0x40	; 64
    367c:	b0 e0       	ldi	r27, 0x00	; 0
    367e:	e0 e4       	ldi	r30, 0x40	; 64
    3680:	f0 e0       	ldi	r31, 0x00	; 0
    3682:	80 81       	ld	r24, Z
    3684:	8f 7b       	andi	r24, 0xBF	; 191
    3686:	8c 93       	st	X, r24

	/* U2X = 1 for double transmission speed */
	UCSRA = (UCSRA & 0xFD) | (double_speed << 1);
    3688:	ab e2       	ldi	r26, 0x2B	; 43
    368a:	b0 e0       	ldi	r27, 0x00	; 0
    368c:	eb e2       	ldi	r30, 0x2B	; 43
    368e:	f0 e0       	ldi	r31, 0x00	; 0
    3690:	80 81       	ld	r24, Z
    3692:	82 60       	ori	r24, 0x02	; 2
    3694:	8c 93       	st	X, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRL = BAUD_PRESCALE;
    3696:	e9 e2       	ldi	r30, 0x29	; 41
    3698:	f0 e0       	ldi	r31, 0x00	; 0
    369a:	87 e6       	ldi	r24, 0x67	; 103
    369c:	80 83       	st	Z, r24

	UBRRH = BAUD_PRESCALE >> 8;
    369e:	e0 e4       	ldi	r30, 0x40	; 64
    36a0:	f0 e0       	ldi	r31, 0x00	; 0
    36a2:	10 82       	st	Z, r1
}/*end of Uart_init function*/
    36a4:	0f 90       	pop	r0
    36a6:	0f 90       	pop	r0
    36a8:	cf 91       	pop	r28
    36aa:	df 91       	pop	r29
    36ac:	08 95       	ret

000036ae <UART_sendByte>:


void UART_sendByte(uint8 data)
{
    36ae:	df 93       	push	r29
    36b0:	cf 93       	push	r28
    36b2:	0f 92       	push	r0
    36b4:	cd b7       	in	r28, 0x3d	; 61
    36b6:	de b7       	in	r29, 0x3e	; 62
    36b8:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA ,UDRE)){};
    36ba:	eb e2       	ldi	r30, 0x2B	; 43
    36bc:	f0 e0       	ldi	r31, 0x00	; 0
    36be:	80 81       	ld	r24, Z
    36c0:	88 2f       	mov	r24, r24
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	80 72       	andi	r24, 0x20	; 32
    36c6:	90 70       	andi	r25, 0x00	; 0
    36c8:	00 97       	sbiw	r24, 0x00	; 0
    36ca:	b9 f3       	breq	.-18     	; 0x36ba <UART_sendByte+0xc>
	/* put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    36cc:	ec e2       	ldi	r30, 0x2C	; 44
    36ce:	f0 e0       	ldi	r31, 0x00	; 0
    36d0:	89 81       	ldd	r24, Y+1	; 0x01
    36d2:	80 83       	st	Z, r24
}
    36d4:	0f 90       	pop	r0
    36d6:	cf 91       	pop	r28
    36d8:	df 91       	pop	r29
    36da:	08 95       	ret

000036dc <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    36dc:	df 93       	push	r29
    36de:	cf 93       	push	r28
    36e0:	cd b7       	in	r28, 0x3d	; 61
    36e2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while (BIT_IS_CLEAR(UCSRA ,RXC)){};
    36e4:	eb e2       	ldi	r30, 0x2B	; 43
    36e6:	f0 e0       	ldi	r31, 0x00	; 0
    36e8:	80 81       	ld	r24, Z
    36ea:	88 23       	and	r24, r24
    36ec:	dc f7       	brge	.-10     	; 0x36e4 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
	return UDR;
    36ee:	ec e2       	ldi	r30, 0x2C	; 44
    36f0:	f0 e0       	ldi	r31, 0x00	; 0
    36f2:	80 81       	ld	r24, Z
}
    36f4:	cf 91       	pop	r28
    36f6:	df 91       	pop	r29
    36f8:	08 95       	ret

000036fa <UART_sendString>:

void UART_sendString(const uint8 *str)
{
    36fa:	df 93       	push	r29
    36fc:	cf 93       	push	r28
    36fe:	00 d0       	rcall	.+0      	; 0x3700 <UART_sendString+0x6>
    3700:	0f 92       	push	r0
    3702:	cd b7       	in	r28, 0x3d	; 61
    3704:	de b7       	in	r29, 0x3e	; 62
    3706:	9b 83       	std	Y+3, r25	; 0x03
    3708:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    370a:	19 82       	std	Y+1, r1	; 0x01
    370c:	0e c0       	rjmp	.+28     	; 0x372a <UART_sendString+0x30>
	while (str[i] != '\0')
	{
		UART_sendByte(str[i]);
    370e:	89 81       	ldd	r24, Y+1	; 0x01
    3710:	28 2f       	mov	r18, r24
    3712:	30 e0       	ldi	r19, 0x00	; 0
    3714:	8a 81       	ldd	r24, Y+2	; 0x02
    3716:	9b 81       	ldd	r25, Y+3	; 0x03
    3718:	fc 01       	movw	r30, r24
    371a:	e2 0f       	add	r30, r18
    371c:	f3 1f       	adc	r31, r19
    371e:	80 81       	ld	r24, Z
    3720:	0e 94 57 1b 	call	0x36ae	; 0x36ae <UART_sendByte>
		i++;
    3724:	89 81       	ldd	r24, Y+1	; 0x01
    3726:	8f 5f       	subi	r24, 0xFF	; 255
    3728:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *str)
{
	uint8 i = 0;
	while (str[i] != '\0')
    372a:	89 81       	ldd	r24, Y+1	; 0x01
    372c:	28 2f       	mov	r18, r24
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	8a 81       	ldd	r24, Y+2	; 0x02
    3732:	9b 81       	ldd	r25, Y+3	; 0x03
    3734:	fc 01       	movw	r30, r24
    3736:	e2 0f       	add	r30, r18
    3738:	f3 1f       	adc	r31, r19
    373a:	80 81       	ld	r24, Z
    373c:	88 23       	and	r24, r24
    373e:	39 f7       	brne	.-50     	; 0x370e <UART_sendString+0x14>
	{
		UART_sendByte(str[i]);
		i++;
	}
}
    3740:	0f 90       	pop	r0
    3742:	0f 90       	pop	r0
    3744:	0f 90       	pop	r0
    3746:	cf 91       	pop	r28
    3748:	df 91       	pop	r29
    374a:	08 95       	ret

0000374c <UART_recieveString>:

void UART_recieveString(uint8 *str)
{
    374c:	0f 93       	push	r16
    374e:	1f 93       	push	r17
    3750:	df 93       	push	r29
    3752:	cf 93       	push	r28
    3754:	00 d0       	rcall	.+0      	; 0x3756 <UART_recieveString+0xa>
    3756:	0f 92       	push	r0
    3758:	cd b7       	in	r28, 0x3d	; 61
    375a:	de b7       	in	r29, 0x3e	; 62
    375c:	9b 83       	std	Y+3, r25	; 0x03
    375e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3760:	19 82       	std	Y+1, r1	; 0x01
	str[i] = UART_recieveByte();
    3762:	89 81       	ldd	r24, Y+1	; 0x01
    3764:	28 2f       	mov	r18, r24
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	8a 81       	ldd	r24, Y+2	; 0x02
    376a:	9b 81       	ldd	r25, Y+3	; 0x03
    376c:	8c 01       	movw	r16, r24
    376e:	02 0f       	add	r16, r18
    3770:	13 1f       	adc	r17, r19
    3772:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <UART_recieveByte>
    3776:	f8 01       	movw	r30, r16
    3778:	80 83       	st	Z, r24
    377a:	0f c0       	rjmp	.+30     	; 0x379a <UART_recieveString+0x4e>
	while (str[i] != '#')
	{
		i++;
    377c:	89 81       	ldd	r24, Y+1	; 0x01
    377e:	8f 5f       	subi	r24, 0xFF	; 255
    3780:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_recieveByte();
    3782:	89 81       	ldd	r24, Y+1	; 0x01
    3784:	28 2f       	mov	r18, r24
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	8a 81       	ldd	r24, Y+2	; 0x02
    378a:	9b 81       	ldd	r25, Y+3	; 0x03
    378c:	8c 01       	movw	r16, r24
    378e:	02 0f       	add	r16, r18
    3790:	13 1f       	adc	r17, r19
    3792:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <UART_recieveByte>
    3796:	f8 01       	movw	r30, r16
    3798:	80 83       	st	Z, r24

void UART_recieveString(uint8 *str)
{
	uint8 i = 0;
	str[i] = UART_recieveByte();
	while (str[i] != '#')
    379a:	89 81       	ldd	r24, Y+1	; 0x01
    379c:	28 2f       	mov	r18, r24
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	8a 81       	ldd	r24, Y+2	; 0x02
    37a2:	9b 81       	ldd	r25, Y+3	; 0x03
    37a4:	fc 01       	movw	r30, r24
    37a6:	e2 0f       	add	r30, r18
    37a8:	f3 1f       	adc	r31, r19
    37aa:	80 81       	ld	r24, Z
    37ac:	83 32       	cpi	r24, 0x23	; 35
    37ae:	31 f7       	brne	.-52     	; 0x377c <UART_recieveString+0x30>
	{
		i++;
		str[i] = UART_recieveByte();
	}
	str[i] = '\0';
    37b0:	89 81       	ldd	r24, Y+1	; 0x01
    37b2:	28 2f       	mov	r18, r24
    37b4:	30 e0       	ldi	r19, 0x00	; 0
    37b6:	8a 81       	ldd	r24, Y+2	; 0x02
    37b8:	9b 81       	ldd	r25, Y+3	; 0x03
    37ba:	fc 01       	movw	r30, r24
    37bc:	e2 0f       	add	r30, r18
    37be:	f3 1f       	adc	r31, r19
    37c0:	10 82       	st	Z, r1
}
    37c2:	0f 90       	pop	r0
    37c4:	0f 90       	pop	r0
    37c6:	0f 90       	pop	r0
    37c8:	cf 91       	pop	r28
    37ca:	df 91       	pop	r29
    37cc:	1f 91       	pop	r17
    37ce:	0f 91       	pop	r16
    37d0:	08 95       	ret

000037d2 <__prologue_saves__>:
    37d2:	2f 92       	push	r2
    37d4:	3f 92       	push	r3
    37d6:	4f 92       	push	r4
    37d8:	5f 92       	push	r5
    37da:	6f 92       	push	r6
    37dc:	7f 92       	push	r7
    37de:	8f 92       	push	r8
    37e0:	9f 92       	push	r9
    37e2:	af 92       	push	r10
    37e4:	bf 92       	push	r11
    37e6:	cf 92       	push	r12
    37e8:	df 92       	push	r13
    37ea:	ef 92       	push	r14
    37ec:	ff 92       	push	r15
    37ee:	0f 93       	push	r16
    37f0:	1f 93       	push	r17
    37f2:	cf 93       	push	r28
    37f4:	df 93       	push	r29
    37f6:	cd b7       	in	r28, 0x3d	; 61
    37f8:	de b7       	in	r29, 0x3e	; 62
    37fa:	ca 1b       	sub	r28, r26
    37fc:	db 0b       	sbc	r29, r27
    37fe:	0f b6       	in	r0, 0x3f	; 63
    3800:	f8 94       	cli
    3802:	de bf       	out	0x3e, r29	; 62
    3804:	0f be       	out	0x3f, r0	; 63
    3806:	cd bf       	out	0x3d, r28	; 61
    3808:	09 94       	ijmp

0000380a <__epilogue_restores__>:
    380a:	2a 88       	ldd	r2, Y+18	; 0x12
    380c:	39 88       	ldd	r3, Y+17	; 0x11
    380e:	48 88       	ldd	r4, Y+16	; 0x10
    3810:	5f 84       	ldd	r5, Y+15	; 0x0f
    3812:	6e 84       	ldd	r6, Y+14	; 0x0e
    3814:	7d 84       	ldd	r7, Y+13	; 0x0d
    3816:	8c 84       	ldd	r8, Y+12	; 0x0c
    3818:	9b 84       	ldd	r9, Y+11	; 0x0b
    381a:	aa 84       	ldd	r10, Y+10	; 0x0a
    381c:	b9 84       	ldd	r11, Y+9	; 0x09
    381e:	c8 84       	ldd	r12, Y+8	; 0x08
    3820:	df 80       	ldd	r13, Y+7	; 0x07
    3822:	ee 80       	ldd	r14, Y+6	; 0x06
    3824:	fd 80       	ldd	r15, Y+5	; 0x05
    3826:	0c 81       	ldd	r16, Y+4	; 0x04
    3828:	1b 81       	ldd	r17, Y+3	; 0x03
    382a:	aa 81       	ldd	r26, Y+2	; 0x02
    382c:	b9 81       	ldd	r27, Y+1	; 0x01
    382e:	ce 0f       	add	r28, r30
    3830:	d1 1d       	adc	r29, r1
    3832:	0f b6       	in	r0, 0x3f	; 63
    3834:	f8 94       	cli
    3836:	de bf       	out	0x3e, r29	; 62
    3838:	0f be       	out	0x3f, r0	; 63
    383a:	cd bf       	out	0x3d, r28	; 61
    383c:	ed 01       	movw	r28, r26
    383e:	08 95       	ret

00003840 <itoa>:
    3840:	fb 01       	movw	r30, r22
    3842:	9f 01       	movw	r18, r30
    3844:	e8 94       	clt
    3846:	42 30       	cpi	r20, 0x02	; 2
    3848:	c4 f0       	brlt	.+48     	; 0x387a <itoa+0x3a>
    384a:	45 32       	cpi	r20, 0x25	; 37
    384c:	b4 f4       	brge	.+44     	; 0x387a <itoa+0x3a>
    384e:	4a 30       	cpi	r20, 0x0A	; 10
    3850:	29 f4       	brne	.+10     	; 0x385c <itoa+0x1c>
    3852:	97 fb       	bst	r25, 7
    3854:	1e f4       	brtc	.+6      	; 0x385c <itoa+0x1c>
    3856:	90 95       	com	r25
    3858:	81 95       	neg	r24
    385a:	9f 4f       	sbci	r25, 0xFF	; 255
    385c:	64 2f       	mov	r22, r20
    385e:	77 27       	eor	r23, r23
    3860:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <__udivmodhi4>
    3864:	80 5d       	subi	r24, 0xD0	; 208
    3866:	8a 33       	cpi	r24, 0x3A	; 58
    3868:	0c f0       	brlt	.+2      	; 0x386c <itoa+0x2c>
    386a:	89 5d       	subi	r24, 0xD9	; 217
    386c:	81 93       	st	Z+, r24
    386e:	cb 01       	movw	r24, r22
    3870:	00 97       	sbiw	r24, 0x00	; 0
    3872:	a1 f7       	brne	.-24     	; 0x385c <itoa+0x1c>
    3874:	16 f4       	brtc	.+4      	; 0x387a <itoa+0x3a>
    3876:	5d e2       	ldi	r21, 0x2D	; 45
    3878:	51 93       	st	Z+, r21
    387a:	10 82       	st	Z, r1
    387c:	c9 01       	movw	r24, r18
    387e:	0c 94 41 1c 	jmp	0x3882	; 0x3882 <strrev>

00003882 <strrev>:
    3882:	dc 01       	movw	r26, r24
    3884:	fc 01       	movw	r30, r24
    3886:	67 2f       	mov	r22, r23
    3888:	71 91       	ld	r23, Z+
    388a:	77 23       	and	r23, r23
    388c:	e1 f7       	brne	.-8      	; 0x3886 <strrev+0x4>
    388e:	32 97       	sbiw	r30, 0x02	; 2
    3890:	04 c0       	rjmp	.+8      	; 0x389a <strrev+0x18>
    3892:	7c 91       	ld	r23, X
    3894:	6d 93       	st	X+, r22
    3896:	70 83       	st	Z, r23
    3898:	62 91       	ld	r22, -Z
    389a:	ae 17       	cp	r26, r30
    389c:	bf 07       	cpc	r27, r31
    389e:	c8 f3       	brcs	.-14     	; 0x3892 <strrev+0x10>
    38a0:	08 95       	ret

000038a2 <__udivmodhi4>:
    38a2:	aa 1b       	sub	r26, r26
    38a4:	bb 1b       	sub	r27, r27
    38a6:	51 e1       	ldi	r21, 0x11	; 17
    38a8:	07 c0       	rjmp	.+14     	; 0x38b8 <__udivmodhi4_ep>

000038aa <__udivmodhi4_loop>:
    38aa:	aa 1f       	adc	r26, r26
    38ac:	bb 1f       	adc	r27, r27
    38ae:	a6 17       	cp	r26, r22
    38b0:	b7 07       	cpc	r27, r23
    38b2:	10 f0       	brcs	.+4      	; 0x38b8 <__udivmodhi4_ep>
    38b4:	a6 1b       	sub	r26, r22
    38b6:	b7 0b       	sbc	r27, r23

000038b8 <__udivmodhi4_ep>:
    38b8:	88 1f       	adc	r24, r24
    38ba:	99 1f       	adc	r25, r25
    38bc:	5a 95       	dec	r21
    38be:	a9 f7       	brne	.-22     	; 0x38aa <__udivmodhi4_loop>
    38c0:	80 95       	com	r24
    38c2:	90 95       	com	r25
    38c4:	bc 01       	movw	r22, r24
    38c6:	cd 01       	movw	r24, r26
    38c8:	08 95       	ret

000038ca <_exit>:
    38ca:	f8 94       	cli

000038cc <__stop_program>:
    38cc:	ff cf       	rjmp	.-2      	; 0x38cc <__stop_program>
